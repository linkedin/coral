// Copyright 2019-2020 LinkedIn Corporation. All rights reserved.
// Licensed under the BSD-2 Clause license.
// See LICENSE in the project root for license information.

buildscript {
  repositories {
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "io.github.gradle-nexus:publish-plugin:1.1.0"
    classpath "org.shipkit:shipkit-auto-version:1.1.1"
    classpath "org.shipkit:shipkit-changelog:1.1.10"
    classpath "com.github.jengelman.gradle.plugins:shadow:6.1.0"
  }
}

plugins {
  id "com.diffplug.spotless" version "5.9.0"
  id "jacoco"
}

apply from: "gradle/shipkit.gradle"

configurations {
  provided
}

allprojects {
  group = "com.linkedin.coral"
  apply plugin: "com.diffplug.spotless"
  apply plugin: "jacoco"

  repositories {
    mavenCentral()
    maven {
      url 'https://linkedin.jfrog.io/artifactory/avro-util/'
    }
    maven {
      url 'https://linkedin.bintray.com/maven/'
    }
  }

  spotless {
    ratchetFrom 'origin/master'
    groovyGradle {
      target '**/*.gradle'
      endWithNewline()
      greclipse().configFile("${rootDir}/gradle/spotless/codestyle-eclipse.xml")
    }
    format 'markdown', {
      target '**/*.md'
      targetExclude 'docs/release-notes.md'
      endWithNewline()
    }
  }

  jacoco {
    toolVersion = "0.8.7"
  }
}

ext.moduleCoverageThresholds = [
  // Default coverage applied unless overridden
  'coral-dbt': 0.95,
  'coral-incremental': 0.95,
  'coral-pig': 0.85,
  'coral-schema': 0.80,
  'coral-service': 0.95,
  'coral-spark': 0.90,
  'coral-spark-plan': 0.74,
  'coral-trino': 0.80,
  'coral-visualization': 0.75,
  // Explicit exclusions
  'coral-common': 0.00,
  'coral-hive': 0.00,
]

subprojects {
  plugins.withType(JavaPlugin) {
    dependencies {
      testCompile deps.'testing'
    }
    test {
      useTestNG()
      finalizedBy jacocoTestReport
    }
    jacocoTestReport {
      reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
      }
      executionData.from = files(fileTree(dir: project.buildDir, includes: ['jacoco/*.exec']).files.findAll { it.exists() })
    }

    def moduleName = project.name
    def threshold = moduleCoverageThresholds.containsKey(moduleName)
        ? moduleCoverageThresholds[moduleName]
        : 0.95 // Default to 100% if not specified

    jacocoTestCoverageVerification {
      violationRules {
        rule {
          element = 'BUNDLE'
          limit {
            counter = 'INSTRUCTION'
            value = 'COVEREDRATIO'
            minimum = threshold
          }
          excludes = [
            'com.linkedin.coral.hive.hive2rel.parsetree.parser.*', //  org.jacoco.agent.rt.internal_3570298.asm.MethodTooLargeException: Method too large: com/linkedin/coral/hive/hive2rel/parsetree/parser/*
          ]
        }
      }
    }
    check.dependsOn jacocoTestCoverageVerification
    spotless {
      java {
        importOrder('java', 'javax', 'com', 'org', 'com.linkedin.coral', '\\#')
        removeUnusedImports()
        eclipse().configFile("${rootDir}/gradle/spotless/codestyle-eclipse.xml")
        licenseHeaderFile file("${rootDir}/gradle/license/LICENSE_HEADER")
      }
    }
  }

  apply from: "${rootDir}/gradle/dependencies.gradle"
  apply from: "${rootDir}/gradle/java-publication.gradle"
}

task jacocoRootReport(type: JacocoReport) {
  dependsOn = subprojects.test
  additionalSourceDirs.from = subprojects.sourceSets.main.allSource.srcDirs
  sourceDirectories.from = subprojects.sourceSets.main.allSource.srcDirs
  classDirectories.from = subprojects.sourceSets.main.output

  executionData.from = files(subprojects.findAll { p ->
    p.plugins.hasPlugin(JavaPlugin)
  }.collect { p ->
    p.file("${p.buildDir}/jacoco/test.exec")
  }.findAll { file ->
    file.exists()
  })

  reports {
    html.enabled = true
    xml.enabled = true
    csv.enabled = false
    html.destination file("${buildDir}/reports/jacoco")
  }
}

check.dependsOn jacocoRootReport
