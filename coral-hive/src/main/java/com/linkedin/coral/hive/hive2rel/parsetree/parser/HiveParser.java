// $ANTLR 3.4 HiveParser.g 2021-01-01 01:23:43

package com.linkedin.coral.hive.hive2rel.parsetree.parser;

import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hive.conf.HiveConf;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


/**
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
@SuppressWarnings({"all", "warnings", "unchecked"})
public class HiveParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "AMPERSAND", "BITWISEOR", "BITWISEXOR", "BigintLiteral", "ByteLengthLiteral", "COLON", "COMMA", "COMMENT", "CharSetLiteral", "CharSetName", "DIV", "DIVIDE", "DOLLAR", "DOT", "DecimalLiteral", "Digit", "EQUAL", "EQUAL_NS", "Exponent", "GREATERTHAN", "GREATERTHANOREQUALTO", "HexDigit", "Identifier", "KW_ADD", "KW_ADMIN", "KW_AFTER", "KW_ALL", "KW_ALTER", "KW_ANALYZE", "KW_AND", "KW_ARCHIVE", "KW_ARRAY", "KW_AS", "KW_ASC", "KW_AUTHORIZATION", "KW_BEFORE", "KW_BETWEEN", "KW_BIGINT", "KW_BINARY", "KW_BOOLEAN", "KW_BOTH", "KW_BUCKET", "KW_BUCKETS", "KW_BY", "KW_CASCADE", "KW_CASE", "KW_CAST", "KW_CHANGE", "KW_CHAR", "KW_CLUSTER", "KW_CLUSTERED", "KW_CLUSTERSTATUS", "KW_COLLECTION", "KW_COLUMN", "KW_COLUMNS", "KW_COMMENT", "KW_COMPACT", "KW_COMPACTIONS", "KW_COMPUTE", "KW_CONCATENATE", "KW_CONF", "KW_CONTINUE", "KW_CREATE", "KW_CROSS", "KW_CUBE", "KW_CURRENT", "KW_CURRENT_DATE", "KW_CURRENT_TIMESTAMP", "KW_CURSOR", "KW_DATA", "KW_DATABASE", "KW_DATABASES", "KW_DATE", "KW_DATETIME", "KW_DAY", "KW_DBPROPERTIES", "KW_DECIMAL", "KW_DEFERRED", "KW_DEFINED", "KW_DELETE", "KW_DELIMITED", "KW_DEPENDENCY", "KW_DESC", "KW_DESCRIBE", "KW_DIRECTORIES", "KW_DIRECTORY", "KW_DISABLE", "KW_DISTINCT", "KW_DISTRIBUTE", "KW_DOUBLE", "KW_DROP", "KW_ELEM_TYPE", "KW_ELSE", "KW_ENABLE", "KW_END", "KW_ESCAPED", "KW_EXCHANGE", "KW_EXCLUSIVE", "KW_EXISTS", "KW_EXPLAIN", "KW_EXPORT", "KW_EXTENDED", "KW_EXTERNAL", "KW_FALSE", "KW_FETCH", "KW_FIELDS", "KW_FILE", "KW_FILEFORMAT", "KW_FIRST", "KW_FLOAT", "KW_FOLLOWING", "KW_FOR", "KW_FORMAT", "KW_FORMATTED", "KW_FROM", "KW_FULL", "KW_FUNCTION", "KW_FUNCTIONS", "KW_GRANT", "KW_GROUP", "KW_GROUPING", "KW_HAVING", "KW_HOLD_DDLTIME", "KW_HOUR", "KW_IDXPROPERTIES", "KW_IF", "KW_IGNORE", "KW_IMPORT", "KW_IN", "KW_INDEX", "KW_INDEXES", "KW_INNER", "KW_INPATH", "KW_INPUTDRIVER", "KW_INPUTFORMAT", "KW_INSERT", "KW_INT", "KW_INTERSECT", "KW_INTERVAL", "KW_INTO", "KW_IS", "KW_ITEMS", "KW_JAR", "KW_JOIN", "KW_KEYS", "KW_KEY_TYPE", "KW_LATERAL", "KW_LEFT", "KW_LESS", "KW_LIKE", "KW_LIMIT", "KW_LINES", "KW_LOAD", "KW_LOCAL", "KW_LOCATION", "KW_LOCK", "KW_LOCKS", "KW_LOGICAL", "KW_LONG", "KW_MACRO", "KW_MAP", "KW_MAPJOIN", "KW_MATERIALIZED", "KW_METADATA", "KW_MINUS", "KW_MINUTE", "KW_MONTH", "KW_MORE", "KW_MSCK", "KW_NONE", "KW_NOSCAN", "KW_NOT", "KW_NO_DROP", "KW_NULL", "KW_OF", "KW_OFFLINE", "KW_ON", "KW_OPTION", "KW_OR", "KW_ORDER", "KW_OUT", "KW_OUTER", "KW_OUTPUTDRIVER", "KW_OUTPUTFORMAT", "KW_OVER", "KW_OVERWRITE", "KW_OWNER", "KW_PARTIALSCAN", "KW_PARTITION", "KW_PARTITIONED", "KW_PARTITIONS", "KW_PERCENT", "KW_PLUS", "KW_PRECEDING", "KW_PRESERVE", "KW_PRETTY", "KW_PRINCIPALS", "KW_PROCEDURE", "KW_PROTECTION", "KW_PURGE", "KW_RANGE", "KW_READ", "KW_READONLY", "KW_READS", "KW_REBUILD", "KW_RECORDREADER", "KW_RECORDWRITER", "KW_REDUCE", "KW_REGEXP", "KW_RELOAD", "KW_RENAME", "KW_REPAIR", "KW_REPLACE", "KW_REPLICATION", "KW_RESTRICT", "KW_REVOKE", "KW_REWRITE", "KW_RIGHT", "KW_RLIKE", "KW_ROLE", "KW_ROLES", "KW_ROLLUP", "KW_ROW", "KW_ROWS", "KW_SCHEMA", "KW_SCHEMAS", "KW_SECOND", "KW_SELECT", "KW_SEMI", "KW_SERDE", "KW_SERDEPROPERTIES", "KW_SERVER", "KW_SET", "KW_SETS", "KW_SHARED", "KW_SHOW", "KW_SHOW_DATABASE", "KW_SKEWED", "KW_SMALLINT", "KW_SORT", "KW_SORTED", "KW_SSL", "KW_STATISTICS", "KW_STORED", "KW_STREAMTABLE", "KW_STRING", "KW_STRUCT", "KW_TABLE", "KW_TABLES", "KW_TABLESAMPLE", "KW_TBLPROPERTIES", "KW_TEMPORARY", "KW_TERMINATED", "KW_THEN", "KW_TIMESTAMP", "KW_TINYINT", "KW_TO", "KW_TOUCH", "KW_TRANSACTIONS", "KW_TRANSFORM", "KW_TRIGGER", "KW_TRUE", "KW_TRUNCATE", "KW_UNARCHIVE", "KW_UNBOUNDED", "KW_UNDO", "KW_UNION", "KW_UNIONTYPE", "KW_UNIQUEJOIN", "KW_UNLOCK", "KW_UNSET", "KW_UNSIGNED", "KW_UPDATE", "KW_URI", "KW_USE", "KW_USER", "KW_USING", "KW_UTC", "KW_UTCTIMESTAMP", "KW_VALUES", "KW_VALUE_TYPE", "KW_VARCHAR", "KW_VIEW", "KW_WHEN", "KW_WHERE", "KW_WHILE", "KW_WINDOW", "KW_WITH", "KW_YEAR", "LCURLY", "LESSTHAN", "LESSTHANOREQUALTO", "LPAREN", "LSQUARE", "Letter", "MINUS", "MOD", "NOTEQUAL", "Number", "PLUS", "QUESTION", "QuotedIdentifier", "RCURLY", "RPAREN", "RSQUARE", "RegexComponent", "SEMICOLON", "STAR", "SmallintLiteral", "StringLiteral", "TILDE", "TinyintLiteral", "WS", "TOK_ADMIN_OPTION_FOR", "TOK_ALIASLIST", "TOK_ALLCOLREF", "TOK_ALTERDATABASE_OWNER", "TOK_ALTERDATABASE_PROPERTIES", "TOK_ALTERINDEX_PROPERTIES", "TOK_ALTERINDEX_REBUILD", "TOK_ALTERTABLE", "TOK_ALTERTABLE_ADDCOLS", "TOK_ALTERTABLE_ADDPARTS", "TOK_ALTERTABLE_ARCHIVE", "TOK_ALTERTABLE_BUCKETS", "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION", "TOK_ALTERTABLE_CLUSTER_SORT", "TOK_ALTERTABLE_COMPACT", "TOK_ALTERTABLE_DROPPARTS", "TOK_ALTERTABLE_DROPPROPERTIES", "TOK_ALTERTABLE_EXCHANGEPARTITION", "TOK_ALTERTABLE_FILEFORMAT", "TOK_ALTERTABLE_LOCATION", "TOK_ALTERTABLE_MERGEFILES", "TOK_ALTERTABLE_PARTCOLTYPE", "TOK_ALTERTABLE_PROPERTIES", "TOK_ALTERTABLE_PROTECTMODE", "TOK_ALTERTABLE_RENAME", "TOK_ALTERTABLE_RENAMECOL", "TOK_ALTERTABLE_RENAMEPART", "TOK_ALTERTABLE_REPLACECOLS", "TOK_ALTERTABLE_SERDEPROPERTIES", "TOK_ALTERTABLE_SERIALIZER", "TOK_ALTERTABLE_SKEWED", "TOK_ALTERTABLE_SKEWED_LOCATION", "TOK_ALTERTABLE_TOUCH", "TOK_ALTERTABLE_UNARCHIVE", "TOK_ALTERTABLE_UPDATECOLSTATS", "TOK_ALTERVIEW", "TOK_ALTERVIEW_ADDPARTS", "TOK_ALTERVIEW_DROPPARTS", "TOK_ALTERVIEW_DROPPROPERTIES", "TOK_ALTERVIEW_PROPERTIES", "TOK_ALTERVIEW_RENAME", "TOK_ANALYZE", "TOK_ANONYMOUS", "TOK_ARCHIVE", "TOK_BIGINT", "TOK_BINARY", "TOK_BOOLEAN", "TOK_CASCADE", "TOK_CHAR", "TOK_CHARSETLITERAL", "TOK_CLUSTERBY", "TOK_COLTYPELIST", "TOK_COL_NAME", "TOK_CREATEDATABASE", "TOK_CREATEFUNCTION", "TOK_CREATEINDEX", "TOK_CREATEINDEX_INDEXTBLNAME", "TOK_CREATEMACRO", "TOK_CREATEROLE", "TOK_CREATETABLE", "TOK_CREATEVIEW", "TOK_CROSSJOIN", "TOK_CTE", "TOK_CUBE_GROUPBY", "TOK_DATABASECOMMENT", "TOK_DATABASELOCATION", "TOK_DATABASEPROPERTIES", "TOK_DATE", "TOK_DATELITERAL", "TOK_DATETIME", "TOK_DBPROPLIST", "TOK_DB_TYPE", "TOK_DECIMAL", "TOK_DEFERRED_REBUILDINDEX", "TOK_DELETE_FROM", "TOK_DESCDATABASE", "TOK_DESCFUNCTION", "TOK_DESCTABLE", "TOK_DESTINATION", "TOK_DIR", "TOK_DISABLE", "TOK_DISTRIBUTEBY", "TOK_DOUBLE", "TOK_DROPDATABASE", "TOK_DROPFUNCTION", "TOK_DROPINDEX", "TOK_DROPMACRO", "TOK_DROPROLE", "TOK_DROPTABLE", "TOK_DROPVIEW", "TOK_ENABLE", "TOK_EXPLAIN", "TOK_EXPLAIN_SQ_REWRITE", "TOK_EXPLIST", "TOK_EXPORT", "TOK_FALSE", "TOK_FILE", "TOK_FILEFORMAT_GENERIC", "TOK_FLOAT", "TOK_FROM", "TOK_FULLOUTERJOIN", "TOK_FUNCTION", "TOK_FUNCTIONDI", "TOK_FUNCTIONSTAR", "TOK_GRANT", "TOK_GRANT_OPTION_FOR", "TOK_GRANT_ROLE", "TOK_GRANT_WITH_ADMIN_OPTION", "TOK_GRANT_WITH_OPTION", "TOK_GROUP", "TOK_GROUPBY", "TOK_GROUPING_SETS", "TOK_GROUPING_SETS_EXPRESSION", "TOK_HAVING", "TOK_HINT", "TOK_HINTARGLIST", "TOK_HINTLIST", "TOK_HOLD_DDLTIME", "TOK_IFEXISTS", "TOK_IFNOTEXISTS", "TOK_IGNOREPROTECTION", "TOK_IMPORT", "TOK_INDEXCOMMENT", "TOK_INDEXPROPERTIES", "TOK_INDEXPROPLIST", "TOK_INSERT", "TOK_INSERT_INTO", "TOK_INT", "TOK_INTERVAL_DAY_LITERAL", "TOK_INTERVAL_DAY_TIME", "TOK_INTERVAL_DAY_TIME_LITERAL", "TOK_INTERVAL_HOUR_LITERAL", "TOK_INTERVAL_MINUTE_LITERAL", "TOK_INTERVAL_MONTH_LITERAL", "TOK_INTERVAL_SECOND_LITERAL", "TOK_INTERVAL_YEAR_LITERAL", "TOK_INTERVAL_YEAR_MONTH", "TOK_INTERVAL_YEAR_MONTH_LITERAL", "TOK_ISNOTNULL", "TOK_ISNULL", "TOK_JAR", "TOK_JOIN", "TOK_LATERAL_VIEW", "TOK_LATERAL_VIEW_OUTER", "TOK_LEFTOUTERJOIN", "TOK_LEFTSEMIJOIN", "TOK_LENGTH", "TOK_LIKETABLE", "TOK_LIMIT", "TOK_LIST", "TOK_LOAD", "TOK_LOCKDB", "TOK_LOCKTABLE", "TOK_MAP", "TOK_MAPJOIN", "TOK_METADATA", "TOK_MSCK", "TOK_NOT_CLUSTERED", "TOK_NOT_SORTED", "TOK_NO_DROP", "TOK_NULL", "TOK_OFFLINE", "TOK_OP_ADD", "TOK_OP_AND", "TOK_OP_BITAND", "TOK_OP_BITNOT", "TOK_OP_BITOR", "TOK_OP_BITXOR", "TOK_OP_DIV", "TOK_OP_EQ", "TOK_OP_GE", "TOK_OP_GT", "TOK_OP_LE", "TOK_OP_LIKE", "TOK_OP_LT", "TOK_OP_MOD", "TOK_OP_MUL", "TOK_OP_NE", "TOK_OP_NOT", "TOK_OP_OR", "TOK_OP_SUB", "TOK_ORDERBY", "TOK_ORREPLACE", "TOK_PARTITIONINGSPEC", "TOK_PARTITIONLOCATION", "TOK_PARTSPEC", "TOK_PARTVAL", "TOK_PERCENT", "TOK_PRINCIPAL_NAME", "TOK_PRIVILEGE", "TOK_PRIVILEGE_LIST", "TOK_PRIV_ALL", "TOK_PRIV_ALTER_DATA", "TOK_PRIV_ALTER_METADATA", "TOK_PRIV_CREATE", "TOK_PRIV_DELETE", "TOK_PRIV_DROP", "TOK_PRIV_INDEX", "TOK_PRIV_INSERT", "TOK_PRIV_LOCK", "TOK_PRIV_OBJECT", "TOK_PRIV_OBJECT_COL", "TOK_PRIV_SELECT", "TOK_PRIV_SHOW_DATABASE", "TOK_PTBLFUNCTION", "TOK_QUERY", "TOK_READONLY", "TOK_RECORDREADER", "TOK_RECORDWRITER", "TOK_RELOADFUNCTION", "TOK_REPLICATION", "TOK_RESOURCE_ALL", "TOK_RESOURCE_LIST", "TOK_RESOURCE_URI", "TOK_RESTRICT", "TOK_REVOKE", "TOK_REVOKE_ROLE", "TOK_RIGHTOUTERJOIN", "TOK_ROLE", "TOK_ROLLUP_GROUPBY", "TOK_ROWCOUNT", "TOK_SELECT", "TOK_SELECTDI", "TOK_SELEXPR", "TOK_SERDE", "TOK_SERDENAME", "TOK_SERDEPROPS", "TOK_SERVER_TYPE", "TOK_SET_COLUMNS_CLAUSE", "TOK_SHOWCOLUMNS", "TOK_SHOWCONF", "TOK_SHOWDATABASES", "TOK_SHOWDBLOCKS", "TOK_SHOWFUNCTIONS", "TOK_SHOWINDEXES", "TOK_SHOWLOCKS", "TOK_SHOWPARTITIONS", "TOK_SHOWTABLES", "TOK_SHOW_COMPACTIONS", "TOK_SHOW_CREATETABLE", "TOK_SHOW_GRANT", "TOK_SHOW_ROLES", "TOK_SHOW_ROLE_GRANT", "TOK_SHOW_ROLE_PRINCIPALS", "TOK_SHOW_SET_ROLE", "TOK_SHOW_TABLESTATUS", "TOK_SHOW_TBLPROPERTIES", "TOK_SHOW_TRANSACTIONS", "TOK_SKEWED_LOCATIONS", "TOK_SKEWED_LOCATION_LIST", "TOK_SKEWED_LOCATION_MAP", "TOK_SMALLINT", "TOK_SORTBY", "TOK_STORAGEHANDLER", "TOK_STOREDASDIRS", "TOK_STREAMTABLE", "TOK_STRING", "TOK_STRINGLITERALSEQUENCE", "TOK_STRUCT", "TOK_SUBQUERY", "TOK_SUBQUERY_EXPR", "TOK_SUBQUERY_OP", "TOK_SUBQUERY_OP_NOTEXISTS", "TOK_SUBQUERY_OP_NOTIN", "TOK_SWITCHDATABASE", "TOK_TAB", "TOK_TABALIAS", "TOK_TABCOL", "TOK_TABCOLLIST", "TOK_TABCOLNAME", "TOK_TABCOLVALUE", "TOK_TABCOLVALUES", "TOK_TABCOLVALUE_PAIR", "TOK_TABLEBUCKETSAMPLE", "TOK_TABLECOMMENT", "TOK_TABLEFILEFORMAT", "TOK_TABLELOCATION", "TOK_TABLEPARTCOLS", "TOK_TABLEPROPERTIES", "TOK_TABLEPROPERTY", "TOK_TABLEPROPLIST", "TOK_TABLEROWFORMAT", "TOK_TABLEROWFORMATCOLLITEMS", "TOK_TABLEROWFORMATFIELD", "TOK_TABLEROWFORMATLINES", "TOK_TABLEROWFORMATMAPKEYS", "TOK_TABLEROWFORMATNULL", "TOK_TABLESERIALIZER", "TOK_TABLESKEWED", "TOK_TABLESPLITSAMPLE", "TOK_TABLE_OR_COL", "TOK_TABLE_PARTITION", "TOK_TABLE_TYPE", "TOK_TABNAME", "TOK_TABREF", "TOK_TABSORTCOLNAMEASC", "TOK_TABSORTCOLNAMEDESC", "TOK_TABSRC", "TOK_TABTYPE", "TOK_TEMPORARY", "TOK_TIMESTAMP", "TOK_TIMESTAMPLITERAL", "TOK_TINYINT", "TOK_TMP_FILE", "TOK_TRANSFORM", "TOK_TRUE", "TOK_TRUNCATETABLE", "TOK_UNIONALL", "TOK_UNIONDISTINCT", "TOK_UNIONTYPE", "TOK_UNIQUEJOIN", "TOK_UNLOCKDB", "TOK_UNLOCKTABLE", "TOK_UPDATE_TABLE", "TOK_URI_TYPE", "TOK_USER", "TOK_USERSCRIPTCOLNAMES", "TOK_USERSCRIPTCOLSCHEMA", "TOK_VALUES_TABLE", "TOK_VALUE_ROW", "TOK_VARCHAR", "TOK_VIEWPARTCOLS", "TOK_VIRTUAL_TABLE", "TOK_VIRTUAL_TABREF", "TOK_WHERE", "TOK_WINDOWDEF", "TOK_WINDOWRANGE", "TOK_WINDOWSPEC", "TOK_WINDOWVALUES", "933"
    };

    public static final int EOF=-1;
    public static final int AMPERSAND=4;
    public static final int BITWISEOR=5;
    public static final int BITWISEXOR=6;
    public static final int BigintLiteral=7;
    public static final int ByteLengthLiteral=8;
    public static final int COLON=9;
    public static final int COMMA=10;
    public static final int COMMENT=11;
    public static final int CharSetLiteral=12;
    public static final int CharSetName=13;
    public static final int DIV=14;
    public static final int DIVIDE=15;
    public static final int DOLLAR=16;
    public static final int DOT=17;
    public static final int DecimalLiteral=18;
    public static final int Digit=19;
    public static final int EQUAL=20;
    public static final int EQUAL_NS=21;
    public static final int Exponent=22;
    public static final int GREATERTHAN=23;
    public static final int GREATERTHANOREQUALTO=24;
    public static final int HexDigit=25;
    public static final int Identifier=26;
    public static final int KW_ADD=27;
    public static final int KW_ADMIN=28;
    public static final int KW_AFTER=29;
    public static final int KW_ALL=30;
    public static final int KW_ALTER=31;
    public static final int KW_ANALYZE=32;
    public static final int KW_AND=33;
    public static final int KW_ARCHIVE=34;
    public static final int KW_ARRAY=35;
    public static final int KW_AS=36;
    public static final int KW_ASC=37;
    public static final int KW_AUTHORIZATION=38;
    public static final int KW_BEFORE=39;
    public static final int KW_BETWEEN=40;
    public static final int KW_BIGINT=41;
    public static final int KW_BINARY=42;
    public static final int KW_BOOLEAN=43;
    public static final int KW_BOTH=44;
    public static final int KW_BUCKET=45;
    public static final int KW_BUCKETS=46;
    public static final int KW_BY=47;
    public static final int KW_CASCADE=48;
    public static final int KW_CASE=49;
    public static final int KW_CAST=50;
    public static final int KW_CHANGE=51;
    public static final int KW_CHAR=52;
    public static final int KW_CLUSTER=53;
    public static final int KW_CLUSTERED=54;
    public static final int KW_CLUSTERSTATUS=55;
    public static final int KW_COLLECTION=56;
    public static final int KW_COLUMN=57;
    public static final int KW_COLUMNS=58;
    public static final int KW_COMMENT=59;
    public static final int KW_COMPACT=60;
    public static final int KW_COMPACTIONS=61;
    public static final int KW_COMPUTE=62;
    public static final int KW_CONCATENATE=63;
    public static final int KW_CONF=64;
    public static final int KW_CONTINUE=65;
    public static final int KW_CREATE=66;
    public static final int KW_CROSS=67;
    public static final int KW_CUBE=68;
    public static final int KW_CURRENT=69;
    public static final int KW_CURRENT_DATE=70;
    public static final int KW_CURRENT_TIMESTAMP=71;
    public static final int KW_CURSOR=72;
    public static final int KW_DATA=73;
    public static final int KW_DATABASE=74;
    public static final int KW_DATABASES=75;
    public static final int KW_DATE=76;
    public static final int KW_DATETIME=77;
    public static final int KW_DAY=78;
    public static final int KW_DBPROPERTIES=79;
    public static final int KW_DECIMAL=80;
    public static final int KW_DEFERRED=81;
    public static final int KW_DEFINED=82;
    public static final int KW_DELETE=83;
    public static final int KW_DELIMITED=84;
    public static final int KW_DEPENDENCY=85;
    public static final int KW_DESC=86;
    public static final int KW_DESCRIBE=87;
    public static final int KW_DIRECTORIES=88;
    public static final int KW_DIRECTORY=89;
    public static final int KW_DISABLE=90;
    public static final int KW_DISTINCT=91;
    public static final int KW_DISTRIBUTE=92;
    public static final int KW_DOUBLE=93;
    public static final int KW_DROP=94;
    public static final int KW_ELEM_TYPE=95;
    public static final int KW_ELSE=96;
    public static final int KW_ENABLE=97;
    public static final int KW_END=98;
    public static final int KW_ESCAPED=99;
    public static final int KW_EXCHANGE=100;
    public static final int KW_EXCLUSIVE=101;
    public static final int KW_EXISTS=102;
    public static final int KW_EXPLAIN=103;
    public static final int KW_EXPORT=104;
    public static final int KW_EXTENDED=105;
    public static final int KW_EXTERNAL=106;
    public static final int KW_FALSE=107;
    public static final int KW_FETCH=108;
    public static final int KW_FIELDS=109;
    public static final int KW_FILE=110;
    public static final int KW_FILEFORMAT=111;
    public static final int KW_FIRST=112;
    public static final int KW_FLOAT=113;
    public static final int KW_FOLLOWING=114;
    public static final int KW_FOR=115;
    public static final int KW_FORMAT=116;
    public static final int KW_FORMATTED=117;
    public static final int KW_FROM=118;
    public static final int KW_FULL=119;
    public static final int KW_FUNCTION=120;
    public static final int KW_FUNCTIONS=121;
    public static final int KW_GRANT=122;
    public static final int KW_GROUP=123;
    public static final int KW_GROUPING=124;
    public static final int KW_HAVING=125;
    public static final int KW_HOLD_DDLTIME=126;
    public static final int KW_HOUR=127;
    public static final int KW_IDXPROPERTIES=128;
    public static final int KW_IF=129;
    public static final int KW_IGNORE=130;
    public static final int KW_IMPORT=131;
    public static final int KW_IN=132;
    public static final int KW_INDEX=133;
    public static final int KW_INDEXES=134;
    public static final int KW_INNER=135;
    public static final int KW_INPATH=136;
    public static final int KW_INPUTDRIVER=137;
    public static final int KW_INPUTFORMAT=138;
    public static final int KW_INSERT=139;
    public static final int KW_INT=140;
    public static final int KW_INTERSECT=141;
    public static final int KW_INTERVAL=142;
    public static final int KW_INTO=143;
    public static final int KW_IS=144;
    public static final int KW_ITEMS=145;
    public static final int KW_JAR=146;
    public static final int KW_JOIN=147;
    public static final int KW_KEYS=148;
    public static final int KW_KEY_TYPE=149;
    public static final int KW_LATERAL=150;
    public static final int KW_LEFT=151;
    public static final int KW_LESS=152;
    public static final int KW_LIKE=153;
    public static final int KW_LIMIT=154;
    public static final int KW_LINES=155;
    public static final int KW_LOAD=156;
    public static final int KW_LOCAL=157;
    public static final int KW_LOCATION=158;
    public static final int KW_LOCK=159;
    public static final int KW_LOCKS=160;
    public static final int KW_LOGICAL=161;
    public static final int KW_LONG=162;
    public static final int KW_MACRO=163;
    public static final int KW_MAP=164;
    public static final int KW_MAPJOIN=165;
    public static final int KW_MATERIALIZED=166;
    public static final int KW_METADATA=167;
    public static final int KW_MINUS=168;
    public static final int KW_MINUTE=169;
    public static final int KW_MONTH=170;
    public static final int KW_MORE=171;
    public static final int KW_MSCK=172;
    public static final int KW_NONE=173;
    public static final int KW_NOSCAN=174;
    public static final int KW_NOT=175;
    public static final int KW_NO_DROP=176;
    public static final int KW_NULL=177;
    public static final int KW_OF=178;
    public static final int KW_OFFLINE=179;
    public static final int KW_ON=180;
    public static final int KW_OPTION=181;
    public static final int KW_OR=182;
    public static final int KW_ORDER=183;
    public static final int KW_OUT=184;
    public static final int KW_OUTER=185;
    public static final int KW_OUTPUTDRIVER=186;
    public static final int KW_OUTPUTFORMAT=187;
    public static final int KW_OVER=188;
    public static final int KW_OVERWRITE=189;
    public static final int KW_OWNER=190;
    public static final int KW_PARTIALSCAN=191;
    public static final int KW_PARTITION=192;
    public static final int KW_PARTITIONED=193;
    public static final int KW_PARTITIONS=194;
    public static final int KW_PERCENT=195;
    public static final int KW_PLUS=196;
    public static final int KW_PRECEDING=197;
    public static final int KW_PRESERVE=198;
    public static final int KW_PRETTY=199;
    public static final int KW_PRINCIPALS=200;
    public static final int KW_PROCEDURE=201;
    public static final int KW_PROTECTION=202;
    public static final int KW_PURGE=203;
    public static final int KW_RANGE=204;
    public static final int KW_READ=205;
    public static final int KW_READONLY=206;
    public static final int KW_READS=207;
    public static final int KW_REBUILD=208;
    public static final int KW_RECORDREADER=209;
    public static final int KW_RECORDWRITER=210;
    public static final int KW_REDUCE=211;
    public static final int KW_REGEXP=212;
    public static final int KW_RELOAD=213;
    public static final int KW_RENAME=214;
    public static final int KW_REPAIR=215;
    public static final int KW_REPLACE=216;
    public static final int KW_REPLICATION=217;
    public static final int KW_RESTRICT=218;
    public static final int KW_REVOKE=219;
    public static final int KW_REWRITE=220;
    public static final int KW_RIGHT=221;
    public static final int KW_RLIKE=222;
    public static final int KW_ROLE=223;
    public static final int KW_ROLES=224;
    public static final int KW_ROLLUP=225;
    public static final int KW_ROW=226;
    public static final int KW_ROWS=227;
    public static final int KW_SCHEMA=228;
    public static final int KW_SCHEMAS=229;
    public static final int KW_SECOND=230;
    public static final int KW_SELECT=231;
    public static final int KW_SEMI=232;
    public static final int KW_SERDE=233;
    public static final int KW_SERDEPROPERTIES=234;
    public static final int KW_SERVER=235;
    public static final int KW_SET=236;
    public static final int KW_SETS=237;
    public static final int KW_SHARED=238;
    public static final int KW_SHOW=239;
    public static final int KW_SHOW_DATABASE=240;
    public static final int KW_SKEWED=241;
    public static final int KW_SMALLINT=242;
    public static final int KW_SORT=243;
    public static final int KW_SORTED=244;
    public static final int KW_SSL=245;
    public static final int KW_STATISTICS=246;
    public static final int KW_STORED=247;
    public static final int KW_STREAMTABLE=248;
    public static final int KW_STRING=249;
    public static final int KW_STRUCT=250;
    public static final int KW_TABLE=251;
    public static final int KW_TABLES=252;
    public static final int KW_TABLESAMPLE=253;
    public static final int KW_TBLPROPERTIES=254;
    public static final int KW_TEMPORARY=255;
    public static final int KW_TERMINATED=256;
    public static final int KW_THEN=257;
    public static final int KW_TIMESTAMP=258;
    public static final int KW_TINYINT=259;
    public static final int KW_TO=260;
    public static final int KW_TOUCH=261;
    public static final int KW_TRANSACTIONS=262;
    public static final int KW_TRANSFORM=263;
    public static final int KW_TRIGGER=264;
    public static final int KW_TRUE=265;
    public static final int KW_TRUNCATE=266;
    public static final int KW_UNARCHIVE=267;
    public static final int KW_UNBOUNDED=268;
    public static final int KW_UNDO=269;
    public static final int KW_UNION=270;
    public static final int KW_UNIONTYPE=271;
    public static final int KW_UNIQUEJOIN=272;
    public static final int KW_UNLOCK=273;
    public static final int KW_UNSET=274;
    public static final int KW_UNSIGNED=275;
    public static final int KW_UPDATE=276;
    public static final int KW_URI=277;
    public static final int KW_USE=278;
    public static final int KW_USER=279;
    public static final int KW_USING=280;
    public static final int KW_UTC=281;
    public static final int KW_UTCTIMESTAMP=282;
    public static final int KW_VALUES=283;
    public static final int KW_VALUE_TYPE=284;
    public static final int KW_VARCHAR=285;
    public static final int KW_VIEW=286;
    public static final int KW_WHEN=287;
    public static final int KW_WHERE=288;
    public static final int KW_WHILE=289;
    public static final int KW_WINDOW=290;
    public static final int KW_WITH=291;
    public static final int KW_YEAR=292;
    public static final int LCURLY=293;
    public static final int LESSTHAN=294;
    public static final int LESSTHANOREQUALTO=295;
    public static final int LPAREN=296;
    public static final int LSQUARE=297;
    public static final int Letter=298;
    public static final int MINUS=299;
    public static final int MOD=300;
    public static final int NOTEQUAL=301;
    public static final int Number=302;
    public static final int PLUS=303;
    public static final int QUESTION=304;
    public static final int QuotedIdentifier=305;
    public static final int RCURLY=306;
    public static final int RPAREN=307;
    public static final int RSQUARE=308;
    public static final int RegexComponent=309;
    public static final int SEMICOLON=310;
    public static final int STAR=311;
    public static final int SmallintLiteral=312;
    public static final int StringLiteral=313;
    public static final int TILDE=314;
    public static final int TinyintLiteral=315;
    public static final int WS=316;
    public static final int TOK_ADMIN_OPTION_FOR=604;
    public static final int TOK_ALIASLIST=605;
    public static final int TOK_ALLCOLREF=606;
    public static final int TOK_ALTERDATABASE_OWNER=607;
    public static final int TOK_ALTERDATABASE_PROPERTIES=608;
    public static final int TOK_ALTERINDEX_PROPERTIES=609;
    public static final int TOK_ALTERINDEX_REBUILD=610;
    public static final int TOK_ALTERTABLE=611;
    public static final int TOK_ALTERTABLE_ADDCOLS=612;
    public static final int TOK_ALTERTABLE_ADDPARTS=613;
    public static final int TOK_ALTERTABLE_ARCHIVE=614;
    public static final int TOK_ALTERTABLE_BUCKETS=615;
    public static final int TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION=616;
    public static final int TOK_ALTERTABLE_CLUSTER_SORT=617;
    public static final int TOK_ALTERTABLE_COMPACT=618;
    public static final int TOK_ALTERTABLE_DROPPARTS=619;
    public static final int TOK_ALTERTABLE_DROPPROPERTIES=620;
    public static final int TOK_ALTERTABLE_EXCHANGEPARTITION=621;
    public static final int TOK_ALTERTABLE_FILEFORMAT=622;
    public static final int TOK_ALTERTABLE_LOCATION=623;
    public static final int TOK_ALTERTABLE_MERGEFILES=624;
    public static final int TOK_ALTERTABLE_PARTCOLTYPE=625;
    public static final int TOK_ALTERTABLE_PROPERTIES=626;
    public static final int TOK_ALTERTABLE_PROTECTMODE=627;
    public static final int TOK_ALTERTABLE_RENAME=628;
    public static final int TOK_ALTERTABLE_RENAMECOL=629;
    public static final int TOK_ALTERTABLE_RENAMEPART=630;
    public static final int TOK_ALTERTABLE_REPLACECOLS=631;
    public static final int TOK_ALTERTABLE_SERDEPROPERTIES=632;
    public static final int TOK_ALTERTABLE_SERIALIZER=633;
    public static final int TOK_ALTERTABLE_SKEWED=634;
    public static final int TOK_ALTERTABLE_SKEWED_LOCATION=635;
    public static final int TOK_ALTERTABLE_TOUCH=636;
    public static final int TOK_ALTERTABLE_UNARCHIVE=637;
    public static final int TOK_ALTERTABLE_UPDATECOLSTATS=638;
    public static final int TOK_ALTERVIEW=639;
    public static final int TOK_ALTERVIEW_ADDPARTS=640;
    public static final int TOK_ALTERVIEW_DROPPARTS=641;
    public static final int TOK_ALTERVIEW_DROPPROPERTIES=642;
    public static final int TOK_ALTERVIEW_PROPERTIES=643;
    public static final int TOK_ALTERVIEW_RENAME=644;
    public static final int TOK_ANALYZE=645;
    public static final int TOK_ANONYMOUS=646;
    public static final int TOK_ARCHIVE=647;
    public static final int TOK_BIGINT=648;
    public static final int TOK_BINARY=649;
    public static final int TOK_BOOLEAN=650;
    public static final int TOK_CASCADE=651;
    public static final int TOK_CHAR=652;
    public static final int TOK_CHARSETLITERAL=653;
    public static final int TOK_CLUSTERBY=654;
    public static final int TOK_COLTYPELIST=655;
    public static final int TOK_COL_NAME=656;
    public static final int TOK_CREATEDATABASE=657;
    public static final int TOK_CREATEFUNCTION=658;
    public static final int TOK_CREATEINDEX=659;
    public static final int TOK_CREATEINDEX_INDEXTBLNAME=660;
    public static final int TOK_CREATEMACRO=661;
    public static final int TOK_CREATEROLE=662;
    public static final int TOK_CREATETABLE=663;
    public static final int TOK_CREATEVIEW=664;
    public static final int TOK_CROSSJOIN=665;
    public static final int TOK_CTE=666;
    public static final int TOK_CUBE_GROUPBY=667;
    public static final int TOK_DATABASECOMMENT=668;
    public static final int TOK_DATABASELOCATION=669;
    public static final int TOK_DATABASEPROPERTIES=670;
    public static final int TOK_DATE=671;
    public static final int TOK_DATELITERAL=672;
    public static final int TOK_DATETIME=673;
    public static final int TOK_DBPROPLIST=674;
    public static final int TOK_DB_TYPE=675;
    public static final int TOK_DECIMAL=676;
    public static final int TOK_DEFERRED_REBUILDINDEX=677;
    public static final int TOK_DELETE_FROM=678;
    public static final int TOK_DESCDATABASE=679;
    public static final int TOK_DESCFUNCTION=680;
    public static final int TOK_DESCTABLE=681;
    public static final int TOK_DESTINATION=682;
    public static final int TOK_DIR=683;
    public static final int TOK_DISABLE=684;
    public static final int TOK_DISTRIBUTEBY=685;
    public static final int TOK_DOUBLE=686;
    public static final int TOK_DROPDATABASE=687;
    public static final int TOK_DROPFUNCTION=688;
    public static final int TOK_DROPINDEX=689;
    public static final int TOK_DROPMACRO=690;
    public static final int TOK_DROPROLE=691;
    public static final int TOK_DROPTABLE=692;
    public static final int TOK_DROPVIEW=693;
    public static final int TOK_ENABLE=694;
    public static final int TOK_EXPLAIN=695;
    public static final int TOK_EXPLAIN_SQ_REWRITE=696;
    public static final int TOK_EXPLIST=697;
    public static final int TOK_EXPORT=698;
    public static final int TOK_FALSE=699;
    public static final int TOK_FILE=700;
    public static final int TOK_FILEFORMAT_GENERIC=701;
    public static final int TOK_FLOAT=702;
    public static final int TOK_FROM=703;
    public static final int TOK_FULLOUTERJOIN=704;
    public static final int TOK_FUNCTION=705;
    public static final int TOK_FUNCTIONDI=706;
    public static final int TOK_FUNCTIONSTAR=707;
    public static final int TOK_GRANT=708;
    public static final int TOK_GRANT_OPTION_FOR=709;
    public static final int TOK_GRANT_ROLE=710;
    public static final int TOK_GRANT_WITH_ADMIN_OPTION=711;
    public static final int TOK_GRANT_WITH_OPTION=712;
    public static final int TOK_GROUP=713;
    public static final int TOK_GROUPBY=714;
    public static final int TOK_GROUPING_SETS=715;
    public static final int TOK_GROUPING_SETS_EXPRESSION=716;
    public static final int TOK_HAVING=717;
    public static final int TOK_HINT=718;
    public static final int TOK_HINTARGLIST=719;
    public static final int TOK_HINTLIST=720;
    public static final int TOK_HOLD_DDLTIME=721;
    public static final int TOK_IFEXISTS=722;
    public static final int TOK_IFNOTEXISTS=723;
    public static final int TOK_IGNOREPROTECTION=724;
    public static final int TOK_IMPORT=725;
    public static final int TOK_INDEXCOMMENT=726;
    public static final int TOK_INDEXPROPERTIES=727;
    public static final int TOK_INDEXPROPLIST=728;
    public static final int TOK_INSERT=729;
    public static final int TOK_INSERT_INTO=730;
    public static final int TOK_INT=731;
    public static final int TOK_INTERVAL_DAY_LITERAL=732;
    public static final int TOK_INTERVAL_DAY_TIME=733;
    public static final int TOK_INTERVAL_DAY_TIME_LITERAL=734;
    public static final int TOK_INTERVAL_HOUR_LITERAL=735;
    public static final int TOK_INTERVAL_MINUTE_LITERAL=736;
    public static final int TOK_INTERVAL_MONTH_LITERAL=737;
    public static final int TOK_INTERVAL_SECOND_LITERAL=738;
    public static final int TOK_INTERVAL_YEAR_LITERAL=739;
    public static final int TOK_INTERVAL_YEAR_MONTH=740;
    public static final int TOK_INTERVAL_YEAR_MONTH_LITERAL=741;
    public static final int TOK_ISNOTNULL=742;
    public static final int TOK_ISNULL=743;
    public static final int TOK_JAR=744;
    public static final int TOK_JOIN=745;
    public static final int TOK_LATERAL_VIEW=746;
    public static final int TOK_LATERAL_VIEW_OUTER=747;
    public static final int TOK_LEFTOUTERJOIN=748;
    public static final int TOK_LEFTSEMIJOIN=749;
    public static final int TOK_LENGTH=750;
    public static final int TOK_LIKETABLE=751;
    public static final int TOK_LIMIT=752;
    public static final int TOK_LIST=753;
    public static final int TOK_LOAD=754;
    public static final int TOK_LOCKDB=755;
    public static final int TOK_LOCKTABLE=756;
    public static final int TOK_MAP=757;
    public static final int TOK_MAPJOIN=758;
    public static final int TOK_METADATA=759;
    public static final int TOK_MSCK=760;
    public static final int TOK_NOT_CLUSTERED=761;
    public static final int TOK_NOT_SORTED=762;
    public static final int TOK_NO_DROP=763;
    public static final int TOK_NULL=764;
    public static final int TOK_OFFLINE=765;
    public static final int TOK_OP_ADD=766;
    public static final int TOK_OP_AND=767;
    public static final int TOK_OP_BITAND=768;
    public static final int TOK_OP_BITNOT=769;
    public static final int TOK_OP_BITOR=770;
    public static final int TOK_OP_BITXOR=771;
    public static final int TOK_OP_DIV=772;
    public static final int TOK_OP_EQ=773;
    public static final int TOK_OP_GE=774;
    public static final int TOK_OP_GT=775;
    public static final int TOK_OP_LE=776;
    public static final int TOK_OP_LIKE=777;
    public static final int TOK_OP_LT=778;
    public static final int TOK_OP_MOD=779;
    public static final int TOK_OP_MUL=780;
    public static final int TOK_OP_NE=781;
    public static final int TOK_OP_NOT=782;
    public static final int TOK_OP_OR=783;
    public static final int TOK_OP_SUB=784;
    public static final int TOK_ORDERBY=785;
    public static final int TOK_ORREPLACE=786;
    public static final int TOK_PARTITIONINGSPEC=787;
    public static final int TOK_PARTITIONLOCATION=788;
    public static final int TOK_PARTSPEC=789;
    public static final int TOK_PARTVAL=790;
    public static final int TOK_PERCENT=791;
    public static final int TOK_PRINCIPAL_NAME=792;
    public static final int TOK_PRIVILEGE=793;
    public static final int TOK_PRIVILEGE_LIST=794;
    public static final int TOK_PRIV_ALL=795;
    public static final int TOK_PRIV_ALTER_DATA=796;
    public static final int TOK_PRIV_ALTER_METADATA=797;
    public static final int TOK_PRIV_CREATE=798;
    public static final int TOK_PRIV_DELETE=799;
    public static final int TOK_PRIV_DROP=800;
    public static final int TOK_PRIV_INDEX=801;
    public static final int TOK_PRIV_INSERT=802;
    public static final int TOK_PRIV_LOCK=803;
    public static final int TOK_PRIV_OBJECT=804;
    public static final int TOK_PRIV_OBJECT_COL=805;
    public static final int TOK_PRIV_SELECT=806;
    public static final int TOK_PRIV_SHOW_DATABASE=807;
    public static final int TOK_PTBLFUNCTION=808;
    public static final int TOK_QUERY=809;
    public static final int TOK_READONLY=810;
    public static final int TOK_RECORDREADER=811;
    public static final int TOK_RECORDWRITER=812;
    public static final int TOK_RELOADFUNCTION=813;
    public static final int TOK_REPLICATION=814;
    public static final int TOK_RESOURCE_ALL=815;
    public static final int TOK_RESOURCE_LIST=816;
    public static final int TOK_RESOURCE_URI=817;
    public static final int TOK_RESTRICT=818;
    public static final int TOK_REVOKE=819;
    public static final int TOK_REVOKE_ROLE=820;
    public static final int TOK_RIGHTOUTERJOIN=821;
    public static final int TOK_ROLE=822;
    public static final int TOK_ROLLUP_GROUPBY=823;
    public static final int TOK_ROWCOUNT=824;
    public static final int TOK_SELECT=825;
    public static final int TOK_SELECTDI=826;
    public static final int TOK_SELEXPR=827;
    public static final int TOK_SERDE=828;
    public static final int TOK_SERDENAME=829;
    public static final int TOK_SERDEPROPS=830;
    public static final int TOK_SERVER_TYPE=831;
    public static final int TOK_SET_COLUMNS_CLAUSE=832;
    public static final int TOK_SHOWCOLUMNS=833;
    public static final int TOK_SHOWCONF=834;
    public static final int TOK_SHOWDATABASES=835;
    public static final int TOK_SHOWDBLOCKS=836;
    public static final int TOK_SHOWFUNCTIONS=837;
    public static final int TOK_SHOWINDEXES=838;
    public static final int TOK_SHOWLOCKS=839;
    public static final int TOK_SHOWPARTITIONS=840;
    public static final int TOK_SHOWTABLES=841;
    public static final int TOK_SHOW_COMPACTIONS=842;
    public static final int TOK_SHOW_CREATETABLE=843;
    public static final int TOK_SHOW_GRANT=844;
    public static final int TOK_SHOW_ROLES=845;
    public static final int TOK_SHOW_ROLE_GRANT=846;
    public static final int TOK_SHOW_ROLE_PRINCIPALS=847;
    public static final int TOK_SHOW_SET_ROLE=848;
    public static final int TOK_SHOW_TABLESTATUS=849;
    public static final int TOK_SHOW_TBLPROPERTIES=850;
    public static final int TOK_SHOW_TRANSACTIONS=851;
    public static final int TOK_SKEWED_LOCATIONS=852;
    public static final int TOK_SKEWED_LOCATION_LIST=853;
    public static final int TOK_SKEWED_LOCATION_MAP=854;
    public static final int TOK_SMALLINT=855;
    public static final int TOK_SORTBY=856;
    public static final int TOK_STORAGEHANDLER=857;
    public static final int TOK_STOREDASDIRS=858;
    public static final int TOK_STREAMTABLE=859;
    public static final int TOK_STRING=860;
    public static final int TOK_STRINGLITERALSEQUENCE=861;
    public static final int TOK_STRUCT=862;
    public static final int TOK_SUBQUERY=863;
    public static final int TOK_SUBQUERY_EXPR=864;
    public static final int TOK_SUBQUERY_OP=865;
    public static final int TOK_SUBQUERY_OP_NOTEXISTS=866;
    public static final int TOK_SUBQUERY_OP_NOTIN=867;
    public static final int TOK_SWITCHDATABASE=868;
    public static final int TOK_TAB=869;
    public static final int TOK_TABALIAS=870;
    public static final int TOK_TABCOL=871;
    public static final int TOK_TABCOLLIST=872;
    public static final int TOK_TABCOLNAME=873;
    public static final int TOK_TABCOLVALUE=874;
    public static final int TOK_TABCOLVALUES=875;
    public static final int TOK_TABCOLVALUE_PAIR=876;
    public static final int TOK_TABLEBUCKETSAMPLE=877;
    public static final int TOK_TABLECOMMENT=878;
    public static final int TOK_TABLEFILEFORMAT=879;
    public static final int TOK_TABLELOCATION=880;
    public static final int TOK_TABLEPARTCOLS=881;
    public static final int TOK_TABLEPROPERTIES=882;
    public static final int TOK_TABLEPROPERTY=883;
    public static final int TOK_TABLEPROPLIST=884;
    public static final int TOK_TABLEROWFORMAT=885;
    public static final int TOK_TABLEROWFORMATCOLLITEMS=886;
    public static final int TOK_TABLEROWFORMATFIELD=887;
    public static final int TOK_TABLEROWFORMATLINES=888;
    public static final int TOK_TABLEROWFORMATMAPKEYS=889;
    public static final int TOK_TABLEROWFORMATNULL=890;
    public static final int TOK_TABLESERIALIZER=891;
    public static final int TOK_TABLESKEWED=892;
    public static final int TOK_TABLESPLITSAMPLE=893;
    public static final int TOK_TABLE_OR_COL=894;
    public static final int TOK_TABLE_PARTITION=895;
    public static final int TOK_TABLE_TYPE=896;
    public static final int TOK_TABNAME=897;
    public static final int TOK_TABREF=898;
    public static final int TOK_TABSORTCOLNAMEASC=899;
    public static final int TOK_TABSORTCOLNAMEDESC=900;
    public static final int TOK_TABSRC=901;
    public static final int TOK_TABTYPE=902;
    public static final int TOK_TEMPORARY=903;
    public static final int TOK_TIMESTAMP=904;
    public static final int TOK_TIMESTAMPLITERAL=905;
    public static final int TOK_TINYINT=906;
    public static final int TOK_TMP_FILE=907;
    public static final int TOK_TRANSFORM=908;
    public static final int TOK_TRUE=909;
    public static final int TOK_TRUNCATETABLE=910;
    public static final int TOK_UNIONALL=911;
    public static final int TOK_UNIONDISTINCT=912;
    public static final int TOK_UNIONTYPE=913;
    public static final int TOK_UNIQUEJOIN=914;
    public static final int TOK_UNLOCKDB=915;
    public static final int TOK_UNLOCKTABLE=916;
    public static final int TOK_UPDATE_TABLE=917;
    public static final int TOK_URI_TYPE=918;
    public static final int TOK_USER=919;
    public static final int TOK_USERSCRIPTCOLNAMES=920;
    public static final int TOK_USERSCRIPTCOLSCHEMA=921;
    public static final int TOK_VALUES_TABLE=922;
    public static final int TOK_VALUE_ROW=923;
    public static final int TOK_VARCHAR=924;
    public static final int TOK_VIEWPARTCOLS=925;
    public static final int TOK_VIRTUAL_TABLE=926;
    public static final int TOK_VIRTUAL_TABREF=927;
    public static final int TOK_WHERE=928;
    public static final int TOK_WINDOWDEF=929;
    public static final int TOK_WINDOWRANGE=930;
    public static final int TOK_WINDOWSPEC=931;
    public static final int TOK_WINDOWVALUES=932;

    // delegates
    public HiveParser_SelectClauseParser gSelectClauseParser;
    public HiveParser_FromClauseParser gFromClauseParser;
    public HiveParser_IdentifiersParser gIdentifiersParser;
    public Parser[] getDelegates() {
        return new Parser[] {gSelectClauseParser, gFromClauseParser, gIdentifiersParser};
    }

    // delegators


    public HiveParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public HiveParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
        gSelectClauseParser = new HiveParser_SelectClauseParser(input, state, this);
        gFromClauseParser = new HiveParser_FromClauseParser(input, state, this);
        gIdentifiersParser = new HiveParser_IdentifiersParser(input, state, this);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
    gSelectClauseParser.setTreeAdaptor(this.adaptor);gFromClauseParser.setTreeAdaptor(this.adaptor);gIdentifiersParser.setTreeAdaptor(this.adaptor);
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return HiveParser.tokenNames; }
    public String getGrammarFileName() { return "HiveParser.g"; }


      ArrayList<ParseError> errors = new ArrayList<ParseError>();
      Stack msgs = new Stack<String>();

      private static HashMap<String, String> xlateMap;
      static {
        xlateMap = new HashMap<String, String>();

        // Keywords
        xlateMap.put("KW_TRUE", "TRUE");
        xlateMap.put("KW_FALSE", "FALSE");
        xlateMap.put("KW_ALL", "ALL");
        xlateMap.put("KW_NONE", "NONE");
        xlateMap.put("KW_AND", "AND");
        xlateMap.put("KW_OR", "OR");
        xlateMap.put("KW_NOT", "NOT");
        xlateMap.put("KW_LIKE", "LIKE");

        xlateMap.put("KW_ASC", "ASC");
        xlateMap.put("KW_DESC", "DESC");
        xlateMap.put("KW_ORDER", "ORDER");
        xlateMap.put("KW_BY", "BY");
        xlateMap.put("KW_GROUP", "GROUP");
        xlateMap.put("KW_WHERE", "WHERE");
        xlateMap.put("KW_FROM", "FROM");
        xlateMap.put("KW_AS", "AS");
        xlateMap.put("KW_SELECT", "SELECT");
        xlateMap.put("KW_DISTINCT", "DISTINCT");
        xlateMap.put("KW_INSERT", "INSERT");
        xlateMap.put("KW_OVERWRITE", "OVERWRITE");
        xlateMap.put("KW_OUTER", "OUTER");
        xlateMap.put("KW_JOIN", "JOIN");
        xlateMap.put("KW_LEFT", "LEFT");
        xlateMap.put("KW_RIGHT", "RIGHT");
        xlateMap.put("KW_FULL", "FULL");
        xlateMap.put("KW_ON", "ON");
        xlateMap.put("KW_PARTITION", "PARTITION");
        xlateMap.put("KW_PARTITIONS", "PARTITIONS");
        xlateMap.put("KW_TABLE", "TABLE");
        xlateMap.put("KW_TABLES", "TABLES");
        xlateMap.put("KW_TBLPROPERTIES", "TBLPROPERTIES");
        xlateMap.put("KW_SHOW", "SHOW");
        xlateMap.put("KW_MSCK", "MSCK");
        xlateMap.put("KW_DIRECTORY", "DIRECTORY");
        xlateMap.put("KW_LOCAL", "LOCAL");
        xlateMap.put("KW_TRANSFORM", "TRANSFORM");
        xlateMap.put("KW_USING", "USING");
        xlateMap.put("KW_CLUSTER", "CLUSTER");
        xlateMap.put("KW_DISTRIBUTE", "DISTRIBUTE");
        xlateMap.put("KW_SORT", "SORT");
        xlateMap.put("KW_UNION", "UNION");
        xlateMap.put("KW_LOAD", "LOAD");
        xlateMap.put("KW_DATA", "DATA");
        xlateMap.put("KW_INPATH", "INPATH");
        xlateMap.put("KW_IS", "IS");
        xlateMap.put("KW_NULL", "NULL");
        xlateMap.put("KW_CREATE", "CREATE");
        xlateMap.put("KW_EXTERNAL", "EXTERNAL");
        xlateMap.put("KW_ALTER", "ALTER");
        xlateMap.put("KW_DESCRIBE", "DESCRIBE");
        xlateMap.put("KW_DROP", "DROP");
        xlateMap.put("KW_RENAME", "RENAME");
        xlateMap.put("KW_TO", "TO");
        xlateMap.put("KW_COMMENT", "COMMENT");
        xlateMap.put("KW_BOOLEAN", "BOOLEAN");
        xlateMap.put("KW_TINYINT", "TINYINT");
        xlateMap.put("KW_SMALLINT", "SMALLINT");
        xlateMap.put("KW_INT", "INT");
        xlateMap.put("KW_BIGINT", "BIGINT");
        xlateMap.put("KW_FLOAT", "FLOAT");
        xlateMap.put("KW_DOUBLE", "DOUBLE");
        xlateMap.put("KW_DATE", "DATE");
        xlateMap.put("KW_DATETIME", "DATETIME");
        xlateMap.put("KW_TIMESTAMP", "TIMESTAMP");
        xlateMap.put("KW_STRING", "STRING");
        xlateMap.put("KW_BINARY", "BINARY");
        xlateMap.put("KW_ARRAY", "ARRAY");
        xlateMap.put("KW_MAP", "MAP");
        xlateMap.put("KW_REDUCE", "REDUCE");
        xlateMap.put("KW_PARTITIONED", "PARTITIONED");
        xlateMap.put("KW_CLUSTERED", "CLUSTERED");
        xlateMap.put("KW_SORTED", "SORTED");
        xlateMap.put("KW_INTO", "INTO");
        xlateMap.put("KW_BUCKETS", "BUCKETS");
        xlateMap.put("KW_ROW", "ROW");
        xlateMap.put("KW_FORMAT", "FORMAT");
        xlateMap.put("KW_DELIMITED", "DELIMITED");
        xlateMap.put("KW_FIELDS", "FIELDS");
        xlateMap.put("KW_TERMINATED", "TERMINATED");
        xlateMap.put("KW_COLLECTION", "COLLECTION");
        xlateMap.put("KW_ITEMS", "ITEMS");
        xlateMap.put("KW_KEYS", "KEYS");
        xlateMap.put("KW_KEY_TYPE", "$KEY$");
        xlateMap.put("KW_LINES", "LINES");
        xlateMap.put("KW_STORED", "STORED");
        xlateMap.put("KW_SEQUENCEFILE", "SEQUENCEFILE");
        xlateMap.put("KW_TEXTFILE", "TEXTFILE");
        xlateMap.put("KW_INPUTFORMAT", "INPUTFORMAT");
        xlateMap.put("KW_OUTPUTFORMAT", "OUTPUTFORMAT");
        xlateMap.put("KW_LOCATION", "LOCATION");
        xlateMap.put("KW_TABLESAMPLE", "TABLESAMPLE");
        xlateMap.put("KW_BUCKET", "BUCKET");
        xlateMap.put("KW_OUT", "OUT");
        xlateMap.put("KW_OF", "OF");
        xlateMap.put("KW_CAST", "CAST");
        xlateMap.put("KW_ADD", "ADD");
        xlateMap.put("KW_REPLACE", "REPLACE");
        xlateMap.put("KW_COLUMNS", "COLUMNS");
        xlateMap.put("KW_RLIKE", "RLIKE");
        xlateMap.put("KW_REGEXP", "REGEXP");
        xlateMap.put("KW_TEMPORARY", "TEMPORARY");
        xlateMap.put("KW_FUNCTION", "FUNCTION");
        xlateMap.put("KW_EXPLAIN", "EXPLAIN");
        xlateMap.put("KW_EXTENDED", "EXTENDED");
        xlateMap.put("KW_SERDE", "SERDE");
        xlateMap.put("KW_WITH", "WITH");
        xlateMap.put("KW_SERDEPROPERTIES", "SERDEPROPERTIES");
        xlateMap.put("KW_LIMIT", "LIMIT");
        xlateMap.put("KW_SET", "SET");
        xlateMap.put("KW_PROPERTIES", "TBLPROPERTIES");
        xlateMap.put("KW_VALUE_TYPE", "$VALUE$");
        xlateMap.put("KW_ELEM_TYPE", "$ELEM$");
        xlateMap.put("KW_DEFINED", "DEFINED");
        xlateMap.put("KW_SUBQUERY", "SUBQUERY");
        xlateMap.put("KW_REWRITE", "REWRITE");
        xlateMap.put("KW_UPDATE", "UPDATE");
        xlateMap.put("KW_VALUES", "VALUES");
        xlateMap.put("KW_PURGE", "PURGE");


        // Operators
        xlateMap.put("DOT", ".");
        xlateMap.put("COLON", ":");
        xlateMap.put("COMMA", ",");
        xlateMap.put("SEMICOLON", ");");

        xlateMap.put("LPAREN", "(");
        xlateMap.put("RPAREN", ")");
        xlateMap.put("LSQUARE", "[");
        xlateMap.put("RSQUARE", "]");

        xlateMap.put("EQUAL", "=");
        xlateMap.put("NOTEQUAL", "<>");
        xlateMap.put("EQUAL_NS", "<=>");
        xlateMap.put("LESSTHANOREQUALTO", "<=");
        xlateMap.put("LESSTHAN", "<");
        xlateMap.put("GREATERTHANOREQUALTO", ">=");
        xlateMap.put("GREATERTHAN", ">");

        xlateMap.put("DIVIDE", "/");
        xlateMap.put("PLUS", "+");
        xlateMap.put("MINUS", "-");
        xlateMap.put("STAR", "*");
        xlateMap.put("MOD", "%");

        xlateMap.put("AMPERSAND", "&");
        xlateMap.put("TILDE", "~");
        xlateMap.put("BITWISEOR", "|");
        xlateMap.put("BITWISEXOR", "^");
        xlateMap.put("CharSetLiteral", "\\'");
      }

      public static Collection<String> getKeywords() {
        return xlateMap.values();
      }

      private static String xlate(String name) {

        String ret = xlateMap.get(name);
        if (ret == null) {
          ret = name;
        }

        return ret;
      }

      @Override
      public Object recoverFromMismatchedSet(IntStream input,
          RecognitionException re, BitSet follow) throws RecognitionException {
        throw re;
      }

      @Override
      public void displayRecognitionError(String[] tokenNames,
          RecognitionException e) {
        errors.add(new ParseError(this, e, tokenNames));
      }

      @Override
      public String getErrorHeader(RecognitionException e) {
        String header = null;
        if (e.charPositionInLine < 0 && input.LT(-1) != null) {
          Token t = input.LT(-1);
          header = "line " + t.getLine() + ":" + t.getCharPositionInLine();
        } else {
          header = super.getErrorHeader(e);
        }

        return header;
      }

      @Override
      public String getErrorMessage(RecognitionException e, String[] tokenNames) {
        String msg = null;

        // Translate the token names to something that the user can understand
        String[] xlateNames = new String[tokenNames.length];
        for (int i = 0; i < tokenNames.length; ++i) {
          xlateNames[i] = HiveParser.xlate(tokenNames[i]);
        }

        if (e instanceof NoViableAltException) {
          @SuppressWarnings("unused")
          NoViableAltException nvae = (NoViableAltException) e;
          // for development, can add
          // "decision=<<"+nvae.grammarDecisionDescription+">>"
          // and "(decision="+nvae.decisionNumber+") and
          // "state "+nvae.stateNumber
          msg = "cannot recognize input near"
                  + (input.LT(1) != null ? " " + getTokenErrorDisplay(input.LT(1)) : "")
                  + (input.LT(2) != null ? " " + getTokenErrorDisplay(input.LT(2)) : "")
                  + (input.LT(3) != null ? " " + getTokenErrorDisplay(input.LT(3)) : "");
        } else if (e instanceof MismatchedTokenException) {
          MismatchedTokenException mte = (MismatchedTokenException) e;
          msg = super.getErrorMessage(e, xlateNames) + (input.LT(-1) == null ? "":" near '" + input.LT(-1).getText()) + "'";
        } else if (e instanceof FailedPredicateException) {
          FailedPredicateException fpe = (FailedPredicateException) e;
          msg = "Failed to recognize predicate '" + fpe.token.getText() + "'. Failed rule: '" + fpe.ruleName + "'";
        } else {
          msg = super.getErrorMessage(e, xlateNames);
        }

        if (msgs.size() > 0) {
          msg = msg + " in " + msgs.peek();
        }
        return msg;
      }

      public void pushMsg(String msg, RecognizerSharedState state) {
        // ANTLR generated code does not wrap the @init code wit this backtracking check,
        //  even if the matching @after has it. If we have parser rules with that are doing
        // some lookahead with syntactic predicates this can cause the push() and pop() calls
        // to become unbalanced, so make sure both push/pop check the backtracking state.
        if (state.backtracking == 0) {
          msgs.push(msg);
        }
      }

      public void popMsg(RecognizerSharedState state) {
        if (state.backtracking == 0) {
          msgs.pop();
        }
      }

      // counter to generate unique union aliases
      private int aliasCounter;
      private String generateUnionAlias() {
        return "_u" + (++aliasCounter);
      }
      private char [] excludedCharForColumnName = {'.', ':'};
      private boolean containExcludedCharForCreateTableColumnName(String input) {
        for(char c : excludedCharForColumnName) {
          if(input.indexOf(c)>-1) {
            return true;
          }
        }
        return false;
      }
      private CommonTree throwSetOpException() throws RecognitionException {
        throw new FailedPredicateException(input, "orderByClause clusterByClause distributeByClause sortByClause limitClause can only be applied to the whole union.", "");
      }
      private CommonTree throwColumnNameException() throws RecognitionException {
        throw new FailedPredicateException(input, Arrays.toString(excludedCharForColumnName) + " can not be used in column name in create table statement.", "");
      }
      private Configuration hiveConf;
      public void setHiveConf(Configuration hiveConf) {
        this.hiveConf = hiveConf;
      }
      protected boolean useSQL11ReservedKeywordsForIdentifier() {
        return !HiveConf.getBoolVar(hiveConf, HiveConf.ConfVars.HIVE_SUPPORT_SQL11_RESERVED_KEYWORDS);
      }


    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statement"
    // HiveParser.g:665:1: statement : ( explainStatement EOF | execStatement EOF );
    public final HiveParser.statement_return statement() throws RecognitionException {
        HiveParser.statement_return retval = new HiveParser.statement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token EOF2=null;
        Token EOF4=null;
        HiveParser.explainStatement_return explainStatement1 =null;

        HiveParser.execStatement_return execStatement3 =null;


        CommonTree EOF2_tree=null;
        CommonTree EOF4_tree=null;

        try {
            // HiveParser.g:666:2: ( explainStatement EOF | execStatement EOF )
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==KW_EXPLAIN) ) {
                alt1=1;
            }
            else if ( ((LA1_0 >= KW_ALTER && LA1_0 <= KW_ANALYZE)||LA1_0==KW_CREATE||LA1_0==KW_DELETE||(LA1_0 >= KW_DESC && LA1_0 <= KW_DESCRIBE)||LA1_0==KW_DROP||LA1_0==KW_EXPORT||LA1_0==KW_FROM||LA1_0==KW_GRANT||LA1_0==KW_IMPORT||LA1_0==KW_INSERT||LA1_0==KW_LOAD||LA1_0==KW_LOCK||LA1_0==KW_MAP||LA1_0==KW_MSCK||LA1_0==KW_REDUCE||LA1_0==KW_RELOAD||LA1_0==KW_REVOKE||LA1_0==KW_SELECT||LA1_0==KW_SET||LA1_0==KW_SHOW||LA1_0==KW_TRUNCATE||LA1_0==KW_UNLOCK||LA1_0==KW_UPDATE||LA1_0==KW_USE||LA1_0==KW_WITH) ) {
                alt1=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;

            }
            switch (alt1) {
                case 1 :
                    // HiveParser.g:666:4: explainStatement EOF
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_explainStatement_in_statement1070);
                    explainStatement1=explainStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explainStatement1.getTree());

                    EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_statement1072); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EOF2_tree = 
                    (CommonTree)adaptor.create(EOF2)
                    ;
                    adaptor.addChild(root_0, EOF2_tree);
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:667:4: execStatement EOF
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_execStatement_in_statement1077);
                    execStatement3=execStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, execStatement3.getTree());

                    EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_statement1079); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EOF4_tree = 
                    (CommonTree)adaptor.create(EOF4)
                    ;
                    adaptor.addChild(root_0, EOF4_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statement"


    public static class explainStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explainStatement"
    // HiveParser.g:670:1: explainStatement : KW_EXPLAIN ( ( explainOption )* execStatement -> ^( TOK_EXPLAIN execStatement ( explainOption )* ) | KW_REWRITE queryStatementExpression[true] -> ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression ) ) ;
    public final HiveParser.explainStatement_return explainStatement() throws RecognitionException {
        HiveParser.explainStatement_return retval = new HiveParser.explainStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_EXPLAIN5=null;
        Token KW_REWRITE8=null;
        HiveParser.explainOption_return explainOption6 =null;

        HiveParser.execStatement_return execStatement7 =null;

        HiveParser.queryStatementExpression_return queryStatementExpression9 =null;


        CommonTree KW_EXPLAIN5_tree=null;
        CommonTree KW_REWRITE8_tree=null;
        RewriteRuleTokenStream stream_KW_REWRITE=new RewriteRuleTokenStream(adaptor,"token KW_REWRITE");
        RewriteRuleTokenStream stream_KW_EXPLAIN=new RewriteRuleTokenStream(adaptor,"token KW_EXPLAIN");
        RewriteRuleSubtreeStream stream_queryStatementExpression=new RewriteRuleSubtreeStream(adaptor,"rule queryStatementExpression");
        RewriteRuleSubtreeStream stream_explainOption=new RewriteRuleSubtreeStream(adaptor,"rule explainOption");
        RewriteRuleSubtreeStream stream_execStatement=new RewriteRuleSubtreeStream(adaptor,"rule execStatement");
         pushMsg("explain statement", state); 
        try {
            // HiveParser.g:673:2: ( KW_EXPLAIN ( ( explainOption )* execStatement -> ^( TOK_EXPLAIN execStatement ( explainOption )* ) | KW_REWRITE queryStatementExpression[true] -> ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression ) ) )
            // HiveParser.g:673:4: KW_EXPLAIN ( ( explainOption )* execStatement -> ^( TOK_EXPLAIN execStatement ( explainOption )* ) | KW_REWRITE queryStatementExpression[true] -> ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression ) )
            {
            KW_EXPLAIN5=(Token)match(input,KW_EXPLAIN,FOLLOW_KW_EXPLAIN_in_explainStatement1100); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_EXPLAIN.add(KW_EXPLAIN5);


            // HiveParser.g:673:15: ( ( explainOption )* execStatement -> ^( TOK_EXPLAIN execStatement ( explainOption )* ) | KW_REWRITE queryStatementExpression[true] -> ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression ) )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( ((LA3_0 >= KW_ALTER && LA3_0 <= KW_ANALYZE)||LA3_0==KW_AUTHORIZATION||LA3_0==KW_CREATE||LA3_0==KW_DELETE||(LA3_0 >= KW_DEPENDENCY && LA3_0 <= KW_DESCRIBE)||LA3_0==KW_DROP||(LA3_0 >= KW_EXPORT && LA3_0 <= KW_EXTENDED)||(LA3_0 >= KW_FORMATTED && LA3_0 <= KW_FROM)||LA3_0==KW_GRANT||LA3_0==KW_IMPORT||LA3_0==KW_INSERT||LA3_0==KW_LOAD||LA3_0==KW_LOCK||LA3_0==KW_LOGICAL||LA3_0==KW_MAP||LA3_0==KW_MSCK||LA3_0==KW_REDUCE||LA3_0==KW_RELOAD||LA3_0==KW_REVOKE||LA3_0==KW_SELECT||LA3_0==KW_SET||LA3_0==KW_SHOW||LA3_0==KW_TRUNCATE||LA3_0==KW_UNLOCK||LA3_0==KW_UPDATE||LA3_0==KW_USE||LA3_0==KW_WITH) ) {
                alt3=1;
            }
            else if ( (LA3_0==KW_REWRITE) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }
            switch (alt3) {
                case 1 :
                    // HiveParser.g:674:6: ( explainOption )* execStatement
                    {
                    // HiveParser.g:674:6: ( explainOption )*
                    loop2:
                    do {
                        int alt2=2;
                        int LA2_0 = input.LA(1);

                        if ( (LA2_0==KW_AUTHORIZATION||LA2_0==KW_DEPENDENCY||LA2_0==KW_EXTENDED||LA2_0==KW_FORMATTED||LA2_0==KW_LOGICAL) ) {
                            alt2=1;
                        }


                        switch (alt2) {
                    	case 1 :
                    	    // HiveParser.g:674:6: explainOption
                    	    {
                    	    pushFollow(FOLLOW_explainOption_in_explainStatement1109);
                    	    explainOption6=explainOption();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_explainOption.add(explainOption6.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop2;
                        }
                    } while (true);


                    pushFollow(FOLLOW_execStatement_in_explainStatement1112);
                    execStatement7=execStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_execStatement.add(execStatement7.getTree());

                    // AST REWRITE
                    // elements: execStatement, explainOption
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 674:35: -> ^( TOK_EXPLAIN execStatement ( explainOption )* )
                    {
                        // HiveParser.g:674:38: ^( TOK_EXPLAIN execStatement ( explainOption )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_EXPLAIN, "TOK_EXPLAIN")
                        , root_1);

                        adaptor.addChild(root_1, stream_execStatement.nextTree());

                        // HiveParser.g:674:66: ( explainOption )*
                        while ( stream_explainOption.hasNext() ) {
                            adaptor.addChild(root_1, stream_explainOption.nextTree());

                        }
                        stream_explainOption.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:676:9: KW_REWRITE queryStatementExpression[true]
                    {
                    KW_REWRITE8=(Token)match(input,KW_REWRITE,FOLLOW_KW_REWRITE_in_explainStatement1143); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_REWRITE.add(KW_REWRITE8);


                    pushFollow(FOLLOW_queryStatementExpression_in_explainStatement1145);
                    queryStatementExpression9=queryStatementExpression(true);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_queryStatementExpression.add(queryStatementExpression9.getTree());

                    // AST REWRITE
                    // elements: queryStatementExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 676:51: -> ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression )
                    {
                        // HiveParser.g:676:54: ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_EXPLAIN_SQ_REWRITE, "TOK_EXPLAIN_SQ_REWRITE")
                        , root_1);

                        adaptor.addChild(root_1, stream_queryStatementExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explainStatement"


    public static class explainOption_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explainOption"
    // HiveParser.g:679:1: explainOption : ( KW_EXTENDED | KW_FORMATTED | KW_DEPENDENCY | KW_LOGICAL | KW_AUTHORIZATION );
    public final HiveParser.explainOption_return explainOption() throws RecognitionException {
        HiveParser.explainOption_return retval = new HiveParser.explainOption_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token set10=null;

        CommonTree set10_tree=null;

         msgs.push("explain option"); 
        try {
            // HiveParser.g:682:5: ( KW_EXTENDED | KW_FORMATTED | KW_DEPENDENCY | KW_LOGICAL | KW_AUTHORIZATION )
            // HiveParser.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            set10=(Token)input.LT(1);

            if ( input.LA(1)==KW_AUTHORIZATION||input.LA(1)==KW_DEPENDENCY||input.LA(1)==KW_EXTENDED||input.LA(1)==KW_FORMATTED||input.LA(1)==KW_LOGICAL ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (CommonTree)adaptor.create(set10)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { msgs.pop(); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explainOption"


    public static class execStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "execStatement"
    // HiveParser.g:685:1: execStatement : ( queryStatementExpression[true] | loadStatement | exportStatement | importStatement | ddlStatement | deleteStatement | updateStatement );
    public final HiveParser.execStatement_return execStatement() throws RecognitionException {
        HiveParser.execStatement_return retval = new HiveParser.execStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.queryStatementExpression_return queryStatementExpression11 =null;

        HiveParser.loadStatement_return loadStatement12 =null;

        HiveParser.exportStatement_return exportStatement13 =null;

        HiveParser.importStatement_return importStatement14 =null;

        HiveParser.ddlStatement_return ddlStatement15 =null;

        HiveParser.deleteStatement_return deleteStatement16 =null;

        HiveParser.updateStatement_return updateStatement17 =null;



         pushMsg("statement", state); 
        try {
            // HiveParser.g:688:5: ( queryStatementExpression[true] | loadStatement | exportStatement | importStatement | ddlStatement | deleteStatement | updateStatement )
            int alt4=7;
            switch ( input.LA(1) ) {
            case KW_FROM:
            case KW_INSERT:
            case KW_MAP:
            case KW_REDUCE:
            case KW_SELECT:
            case KW_WITH:
                {
                alt4=1;
                }
                break;
            case KW_LOAD:
                {
                alt4=2;
                }
                break;
            case KW_EXPORT:
                {
                alt4=3;
                }
                break;
            case KW_IMPORT:
                {
                alt4=4;
                }
                break;
            case KW_ALTER:
            case KW_ANALYZE:
            case KW_CREATE:
            case KW_DESC:
            case KW_DESCRIBE:
            case KW_DROP:
            case KW_GRANT:
            case KW_LOCK:
            case KW_MSCK:
            case KW_RELOAD:
            case KW_REVOKE:
            case KW_SET:
            case KW_SHOW:
            case KW_TRUNCATE:
            case KW_UNLOCK:
            case KW_USE:
                {
                alt4=5;
                }
                break;
            case KW_DELETE:
                {
                alt4=6;
                }
                break;
            case KW_UPDATE:
                {
                alt4=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;

            }

            switch (alt4) {
                case 1 :
                    // HiveParser.g:688:7: queryStatementExpression[true]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_queryStatementExpression_in_execStatement1214);
                    queryStatementExpression11=queryStatementExpression(true);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, queryStatementExpression11.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:689:7: loadStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_loadStatement_in_execStatement1223);
                    loadStatement12=loadStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, loadStatement12.getTree());

                    }
                    break;
                case 3 :
                    // HiveParser.g:690:7: exportStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_exportStatement_in_execStatement1231);
                    exportStatement13=exportStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exportStatement13.getTree());

                    }
                    break;
                case 4 :
                    // HiveParser.g:691:7: importStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_importStatement_in_execStatement1239);
                    importStatement14=importStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, importStatement14.getTree());

                    }
                    break;
                case 5 :
                    // HiveParser.g:692:7: ddlStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_ddlStatement_in_execStatement1247);
                    ddlStatement15=ddlStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ddlStatement15.getTree());

                    }
                    break;
                case 6 :
                    // HiveParser.g:693:7: deleteStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_deleteStatement_in_execStatement1255);
                    deleteStatement16=deleteStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, deleteStatement16.getTree());

                    }
                    break;
                case 7 :
                    // HiveParser.g:694:7: updateStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_updateStatement_in_execStatement1263);
                    updateStatement17=updateStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateStatement17.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "execStatement"


    public static class loadStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "loadStatement"
    // HiveParser.g:697:1: loadStatement : KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition ) -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ) ;
    public final HiveParser.loadStatement_return loadStatement() throws RecognitionException {
        HiveParser.loadStatement_return retval = new HiveParser.loadStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token islocal=null;
        Token path=null;
        Token isoverwrite=null;
        Token KW_LOAD18=null;
        Token KW_DATA19=null;
        Token KW_INPATH20=null;
        Token KW_INTO21=null;
        Token KW_TABLE22=null;
        HiveParser_IdentifiersParser.tableOrPartition_return tab =null;


        CommonTree islocal_tree=null;
        CommonTree path_tree=null;
        CommonTree isoverwrite_tree=null;
        CommonTree KW_LOAD18_tree=null;
        CommonTree KW_DATA19_tree=null;
        CommonTree KW_INPATH20_tree=null;
        CommonTree KW_INTO21_tree=null;
        CommonTree KW_TABLE22_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
        RewriteRuleTokenStream stream_KW_INPATH=new RewriteRuleTokenStream(adaptor,"token KW_INPATH");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_OVERWRITE=new RewriteRuleTokenStream(adaptor,"token KW_OVERWRITE");
        RewriteRuleTokenStream stream_KW_LOAD=new RewriteRuleTokenStream(adaptor,"token KW_LOAD");
        RewriteRuleTokenStream stream_KW_DATA=new RewriteRuleTokenStream(adaptor,"token KW_DATA");
        RewriteRuleTokenStream stream_KW_LOCAL=new RewriteRuleTokenStream(adaptor,"token KW_LOCAL");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
         pushMsg("load statement", state); 
        try {
            // HiveParser.g:700:5: ( KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition ) -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ) )
            // HiveParser.g:700:7: KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition )
            {
            KW_LOAD18=(Token)match(input,KW_LOAD,FOLLOW_KW_LOAD_in_loadStatement1290); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_LOAD.add(KW_LOAD18);


            KW_DATA19=(Token)match(input,KW_DATA,FOLLOW_KW_DATA_in_loadStatement1292); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DATA.add(KW_DATA19);


            // HiveParser.g:700:23: (islocal= KW_LOCAL )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==KW_LOCAL) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // HiveParser.g:700:24: islocal= KW_LOCAL
                    {
                    islocal=(Token)match(input,KW_LOCAL,FOLLOW_KW_LOCAL_in_loadStatement1297); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_LOCAL.add(islocal);


                    }
                    break;

            }


            KW_INPATH20=(Token)match(input,KW_INPATH,FOLLOW_KW_INPATH_in_loadStatement1301); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_INPATH.add(KW_INPATH20);


            // HiveParser.g:700:53: (path= StringLiteral )
            // HiveParser.g:700:54: path= StringLiteral
            {
            path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_loadStatement1306); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(path);


            }


            // HiveParser.g:700:74: (isoverwrite= KW_OVERWRITE )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==KW_OVERWRITE) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // HiveParser.g:700:75: isoverwrite= KW_OVERWRITE
                    {
                    isoverwrite=(Token)match(input,KW_OVERWRITE,FOLLOW_KW_OVERWRITE_in_loadStatement1312); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_OVERWRITE.add(isoverwrite);


                    }
                    break;

            }


            KW_INTO21=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_loadStatement1316); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_INTO.add(KW_INTO21);


            KW_TABLE22=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_loadStatement1318); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE22);


            // HiveParser.g:700:119: (tab= tableOrPartition )
            // HiveParser.g:700:120: tab= tableOrPartition
            {
            pushFollow(FOLLOW_tableOrPartition_in_loadStatement1323);
            tab=tableOrPartition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableOrPartition.add(tab.getTree());

            }


            // AST REWRITE
            // elements: path, islocal, isoverwrite, tab
            // token labels: islocal, path, isoverwrite
            // rule labels: tab, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_islocal=new RewriteRuleTokenStream(adaptor,"token islocal",islocal);
            RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
            RewriteRuleTokenStream stream_isoverwrite=new RewriteRuleTokenStream(adaptor,"token isoverwrite",isoverwrite);
            RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 701:5: -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? )
            {
                // HiveParser.g:701:8: ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_LOAD, "TOK_LOAD")
                , root_1);

                adaptor.addChild(root_1, stream_path.nextNode());

                adaptor.addChild(root_1, stream_tab.nextTree());

                // HiveParser.g:701:31: ( $islocal)?
                if ( stream_islocal.hasNext() ) {
                    adaptor.addChild(root_1, stream_islocal.nextNode());

                }
                stream_islocal.reset();

                // HiveParser.g:701:41: ( $isoverwrite)?
                if ( stream_isoverwrite.hasNext() ) {
                    adaptor.addChild(root_1, stream_isoverwrite.nextNode());

                }
                stream_isoverwrite.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "loadStatement"


    public static class replicationClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "replicationClause"
    // HiveParser.g:704:1: replicationClause : KW_FOR (isMetadataOnly= KW_METADATA )? KW_REPLICATION LPAREN (replId= StringLiteral ) RPAREN -> ^( TOK_REPLICATION $replId ( $isMetadataOnly)? ) ;
    public final HiveParser.replicationClause_return replicationClause() throws RecognitionException {
        HiveParser.replicationClause_return retval = new HiveParser.replicationClause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token isMetadataOnly=null;
        Token replId=null;
        Token KW_FOR23=null;
        Token KW_REPLICATION24=null;
        Token LPAREN25=null;
        Token RPAREN26=null;

        CommonTree isMetadataOnly_tree=null;
        CommonTree replId_tree=null;
        CommonTree KW_FOR23_tree=null;
        CommonTree KW_REPLICATION24_tree=null;
        CommonTree LPAREN25_tree=null;
        CommonTree RPAREN26_tree=null;
        RewriteRuleTokenStream stream_KW_REPLICATION=new RewriteRuleTokenStream(adaptor,"token KW_REPLICATION");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_METADATA=new RewriteRuleTokenStream(adaptor,"token KW_METADATA");

         pushMsg("replication clause", state); 
        try {
            // HiveParser.g:707:5: ( KW_FOR (isMetadataOnly= KW_METADATA )? KW_REPLICATION LPAREN (replId= StringLiteral ) RPAREN -> ^( TOK_REPLICATION $replId ( $isMetadataOnly)? ) )
            // HiveParser.g:707:7: KW_FOR (isMetadataOnly= KW_METADATA )? KW_REPLICATION LPAREN (replId= StringLiteral ) RPAREN
            {
            KW_FOR23=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_replicationClause1375); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR23);


            // HiveParser.g:707:14: (isMetadataOnly= KW_METADATA )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==KW_METADATA) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // HiveParser.g:707:15: isMetadataOnly= KW_METADATA
                    {
                    isMetadataOnly=(Token)match(input,KW_METADATA,FOLLOW_KW_METADATA_in_replicationClause1380); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_METADATA.add(isMetadataOnly);


                    }
                    break;

            }


            KW_REPLICATION24=(Token)match(input,KW_REPLICATION,FOLLOW_KW_REPLICATION_in_replicationClause1384); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_REPLICATION.add(KW_REPLICATION24);


            LPAREN25=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_replicationClause1386); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN25);


            // HiveParser.g:707:66: (replId= StringLiteral )
            // HiveParser.g:707:67: replId= StringLiteral
            {
            replId=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_replicationClause1391); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(replId);


            }


            RPAREN26=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_replicationClause1394); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN26);


            // AST REWRITE
            // elements: isMetadataOnly, replId
            // token labels: replId, isMetadataOnly
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_replId=new RewriteRuleTokenStream(adaptor,"token replId",replId);
            RewriteRuleTokenStream stream_isMetadataOnly=new RewriteRuleTokenStream(adaptor,"token isMetadataOnly",isMetadataOnly);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 708:5: -> ^( TOK_REPLICATION $replId ( $isMetadataOnly)? )
            {
                // HiveParser.g:708:8: ^( TOK_REPLICATION $replId ( $isMetadataOnly)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_REPLICATION, "TOK_REPLICATION")
                , root_1);

                adaptor.addChild(root_1, stream_replId.nextNode());

                // HiveParser.g:708:35: ( $isMetadataOnly)?
                if ( stream_isMetadataOnly.hasNext() ) {
                    adaptor.addChild(root_1, stream_isMetadataOnly.nextNode());

                }
                stream_isMetadataOnly.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "replicationClause"


    public static class exportStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exportStatement"
    // HiveParser.g:711:1: exportStatement : KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral ) ( replicationClause )? -> ^( TOK_EXPORT $tab $path ( replicationClause )? ) ;
    public final HiveParser.exportStatement_return exportStatement() throws RecognitionException {
        HiveParser.exportStatement_return retval = new HiveParser.exportStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token path=null;
        Token KW_EXPORT27=null;
        Token KW_TABLE28=null;
        Token KW_TO29=null;
        HiveParser_IdentifiersParser.tableOrPartition_return tab =null;

        HiveParser.replicationClause_return replicationClause30 =null;


        CommonTree path_tree=null;
        CommonTree KW_EXPORT27_tree=null;
        CommonTree KW_TABLE28_tree=null;
        CommonTree KW_TO29_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
        RewriteRuleTokenStream stream_KW_EXPORT=new RewriteRuleTokenStream(adaptor,"token KW_EXPORT");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
        RewriteRuleSubtreeStream stream_replicationClause=new RewriteRuleSubtreeStream(adaptor,"rule replicationClause");
         pushMsg("export statement", state); 
        try {
            // HiveParser.g:714:5: ( KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral ) ( replicationClause )? -> ^( TOK_EXPORT $tab $path ( replicationClause )? ) )
            // HiveParser.g:714:7: KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral ) ( replicationClause )?
            {
            KW_EXPORT27=(Token)match(input,KW_EXPORT,FOLLOW_KW_EXPORT_in_exportStatement1438); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_EXPORT.add(KW_EXPORT27);


            KW_TABLE28=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_exportStatement1446); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE28);


            // HiveParser.g:715:16: (tab= tableOrPartition )
            // HiveParser.g:715:17: tab= tableOrPartition
            {
            pushFollow(FOLLOW_tableOrPartition_in_exportStatement1451);
            tab=tableOrPartition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableOrPartition.add(tab.getTree());

            }


            KW_TO29=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_exportStatement1460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TO.add(KW_TO29);


            // HiveParser.g:716:13: (path= StringLiteral )
            // HiveParser.g:716:14: path= StringLiteral
            {
            path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_exportStatement1465); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(path);


            }


            // HiveParser.g:717:7: ( replicationClause )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==KW_FOR) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // HiveParser.g:717:7: replicationClause
                    {
                    pushFollow(FOLLOW_replicationClause_in_exportStatement1474);
                    replicationClause30=replicationClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_replicationClause.add(replicationClause30.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tab, path, replicationClause
            // token labels: path
            // rule labels: tab, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
            RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 718:5: -> ^( TOK_EXPORT $tab $path ( replicationClause )? )
            {
                // HiveParser.g:718:8: ^( TOK_EXPORT $tab $path ( replicationClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_EXPORT, "TOK_EXPORT")
                , root_1);

                adaptor.addChild(root_1, stream_tab.nextTree());

                adaptor.addChild(root_1, stream_path.nextNode());

                // HiveParser.g:718:32: ( replicationClause )?
                if ( stream_replicationClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_replicationClause.nextTree());

                }
                stream_replicationClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exportStatement"


    public static class importStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importStatement"
    // HiveParser.g:721:1: importStatement : KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )? -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? ) ;
    public final HiveParser.importStatement_return importStatement() throws RecognitionException {
        HiveParser.importStatement_return retval = new HiveParser.importStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token ext=null;
        Token path=null;
        Token KW_IMPORT31=null;
        Token KW_TABLE32=null;
        Token KW_FROM33=null;
        HiveParser_IdentifiersParser.tableOrPartition_return tab =null;

        HiveParser.tableLocation_return tableLocation34 =null;


        CommonTree ext_tree=null;
        CommonTree path_tree=null;
        CommonTree KW_IMPORT31_tree=null;
        CommonTree KW_TABLE32_tree=null;
        CommonTree KW_FROM33_tree=null;
        RewriteRuleTokenStream stream_KW_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token KW_EXTERNAL");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_IMPORT=new RewriteRuleTokenStream(adaptor,"token KW_IMPORT");
        RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
         pushMsg("import statement", state); 
        try {
            // HiveParser.g:724:8: ( KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )? -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? ) )
            // HiveParser.g:724:10: KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )?
            {
            KW_IMPORT31=(Token)match(input,KW_IMPORT,FOLLOW_KW_IMPORT_in_importStatement1524); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_IMPORT.add(KW_IMPORT31);


            // HiveParser.g:725:10: ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==KW_EXTERNAL||LA10_0==KW_TABLE) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // HiveParser.g:725:11: (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition )
                    {
                    // HiveParser.g:725:11: (ext= KW_EXTERNAL )?
                    int alt9=2;
                    int LA9_0 = input.LA(1);

                    if ( (LA9_0==KW_EXTERNAL) ) {
                        alt9=1;
                    }
                    switch (alt9) {
                        case 1 :
                            // HiveParser.g:725:12: ext= KW_EXTERNAL
                            {
                            ext=(Token)match(input,KW_EXTERNAL,FOLLOW_KW_EXTERNAL_in_importStatement1539); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_EXTERNAL.add(ext);


                            }
                            break;

                    }


                    KW_TABLE32=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_importStatement1543); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE32);


                    // HiveParser.g:725:39: (tab= tableOrPartition )
                    // HiveParser.g:725:40: tab= tableOrPartition
                    {
                    pushFollow(FOLLOW_tableOrPartition_in_importStatement1548);
                    tab=tableOrPartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableOrPartition.add(tab.getTree());

                    }


                    }
                    break;

            }


            KW_FROM33=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_importStatement1562); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM33);


            // HiveParser.g:726:18: (path= StringLiteral )
            // HiveParser.g:726:19: path= StringLiteral
            {
            path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_importStatement1567); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(path);


            }


            // HiveParser.g:727:10: ( tableLocation )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==KW_LOCATION) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // HiveParser.g:727:10: tableLocation
                    {
                    pushFollow(FOLLOW_tableLocation_in_importStatement1579);
                    tableLocation34=tableLocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableLocation.add(tableLocation34.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: path, tab, tableLocation, ext
            // token labels: ext, path
            // rule labels: tab, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_ext=new RewriteRuleTokenStream(adaptor,"token ext",ext);
            RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
            RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 728:5: -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? )
            {
                // HiveParser.g:728:8: ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_IMPORT, "TOK_IMPORT")
                , root_1);

                adaptor.addChild(root_1, stream_path.nextNode());

                // HiveParser.g:728:28: ( $tab)?
                if ( stream_tab.hasNext() ) {
                    adaptor.addChild(root_1, stream_tab.nextTree());

                }
                stream_tab.reset();

                // HiveParser.g:728:34: ( $ext)?
                if ( stream_ext.hasNext() ) {
                    adaptor.addChild(root_1, stream_ext.nextNode());

                }
                stream_ext.reset();

                // HiveParser.g:728:39: ( tableLocation )?
                if ( stream_tableLocation.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableLocation.nextTree());

                }
                stream_tableLocation.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "importStatement"


    public static class ddlStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ddlStatement"
    // HiveParser.g:731:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createMacroStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | reloadFunctionStatement | dropMacroStatement | analyzeStatement | lockStatement | unlockStatement | lockDatabase | unlockDatabase | createRoleStatement | dropRoleStatement | ( grantPrivileges )=> grantPrivileges | ( revokePrivileges )=> revokePrivileges | showGrants | showRoleGrants | showRolePrincipals | showRoles | grantRole | revokeRole | setRole | showCurrentRole );
    public final HiveParser.ddlStatement_return ddlStatement() throws RecognitionException {
        HiveParser.ddlStatement_return retval = new HiveParser.ddlStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.createDatabaseStatement_return createDatabaseStatement35 =null;

        HiveParser.switchDatabaseStatement_return switchDatabaseStatement36 =null;

        HiveParser.dropDatabaseStatement_return dropDatabaseStatement37 =null;

        HiveParser.createTableStatement_return createTableStatement38 =null;

        HiveParser.dropTableStatement_return dropTableStatement39 =null;

        HiveParser.truncateTableStatement_return truncateTableStatement40 =null;

        HiveParser.alterStatement_return alterStatement41 =null;

        HiveParser.descStatement_return descStatement42 =null;

        HiveParser.showStatement_return showStatement43 =null;

        HiveParser.metastoreCheck_return metastoreCheck44 =null;

        HiveParser.createViewStatement_return createViewStatement45 =null;

        HiveParser.dropViewStatement_return dropViewStatement46 =null;

        HiveParser.createFunctionStatement_return createFunctionStatement47 =null;

        HiveParser.createMacroStatement_return createMacroStatement48 =null;

        HiveParser.createIndexStatement_return createIndexStatement49 =null;

        HiveParser.dropIndexStatement_return dropIndexStatement50 =null;

        HiveParser.dropFunctionStatement_return dropFunctionStatement51 =null;

        HiveParser.reloadFunctionStatement_return reloadFunctionStatement52 =null;

        HiveParser.dropMacroStatement_return dropMacroStatement53 =null;

        HiveParser.analyzeStatement_return analyzeStatement54 =null;

        HiveParser.lockStatement_return lockStatement55 =null;

        HiveParser.unlockStatement_return unlockStatement56 =null;

        HiveParser.lockDatabase_return lockDatabase57 =null;

        HiveParser.unlockDatabase_return unlockDatabase58 =null;

        HiveParser.createRoleStatement_return createRoleStatement59 =null;

        HiveParser.dropRoleStatement_return dropRoleStatement60 =null;

        HiveParser.grantPrivileges_return grantPrivileges61 =null;

        HiveParser.revokePrivileges_return revokePrivileges62 =null;

        HiveParser.showGrants_return showGrants63 =null;

        HiveParser.showRoleGrants_return showRoleGrants64 =null;

        HiveParser.showRolePrincipals_return showRolePrincipals65 =null;

        HiveParser.showRoles_return showRoles66 =null;

        HiveParser.grantRole_return grantRole67 =null;

        HiveParser.revokeRole_return revokeRole68 =null;

        HiveParser.setRole_return setRole69 =null;

        HiveParser.showCurrentRole_return showCurrentRole70 =null;



         pushMsg("ddl statement", state); 
        try {
            // HiveParser.g:734:5: ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createMacroStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | reloadFunctionStatement | dropMacroStatement | analyzeStatement | lockStatement | unlockStatement | lockDatabase | unlockDatabase | createRoleStatement | dropRoleStatement | ( grantPrivileges )=> grantPrivileges | ( revokePrivileges )=> revokePrivileges | showGrants | showRoleGrants | showRolePrincipals | showRoles | grantRole | revokeRole | setRole | showCurrentRole )
            int alt12=36;
            alt12 = dfa12.predict(input);
            switch (alt12) {
                case 1 :
                    // HiveParser.g:734:7: createDatabaseStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_createDatabaseStatement_in_ddlStatement1631);
                    createDatabaseStatement35=createDatabaseStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createDatabaseStatement35.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:735:7: switchDatabaseStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_switchDatabaseStatement_in_ddlStatement1639);
                    switchDatabaseStatement36=switchDatabaseStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchDatabaseStatement36.getTree());

                    }
                    break;
                case 3 :
                    // HiveParser.g:736:7: dropDatabaseStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_dropDatabaseStatement_in_ddlStatement1647);
                    dropDatabaseStatement37=dropDatabaseStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dropDatabaseStatement37.getTree());

                    }
                    break;
                case 4 :
                    // HiveParser.g:737:7: createTableStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_createTableStatement_in_ddlStatement1655);
                    createTableStatement38=createTableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createTableStatement38.getTree());

                    }
                    break;
                case 5 :
                    // HiveParser.g:738:7: dropTableStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_dropTableStatement_in_ddlStatement1663);
                    dropTableStatement39=dropTableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dropTableStatement39.getTree());

                    }
                    break;
                case 6 :
                    // HiveParser.g:739:7: truncateTableStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_truncateTableStatement_in_ddlStatement1671);
                    truncateTableStatement40=truncateTableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, truncateTableStatement40.getTree());

                    }
                    break;
                case 7 :
                    // HiveParser.g:740:7: alterStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatement_in_ddlStatement1679);
                    alterStatement41=alterStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatement41.getTree());

                    }
                    break;
                case 8 :
                    // HiveParser.g:741:7: descStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_descStatement_in_ddlStatement1687);
                    descStatement42=descStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, descStatement42.getTree());

                    }
                    break;
                case 9 :
                    // HiveParser.g:742:7: showStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_showStatement_in_ddlStatement1695);
                    showStatement43=showStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, showStatement43.getTree());

                    }
                    break;
                case 10 :
                    // HiveParser.g:743:7: metastoreCheck
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_metastoreCheck_in_ddlStatement1703);
                    metastoreCheck44=metastoreCheck();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, metastoreCheck44.getTree());

                    }
                    break;
                case 11 :
                    // HiveParser.g:744:7: createViewStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_createViewStatement_in_ddlStatement1711);
                    createViewStatement45=createViewStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createViewStatement45.getTree());

                    }
                    break;
                case 12 :
                    // HiveParser.g:745:7: dropViewStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_dropViewStatement_in_ddlStatement1719);
                    dropViewStatement46=dropViewStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dropViewStatement46.getTree());

                    }
                    break;
                case 13 :
                    // HiveParser.g:746:7: createFunctionStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_createFunctionStatement_in_ddlStatement1727);
                    createFunctionStatement47=createFunctionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createFunctionStatement47.getTree());

                    }
                    break;
                case 14 :
                    // HiveParser.g:747:7: createMacroStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_createMacroStatement_in_ddlStatement1735);
                    createMacroStatement48=createMacroStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createMacroStatement48.getTree());

                    }
                    break;
                case 15 :
                    // HiveParser.g:748:7: createIndexStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_createIndexStatement_in_ddlStatement1743);
                    createIndexStatement49=createIndexStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexStatement49.getTree());

                    }
                    break;
                case 16 :
                    // HiveParser.g:749:7: dropIndexStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_dropIndexStatement_in_ddlStatement1751);
                    dropIndexStatement50=dropIndexStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dropIndexStatement50.getTree());

                    }
                    break;
                case 17 :
                    // HiveParser.g:750:7: dropFunctionStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_dropFunctionStatement_in_ddlStatement1759);
                    dropFunctionStatement51=dropFunctionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dropFunctionStatement51.getTree());

                    }
                    break;
                case 18 :
                    // HiveParser.g:751:7: reloadFunctionStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_reloadFunctionStatement_in_ddlStatement1767);
                    reloadFunctionStatement52=reloadFunctionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reloadFunctionStatement52.getTree());

                    }
                    break;
                case 19 :
                    // HiveParser.g:752:7: dropMacroStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_dropMacroStatement_in_ddlStatement1775);
                    dropMacroStatement53=dropMacroStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dropMacroStatement53.getTree());

                    }
                    break;
                case 20 :
                    // HiveParser.g:753:7: analyzeStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_analyzeStatement_in_ddlStatement1783);
                    analyzeStatement54=analyzeStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, analyzeStatement54.getTree());

                    }
                    break;
                case 21 :
                    // HiveParser.g:754:7: lockStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_lockStatement_in_ddlStatement1791);
                    lockStatement55=lockStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lockStatement55.getTree());

                    }
                    break;
                case 22 :
                    // HiveParser.g:755:7: unlockStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_unlockStatement_in_ddlStatement1799);
                    unlockStatement56=unlockStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unlockStatement56.getTree());

                    }
                    break;
                case 23 :
                    // HiveParser.g:756:7: lockDatabase
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_lockDatabase_in_ddlStatement1807);
                    lockDatabase57=lockDatabase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lockDatabase57.getTree());

                    }
                    break;
                case 24 :
                    // HiveParser.g:757:7: unlockDatabase
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_unlockDatabase_in_ddlStatement1815);
                    unlockDatabase58=unlockDatabase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unlockDatabase58.getTree());

                    }
                    break;
                case 25 :
                    // HiveParser.g:758:7: createRoleStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_createRoleStatement_in_ddlStatement1823);
                    createRoleStatement59=createRoleStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createRoleStatement59.getTree());

                    }
                    break;
                case 26 :
                    // HiveParser.g:759:7: dropRoleStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_dropRoleStatement_in_ddlStatement1831);
                    dropRoleStatement60=dropRoleStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dropRoleStatement60.getTree());

                    }
                    break;
                case 27 :
                    // HiveParser.g:760:7: ( grantPrivileges )=> grantPrivileges
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_grantPrivileges_in_ddlStatement1845);
                    grantPrivileges61=grantPrivileges();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, grantPrivileges61.getTree());

                    }
                    break;
                case 28 :
                    // HiveParser.g:761:7: ( revokePrivileges )=> revokePrivileges
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_revokePrivileges_in_ddlStatement1859);
                    revokePrivileges62=revokePrivileges();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, revokePrivileges62.getTree());

                    }
                    break;
                case 29 :
                    // HiveParser.g:762:7: showGrants
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_showGrants_in_ddlStatement1867);
                    showGrants63=showGrants();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, showGrants63.getTree());

                    }
                    break;
                case 30 :
                    // HiveParser.g:763:7: showRoleGrants
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_showRoleGrants_in_ddlStatement1875);
                    showRoleGrants64=showRoleGrants();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, showRoleGrants64.getTree());

                    }
                    break;
                case 31 :
                    // HiveParser.g:764:7: showRolePrincipals
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_showRolePrincipals_in_ddlStatement1883);
                    showRolePrincipals65=showRolePrincipals();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, showRolePrincipals65.getTree());

                    }
                    break;
                case 32 :
                    // HiveParser.g:765:7: showRoles
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_showRoles_in_ddlStatement1891);
                    showRoles66=showRoles();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, showRoles66.getTree());

                    }
                    break;
                case 33 :
                    // HiveParser.g:766:7: grantRole
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_grantRole_in_ddlStatement1899);
                    grantRole67=grantRole();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, grantRole67.getTree());

                    }
                    break;
                case 34 :
                    // HiveParser.g:767:7: revokeRole
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_revokeRole_in_ddlStatement1907);
                    revokeRole68=revokeRole();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, revokeRole68.getTree());

                    }
                    break;
                case 35 :
                    // HiveParser.g:768:7: setRole
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_setRole_in_ddlStatement1915);
                    setRole69=setRole();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, setRole69.getTree());

                    }
                    break;
                case 36 :
                    // HiveParser.g:769:7: showCurrentRole
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_showCurrentRole_in_ddlStatement1923);
                    showCurrentRole70=showCurrentRole();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, showCurrentRole70.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ddlStatement"


    public static class ifExists_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ifExists"
    // HiveParser.g:772:1: ifExists : KW_IF KW_EXISTS -> ^( TOK_IFEXISTS ) ;
    public final HiveParser.ifExists_return ifExists() throws RecognitionException {
        HiveParser.ifExists_return retval = new HiveParser.ifExists_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_IF71=null;
        Token KW_EXISTS72=null;

        CommonTree KW_IF71_tree=null;
        CommonTree KW_EXISTS72_tree=null;
        RewriteRuleTokenStream stream_KW_EXISTS=new RewriteRuleTokenStream(adaptor,"token KW_EXISTS");
        RewriteRuleTokenStream stream_KW_IF=new RewriteRuleTokenStream(adaptor,"token KW_IF");

         pushMsg("if exists clause", state); 
        try {
            // HiveParser.g:775:5: ( KW_IF KW_EXISTS -> ^( TOK_IFEXISTS ) )
            // HiveParser.g:775:7: KW_IF KW_EXISTS
            {
            KW_IF71=(Token)match(input,KW_IF,FOLLOW_KW_IF_in_ifExists1950); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_IF.add(KW_IF71);


            KW_EXISTS72=(Token)match(input,KW_EXISTS,FOLLOW_KW_EXISTS_in_ifExists1952); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_EXISTS.add(KW_EXISTS72);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 776:5: -> ^( TOK_IFEXISTS )
            {
                // HiveParser.g:776:8: ^( TOK_IFEXISTS )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_IFEXISTS, "TOK_IFEXISTS")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ifExists"


    public static class restrictOrCascade_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "restrictOrCascade"
    // HiveParser.g:779:1: restrictOrCascade : ( KW_RESTRICT -> ^( TOK_RESTRICT ) | KW_CASCADE -> ^( TOK_CASCADE ) );
    public final HiveParser.restrictOrCascade_return restrictOrCascade() throws RecognitionException {
        HiveParser.restrictOrCascade_return retval = new HiveParser.restrictOrCascade_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_RESTRICT73=null;
        Token KW_CASCADE74=null;

        CommonTree KW_RESTRICT73_tree=null;
        CommonTree KW_CASCADE74_tree=null;
        RewriteRuleTokenStream stream_KW_CASCADE=new RewriteRuleTokenStream(adaptor,"token KW_CASCADE");
        RewriteRuleTokenStream stream_KW_RESTRICT=new RewriteRuleTokenStream(adaptor,"token KW_RESTRICT");

         pushMsg("restrict or cascade clause", state); 
        try {
            // HiveParser.g:782:5: ( KW_RESTRICT -> ^( TOK_RESTRICT ) | KW_CASCADE -> ^( TOK_CASCADE ) )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==KW_RESTRICT) ) {
                alt13=1;
            }
            else if ( (LA13_0==KW_CASCADE) ) {
                alt13=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;

            }
            switch (alt13) {
                case 1 :
                    // HiveParser.g:782:7: KW_RESTRICT
                    {
                    KW_RESTRICT73=(Token)match(input,KW_RESTRICT,FOLLOW_KW_RESTRICT_in_restrictOrCascade1989); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_RESTRICT.add(KW_RESTRICT73);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 783:5: -> ^( TOK_RESTRICT )
                    {
                        // HiveParser.g:783:8: ^( TOK_RESTRICT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_RESTRICT, "TOK_RESTRICT")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:784:7: KW_CASCADE
                    {
                    KW_CASCADE74=(Token)match(input,KW_CASCADE,FOLLOW_KW_CASCADE_in_restrictOrCascade2007); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_CASCADE.add(KW_CASCADE74);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 785:5: -> ^( TOK_CASCADE )
                    {
                        // HiveParser.g:785:8: ^( TOK_CASCADE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_CASCADE, "TOK_CASCADE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "restrictOrCascade"


    public static class ifNotExists_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ifNotExists"
    // HiveParser.g:788:1: ifNotExists : KW_IF KW_NOT KW_EXISTS -> ^( TOK_IFNOTEXISTS ) ;
    public final HiveParser.ifNotExists_return ifNotExists() throws RecognitionException {
        HiveParser.ifNotExists_return retval = new HiveParser.ifNotExists_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_IF75=null;
        Token KW_NOT76=null;
        Token KW_EXISTS77=null;

        CommonTree KW_IF75_tree=null;
        CommonTree KW_NOT76_tree=null;
        CommonTree KW_EXISTS77_tree=null;
        RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
        RewriteRuleTokenStream stream_KW_EXISTS=new RewriteRuleTokenStream(adaptor,"token KW_EXISTS");
        RewriteRuleTokenStream stream_KW_IF=new RewriteRuleTokenStream(adaptor,"token KW_IF");

         pushMsg("if not exists clause", state); 
        try {
            // HiveParser.g:791:5: ( KW_IF KW_NOT KW_EXISTS -> ^( TOK_IFNOTEXISTS ) )
            // HiveParser.g:791:7: KW_IF KW_NOT KW_EXISTS
            {
            KW_IF75=(Token)match(input,KW_IF,FOLLOW_KW_IF_in_ifNotExists2044); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_IF.add(KW_IF75);


            KW_NOT76=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_ifNotExists2046); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT76);


            KW_EXISTS77=(Token)match(input,KW_EXISTS,FOLLOW_KW_EXISTS_in_ifNotExists2048); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_EXISTS.add(KW_EXISTS77);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 792:5: -> ^( TOK_IFNOTEXISTS )
            {
                // HiveParser.g:792:8: ^( TOK_IFNOTEXISTS )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_IFNOTEXISTS, "TOK_IFNOTEXISTS")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ifNotExists"


    public static class storedAsDirs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "storedAsDirs"
    // HiveParser.g:795:1: storedAsDirs : KW_STORED KW_AS KW_DIRECTORIES -> ^( TOK_STOREDASDIRS ) ;
    public final HiveParser.storedAsDirs_return storedAsDirs() throws RecognitionException {
        HiveParser.storedAsDirs_return retval = new HiveParser.storedAsDirs_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_STORED78=null;
        Token KW_AS79=null;
        Token KW_DIRECTORIES80=null;

        CommonTree KW_STORED78_tree=null;
        CommonTree KW_AS79_tree=null;
        CommonTree KW_DIRECTORIES80_tree=null;
        RewriteRuleTokenStream stream_KW_DIRECTORIES=new RewriteRuleTokenStream(adaptor,"token KW_DIRECTORIES");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_STORED=new RewriteRuleTokenStream(adaptor,"token KW_STORED");

         pushMsg("stored as directories", state); 
        try {
            // HiveParser.g:798:5: ( KW_STORED KW_AS KW_DIRECTORIES -> ^( TOK_STOREDASDIRS ) )
            // HiveParser.g:798:7: KW_STORED KW_AS KW_DIRECTORIES
            {
            KW_STORED78=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_storedAsDirs2085); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_STORED.add(KW_STORED78);


            KW_AS79=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_storedAsDirs2087); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS79);


            KW_DIRECTORIES80=(Token)match(input,KW_DIRECTORIES,FOLLOW_KW_DIRECTORIES_in_storedAsDirs2089); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DIRECTORIES.add(KW_DIRECTORIES80);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 799:5: -> ^( TOK_STOREDASDIRS )
            {
                // HiveParser.g:799:8: ^( TOK_STOREDASDIRS )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_STOREDASDIRS, "TOK_STOREDASDIRS")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "storedAsDirs"


    public static class orReplace_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "orReplace"
    // HiveParser.g:802:1: orReplace : KW_OR KW_REPLACE -> ^( TOK_ORREPLACE ) ;
    public final HiveParser.orReplace_return orReplace() throws RecognitionException {
        HiveParser.orReplace_return retval = new HiveParser.orReplace_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_OR81=null;
        Token KW_REPLACE82=null;

        CommonTree KW_OR81_tree=null;
        CommonTree KW_REPLACE82_tree=null;
        RewriteRuleTokenStream stream_KW_REPLACE=new RewriteRuleTokenStream(adaptor,"token KW_REPLACE");
        RewriteRuleTokenStream stream_KW_OR=new RewriteRuleTokenStream(adaptor,"token KW_OR");

         pushMsg("or replace clause", state); 
        try {
            // HiveParser.g:805:5: ( KW_OR KW_REPLACE -> ^( TOK_ORREPLACE ) )
            // HiveParser.g:805:7: KW_OR KW_REPLACE
            {
            KW_OR81=(Token)match(input,KW_OR,FOLLOW_KW_OR_in_orReplace2126); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_OR.add(KW_OR81);


            KW_REPLACE82=(Token)match(input,KW_REPLACE,FOLLOW_KW_REPLACE_in_orReplace2128); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_REPLACE.add(KW_REPLACE82);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 806:5: -> ^( TOK_ORREPLACE )
            {
                // HiveParser.g:806:8: ^( TOK_ORREPLACE )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ORREPLACE, "TOK_ORREPLACE")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "orReplace"


    public static class ignoreProtection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ignoreProtection"
    // HiveParser.g:809:1: ignoreProtection : KW_IGNORE KW_PROTECTION -> ^( TOK_IGNOREPROTECTION ) ;
    public final HiveParser.ignoreProtection_return ignoreProtection() throws RecognitionException {
        HiveParser.ignoreProtection_return retval = new HiveParser.ignoreProtection_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_IGNORE83=null;
        Token KW_PROTECTION84=null;

        CommonTree KW_IGNORE83_tree=null;
        CommonTree KW_PROTECTION84_tree=null;
        RewriteRuleTokenStream stream_KW_PROTECTION=new RewriteRuleTokenStream(adaptor,"token KW_PROTECTION");
        RewriteRuleTokenStream stream_KW_IGNORE=new RewriteRuleTokenStream(adaptor,"token KW_IGNORE");

         pushMsg("ignore protection clause", state); 
        try {
            // HiveParser.g:812:9: ( KW_IGNORE KW_PROTECTION -> ^( TOK_IGNOREPROTECTION ) )
            // HiveParser.g:812:11: KW_IGNORE KW_PROTECTION
            {
            KW_IGNORE83=(Token)match(input,KW_IGNORE,FOLLOW_KW_IGNORE_in_ignoreProtection2169); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_IGNORE.add(KW_IGNORE83);


            KW_PROTECTION84=(Token)match(input,KW_PROTECTION,FOLLOW_KW_PROTECTION_in_ignoreProtection2171); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_PROTECTION.add(KW_PROTECTION84);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 813:9: -> ^( TOK_IGNOREPROTECTION )
            {
                // HiveParser.g:813:12: ^( TOK_IGNOREPROTECTION )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_IGNOREPROTECTION, "TOK_IGNOREPROTECTION")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ignoreProtection"


    public static class createDatabaseStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "createDatabaseStatement"
    // HiveParser.g:816:1: createDatabaseStatement : KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )? -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? ) ;
    public final HiveParser.createDatabaseStatement_return createDatabaseStatement() throws RecognitionException {
        HiveParser.createDatabaseStatement_return retval = new HiveParser.createDatabaseStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_CREATE85=null;
        Token KW_DATABASE86=null;
        Token KW_SCHEMA87=null;
        Token KW_WITH91=null;
        Token KW_DBPROPERTIES92=null;
        HiveParser_IdentifiersParser.identifier_return name =null;

        HiveParser.dbProperties_return dbprops =null;

        HiveParser.ifNotExists_return ifNotExists88 =null;

        HiveParser.databaseComment_return databaseComment89 =null;

        HiveParser.dbLocation_return dbLocation90 =null;


        CommonTree KW_CREATE85_tree=null;
        CommonTree KW_DATABASE86_tree=null;
        CommonTree KW_SCHEMA87_tree=null;
        CommonTree KW_WITH91_tree=null;
        CommonTree KW_DBPROPERTIES92_tree=null;
        RewriteRuleTokenStream stream_KW_DBPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_DBPROPERTIES");
        RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_dbProperties=new RewriteRuleSubtreeStream(adaptor,"rule dbProperties");
        RewriteRuleSubtreeStream stream_databaseComment=new RewriteRuleSubtreeStream(adaptor,"rule databaseComment");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
        RewriteRuleSubtreeStream stream_dbLocation=new RewriteRuleSubtreeStream(adaptor,"rule dbLocation");
         pushMsg("create database statement", state); 
        try {
            // HiveParser.g:819:5: ( KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )? -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? ) )
            // HiveParser.g:819:7: KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )?
            {
            KW_CREATE85=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createDatabaseStatement2216); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE85);


            // HiveParser.g:819:17: ( KW_DATABASE | KW_SCHEMA )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==KW_DATABASE) ) {
                alt14=1;
            }
            else if ( (LA14_0==KW_SCHEMA) ) {
                alt14=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }
            switch (alt14) {
                case 1 :
                    // HiveParser.g:819:18: KW_DATABASE
                    {
                    KW_DATABASE86=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_createDatabaseStatement2219); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE86);


                    }
                    break;
                case 2 :
                    // HiveParser.g:819:30: KW_SCHEMA
                    {
                    KW_SCHEMA87=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_createDatabaseStatement2221); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA87);


                    }
                    break;

            }


            // HiveParser.g:820:9: ( ifNotExists )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==KW_IF) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // HiveParser.g:820:9: ifNotExists
                    {
                    pushFollow(FOLLOW_ifNotExists_in_createDatabaseStatement2232);
                    ifNotExists88=ifNotExists();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists88.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_identifier_in_createDatabaseStatement2245);
            name=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(name.getTree());

            // HiveParser.g:822:9: ( databaseComment )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==KW_COMMENT) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // HiveParser.g:822:9: databaseComment
                    {
                    pushFollow(FOLLOW_databaseComment_in_createDatabaseStatement2255);
                    databaseComment89=databaseComment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseComment.add(databaseComment89.getTree());

                    }
                    break;

            }


            // HiveParser.g:823:9: ( dbLocation )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==KW_LOCATION) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // HiveParser.g:823:9: dbLocation
                    {
                    pushFollow(FOLLOW_dbLocation_in_createDatabaseStatement2266);
                    dbLocation90=dbLocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dbLocation.add(dbLocation90.getTree());

                    }
                    break;

            }


            // HiveParser.g:824:9: ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==KW_WITH) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // HiveParser.g:824:10: KW_WITH KW_DBPROPERTIES dbprops= dbProperties
                    {
                    KW_WITH91=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_createDatabaseStatement2278); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH91);


                    KW_DBPROPERTIES92=(Token)match(input,KW_DBPROPERTIES,FOLLOW_KW_DBPROPERTIES_in_createDatabaseStatement2280); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DBPROPERTIES.add(KW_DBPROPERTIES92);


                    pushFollow(FOLLOW_dbProperties_in_createDatabaseStatement2284);
                    dbprops=dbProperties();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dbProperties.add(dbprops.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: name, ifNotExists, dbprops, databaseComment, dbLocation
            // token labels: 
            // rule labels: name, dbprops, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.tree:null);
            RewriteRuleSubtreeStream stream_dbprops=new RewriteRuleSubtreeStream(adaptor,"rule dbprops",dbprops!=null?dbprops.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 825:5: -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? )
            {
                // HiveParser.g:825:8: ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_CREATEDATABASE, "TOK_CREATEDATABASE")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                // HiveParser.g:825:35: ( ifNotExists )?
                if ( stream_ifNotExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifNotExists.nextTree());

                }
                stream_ifNotExists.reset();

                // HiveParser.g:825:48: ( dbLocation )?
                if ( stream_dbLocation.hasNext() ) {
                    adaptor.addChild(root_1, stream_dbLocation.nextTree());

                }
                stream_dbLocation.reset();

                // HiveParser.g:825:60: ( databaseComment )?
                if ( stream_databaseComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseComment.nextTree());

                }
                stream_databaseComment.reset();

                // HiveParser.g:825:78: ( $dbprops)?
                if ( stream_dbprops.hasNext() ) {
                    adaptor.addChild(root_1, stream_dbprops.nextTree());

                }
                stream_dbprops.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "createDatabaseStatement"


    public static class dbLocation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dbLocation"
    // HiveParser.g:828:1: dbLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_DATABASELOCATION $locn) ;
    public final HiveParser.dbLocation_return dbLocation() throws RecognitionException {
        HiveParser.dbLocation_return retval = new HiveParser.dbLocation_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token locn=null;
        Token KW_LOCATION93=null;

        CommonTree locn_tree=null;
        CommonTree KW_LOCATION93_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

         pushMsg("database location specification", state); 
        try {
            // HiveParser.g:831:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_DATABASELOCATION $locn) )
            // HiveParser.g:832:7: KW_LOCATION locn= StringLiteral
            {
            KW_LOCATION93=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_dbLocation2345); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_LOCATION.add(KW_LOCATION93);


            locn=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_dbLocation2349); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(locn);


            // AST REWRITE
            // elements: locn
            // token labels: locn
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 832:38: -> ^( TOK_DATABASELOCATION $locn)
            {
                // HiveParser.g:832:41: ^( TOK_DATABASELOCATION $locn)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DATABASELOCATION, "TOK_DATABASELOCATION")
                , root_1);

                adaptor.addChild(root_1, stream_locn.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dbLocation"


    public static class dbProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dbProperties"
    // HiveParser.g:835:1: dbProperties : LPAREN dbPropertiesList RPAREN -> ^( TOK_DATABASEPROPERTIES dbPropertiesList ) ;
    public final HiveParser.dbProperties_return dbProperties() throws RecognitionException {
        HiveParser.dbProperties_return retval = new HiveParser.dbProperties_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token LPAREN94=null;
        Token RPAREN96=null;
        HiveParser.dbPropertiesList_return dbPropertiesList95 =null;


        CommonTree LPAREN94_tree=null;
        CommonTree RPAREN96_tree=null;
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_dbPropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule dbPropertiesList");
         pushMsg("dbproperties", state); 
        try {
            // HiveParser.g:838:5: ( LPAREN dbPropertiesList RPAREN -> ^( TOK_DATABASEPROPERTIES dbPropertiesList ) )
            // HiveParser.g:839:7: LPAREN dbPropertiesList RPAREN
            {
            LPAREN94=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_dbProperties2391); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN94);


            pushFollow(FOLLOW_dbPropertiesList_in_dbProperties2393);
            dbPropertiesList95=dbPropertiesList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_dbPropertiesList.add(dbPropertiesList95.getTree());

            RPAREN96=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_dbProperties2395); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN96);


            // AST REWRITE
            // elements: dbPropertiesList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 839:38: -> ^( TOK_DATABASEPROPERTIES dbPropertiesList )
            {
                // HiveParser.g:839:41: ^( TOK_DATABASEPROPERTIES dbPropertiesList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DATABASEPROPERTIES, "TOK_DATABASEPROPERTIES")
                , root_1);

                adaptor.addChild(root_1, stream_dbPropertiesList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dbProperties"


    public static class dbPropertiesList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dbPropertiesList"
    // HiveParser.g:842:1: dbPropertiesList : keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_DBPROPLIST ( keyValueProperty )+ ) ;
    public final HiveParser.dbPropertiesList_return dbPropertiesList() throws RecognitionException {
        HiveParser.dbPropertiesList_return retval = new HiveParser.dbPropertiesList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA98=null;
        HiveParser.keyValueProperty_return keyValueProperty97 =null;

        HiveParser.keyValueProperty_return keyValueProperty99 =null;


        CommonTree COMMA98_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");
         pushMsg("database properties list", state); 
        try {
            // HiveParser.g:845:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_DBPROPLIST ( keyValueProperty )+ ) )
            // HiveParser.g:846:7: keyValueProperty ( COMMA keyValueProperty )*
            {
            pushFollow(FOLLOW_keyValueProperty_in_dbPropertiesList2436);
            keyValueProperty97=keyValueProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty97.getTree());

            // HiveParser.g:846:24: ( COMMA keyValueProperty )*
            loop19:
            do {
                int alt19=2;
                int LA19_0 = input.LA(1);

                if ( (LA19_0==COMMA) ) {
                    alt19=1;
                }


                switch (alt19) {
            	case 1 :
            	    // HiveParser.g:846:25: COMMA keyValueProperty
            	    {
            	    COMMA98=(Token)match(input,COMMA,FOLLOW_COMMA_in_dbPropertiesList2439); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA98);


            	    pushFollow(FOLLOW_keyValueProperty_in_dbPropertiesList2441);
            	    keyValueProperty99=keyValueProperty();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty99.getTree());

            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);


            // AST REWRITE
            // elements: keyValueProperty
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 846:50: -> ^( TOK_DBPROPLIST ( keyValueProperty )+ )
            {
                // HiveParser.g:846:53: ^( TOK_DBPROPLIST ( keyValueProperty )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DBPROPLIST, "TOK_DBPROPLIST")
                , root_1);

                if ( !(stream_keyValueProperty.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_keyValueProperty.hasNext() ) {
                    adaptor.addChild(root_1, stream_keyValueProperty.nextTree());

                }
                stream_keyValueProperty.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dbPropertiesList"


    public static class switchDatabaseStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switchDatabaseStatement"
    // HiveParser.g:850:1: switchDatabaseStatement : KW_USE identifier -> ^( TOK_SWITCHDATABASE identifier ) ;
    public final HiveParser.switchDatabaseStatement_return switchDatabaseStatement() throws RecognitionException {
        HiveParser.switchDatabaseStatement_return retval = new HiveParser.switchDatabaseStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_USE100=null;
        HiveParser_IdentifiersParser.identifier_return identifier101 =null;


        CommonTree KW_USE100_tree=null;
        RewriteRuleTokenStream stream_KW_USE=new RewriteRuleTokenStream(adaptor,"token KW_USE");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
         pushMsg("switch database statement", state); 
        try {
            // HiveParser.g:853:5: ( KW_USE identifier -> ^( TOK_SWITCHDATABASE identifier ) )
            // HiveParser.g:853:7: KW_USE identifier
            {
            KW_USE100=(Token)match(input,KW_USE,FOLLOW_KW_USE_in_switchDatabaseStatement2480); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_USE.add(KW_USE100);


            pushFollow(FOLLOW_identifier_in_switchDatabaseStatement2482);
            identifier101=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(identifier101.getTree());

            // AST REWRITE
            // elements: identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 854:5: -> ^( TOK_SWITCHDATABASE identifier )
            {
                // HiveParser.g:854:8: ^( TOK_SWITCHDATABASE identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SWITCHDATABASE, "TOK_SWITCHDATABASE")
                , root_1);

                adaptor.addChild(root_1, stream_identifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switchDatabaseStatement"


    public static class dropDatabaseStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dropDatabaseStatement"
    // HiveParser.g:857:1: dropDatabaseStatement : KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? identifier ( restrictOrCascade )? -> ^( TOK_DROPDATABASE identifier ( ifExists )? ( restrictOrCascade )? ) ;
    public final HiveParser.dropDatabaseStatement_return dropDatabaseStatement() throws RecognitionException {
        HiveParser.dropDatabaseStatement_return retval = new HiveParser.dropDatabaseStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_DROP102=null;
        Token KW_DATABASE103=null;
        Token KW_SCHEMA104=null;
        HiveParser.ifExists_return ifExists105 =null;

        HiveParser_IdentifiersParser.identifier_return identifier106 =null;

        HiveParser.restrictOrCascade_return restrictOrCascade107 =null;


        CommonTree KW_DROP102_tree=null;
        CommonTree KW_DATABASE103_tree=null;
        CommonTree KW_SCHEMA104_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
        RewriteRuleSubtreeStream stream_restrictOrCascade=new RewriteRuleSubtreeStream(adaptor,"rule restrictOrCascade");
         pushMsg("drop database statement", state); 
        try {
            // HiveParser.g:860:5: ( KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? identifier ( restrictOrCascade )? -> ^( TOK_DROPDATABASE identifier ( ifExists )? ( restrictOrCascade )? ) )
            // HiveParser.g:860:7: KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? identifier ( restrictOrCascade )?
            {
            KW_DROP102=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropDatabaseStatement2521); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP102);


            // HiveParser.g:860:15: ( KW_DATABASE | KW_SCHEMA )
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==KW_DATABASE) ) {
                alt20=1;
            }
            else if ( (LA20_0==KW_SCHEMA) ) {
                alt20=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;

            }
            switch (alt20) {
                case 1 :
                    // HiveParser.g:860:16: KW_DATABASE
                    {
                    KW_DATABASE103=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_dropDatabaseStatement2524); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE103);


                    }
                    break;
                case 2 :
                    // HiveParser.g:860:28: KW_SCHEMA
                    {
                    KW_SCHEMA104=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_dropDatabaseStatement2526); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA104);


                    }
                    break;

            }


            // HiveParser.g:860:39: ( ifExists )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==KW_IF) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // HiveParser.g:860:39: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropDatabaseStatement2529);
                    ifExists105=ifExists();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ifExists.add(ifExists105.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_identifier_in_dropDatabaseStatement2532);
            identifier106=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(identifier106.getTree());

            // HiveParser.g:860:60: ( restrictOrCascade )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==KW_CASCADE||LA22_0==KW_RESTRICT) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // HiveParser.g:860:60: restrictOrCascade
                    {
                    pushFollow(FOLLOW_restrictOrCascade_in_dropDatabaseStatement2534);
                    restrictOrCascade107=restrictOrCascade();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_restrictOrCascade.add(restrictOrCascade107.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: ifExists, identifier, restrictOrCascade
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 861:5: -> ^( TOK_DROPDATABASE identifier ( ifExists )? ( restrictOrCascade )? )
            {
                // HiveParser.g:861:8: ^( TOK_DROPDATABASE identifier ( ifExists )? ( restrictOrCascade )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DROPDATABASE, "TOK_DROPDATABASE")
                , root_1);

                adaptor.addChild(root_1, stream_identifier.nextTree());

                // HiveParser.g:861:38: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.nextTree());

                }
                stream_ifExists.reset();

                // HiveParser.g:861:48: ( restrictOrCascade )?
                if ( stream_restrictOrCascade.hasNext() ) {
                    adaptor.addChild(root_1, stream_restrictOrCascade.nextTree());

                }
                stream_restrictOrCascade.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dropDatabaseStatement"


    public static class databaseComment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "databaseComment"
    // HiveParser.g:864:1: databaseComment : KW_COMMENT comment= StringLiteral -> ^( TOK_DATABASECOMMENT $comment) ;
    public final HiveParser.databaseComment_return databaseComment() throws RecognitionException {
        HiveParser.databaseComment_return retval = new HiveParser.databaseComment_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token comment=null;
        Token KW_COMMENT108=null;

        CommonTree comment_tree=null;
        CommonTree KW_COMMENT108_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

         pushMsg("database's comment", state); 
        try {
            // HiveParser.g:867:5: ( KW_COMMENT comment= StringLiteral -> ^( TOK_DATABASECOMMENT $comment) )
            // HiveParser.g:867:7: KW_COMMENT comment= StringLiteral
            {
            KW_COMMENT108=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_databaseComment2580); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT108);


            comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_databaseComment2584); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(comment);


            // AST REWRITE
            // elements: comment
            // token labels: comment
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 868:5: -> ^( TOK_DATABASECOMMENT $comment)
            {
                // HiveParser.g:868:8: ^( TOK_DATABASECOMMENT $comment)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DATABASECOMMENT, "TOK_DATABASECOMMENT")
                , root_1);

                adaptor.addChild(root_1, stream_comment.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "databaseComment"


    public static class createTableStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "createTableStatement"
    // HiveParser.g:871:1: createTableStatement : KW_CREATE (temp= KW_TEMPORARY )? (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatementWithCTE )? ) -> ^( TOK_CREATETABLE $name ( $temp)? ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatementWithCTE )? ) ;
    public final HiveParser.createTableStatement_return createTableStatement() throws RecognitionException {
        HiveParser.createTableStatement_return retval = new HiveParser.createTableStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token temp=null;
        Token ext=null;
        Token like=null;
        Token KW_CREATE109=null;
        Token KW_TABLE110=null;
        Token LPAREN116=null;
        Token RPAREN118=null;
        Token KW_AS127=null;
        HiveParser_FromClauseParser.tableName_return name =null;

        HiveParser_FromClauseParser.tableName_return likeName =null;

        HiveParser.ifNotExists_return ifNotExists111 =null;

        HiveParser.tableRowFormat_return tableRowFormat112 =null;

        HiveParser.tableFileFormat_return tableFileFormat113 =null;

        HiveParser.tableLocation_return tableLocation114 =null;

        HiveParser.tablePropertiesPrefixed_return tablePropertiesPrefixed115 =null;

        HiveParser.columnNameTypeList_return columnNameTypeList117 =null;

        HiveParser.tableComment_return tableComment119 =null;

        HiveParser.tablePartition_return tablePartition120 =null;

        HiveParser.tableBuckets_return tableBuckets121 =null;

        HiveParser.tableSkewed_return tableSkewed122 =null;

        HiveParser.tableRowFormat_return tableRowFormat123 =null;

        HiveParser.tableFileFormat_return tableFileFormat124 =null;

        HiveParser.tableLocation_return tableLocation125 =null;

        HiveParser.tablePropertiesPrefixed_return tablePropertiesPrefixed126 =null;

        HiveParser.selectStatementWithCTE_return selectStatementWithCTE128 =null;


        CommonTree temp_tree=null;
        CommonTree ext_tree=null;
        CommonTree like_tree=null;
        CommonTree KW_CREATE109_tree=null;
        CommonTree KW_TABLE110_tree=null;
        CommonTree LPAREN116_tree=null;
        CommonTree RPAREN118_tree=null;
        CommonTree KW_AS127_tree=null;
        RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token KW_EXTERNAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_LIKE=new RewriteRuleTokenStream(adaptor,"token KW_LIKE");
        RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
        RewriteRuleSubtreeStream stream_selectStatementWithCTE=new RewriteRuleSubtreeStream(adaptor,"rule selectStatementWithCTE");
        RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
        RewriteRuleSubtreeStream stream_tableSkewed=new RewriteRuleSubtreeStream(adaptor,"rule tableSkewed");
        RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
        RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
        RewriteRuleSubtreeStream stream_tableComment=new RewriteRuleSubtreeStream(adaptor,"rule tableComment");
        RewriteRuleSubtreeStream stream_tablePartition=new RewriteRuleSubtreeStream(adaptor,"rule tablePartition");
        RewriteRuleSubtreeStream stream_tableBuckets=new RewriteRuleSubtreeStream(adaptor,"rule tableBuckets");
        RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         pushMsg("create table statement", state); 
        try {
            // HiveParser.g:874:5: ( KW_CREATE (temp= KW_TEMPORARY )? (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatementWithCTE )? ) -> ^( TOK_CREATETABLE $name ( $temp)? ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatementWithCTE )? ) )
            // HiveParser.g:874:7: KW_CREATE (temp= KW_TEMPORARY )? (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatementWithCTE )? )
            {
            KW_CREATE109=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createTableStatement2624); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE109);


            // HiveParser.g:874:17: (temp= KW_TEMPORARY )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==KW_TEMPORARY) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // HiveParser.g:874:18: temp= KW_TEMPORARY
                    {
                    temp=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_createTableStatement2629); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TEMPORARY.add(temp);


                    }
                    break;

            }


            // HiveParser.g:874:38: (ext= KW_EXTERNAL )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==KW_EXTERNAL) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // HiveParser.g:874:39: ext= KW_EXTERNAL
                    {
                    ext=(Token)match(input,KW_EXTERNAL,FOLLOW_KW_EXTERNAL_in_createTableStatement2636); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_EXTERNAL.add(ext);


                    }
                    break;

            }


            KW_TABLE110=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_createTableStatement2640); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE110);


            // HiveParser.g:874:66: ( ifNotExists )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==KW_IF) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // HiveParser.g:874:66: ifNotExists
                    {
                    pushFollow(FOLLOW_ifNotExists_in_createTableStatement2642);
                    ifNotExists111=ifNotExists();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists111.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_tableName_in_createTableStatement2647);
            name=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(name.getTree());

            // HiveParser.g:875:7: (like= KW_LIKE likeName= tableName ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatementWithCTE )? )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==KW_LIKE) ) {
                alt40=1;
            }
            else if ( (LA40_0==EOF||LA40_0==KW_AS||LA40_0==KW_CLUSTERED||LA40_0==KW_COMMENT||LA40_0==KW_LOCATION||LA40_0==KW_PARTITIONED||LA40_0==KW_ROW||LA40_0==KW_SKEWED||LA40_0==KW_STORED||LA40_0==KW_TBLPROPERTIES||LA40_0==LPAREN) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;

            }
            switch (alt40) {
                case 1 :
                    // HiveParser.g:875:10: like= KW_LIKE likeName= tableName ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )?
                    {
                    like=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_createTableStatement2660); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_LIKE.add(like);


                    pushFollow(FOLLOW_tableName_in_createTableStatement2664);
                    likeName=tableName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableName.add(likeName.getTree());

                    // HiveParser.g:876:10: ( tableRowFormat )?
                    int alt26=2;
                    int LA26_0 = input.LA(1);

                    if ( (LA26_0==KW_ROW) ) {
                        alt26=1;
                    }
                    switch (alt26) {
                        case 1 :
                            // HiveParser.g:876:10: tableRowFormat
                            {
                            pushFollow(FOLLOW_tableRowFormat_in_createTableStatement2675);
                            tableRowFormat112=tableRowFormat();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tableRowFormat.add(tableRowFormat112.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:877:10: ( tableFileFormat )?
                    int alt27=2;
                    int LA27_0 = input.LA(1);

                    if ( (LA27_0==KW_STORED) ) {
                        alt27=1;
                    }
                    switch (alt27) {
                        case 1 :
                            // HiveParser.g:877:10: tableFileFormat
                            {
                            pushFollow(FOLLOW_tableFileFormat_in_createTableStatement2687);
                            tableFileFormat113=tableFileFormat();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tableFileFormat.add(tableFileFormat113.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:878:10: ( tableLocation )?
                    int alt28=2;
                    int LA28_0 = input.LA(1);

                    if ( (LA28_0==KW_LOCATION) ) {
                        alt28=1;
                    }
                    switch (alt28) {
                        case 1 :
                            // HiveParser.g:878:10: tableLocation
                            {
                            pushFollow(FOLLOW_tableLocation_in_createTableStatement2699);
                            tableLocation114=tableLocation();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tableLocation.add(tableLocation114.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:879:10: ( tablePropertiesPrefixed )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==KW_TBLPROPERTIES) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            // HiveParser.g:879:10: tablePropertiesPrefixed
                            {
                            pushFollow(FOLLOW_tablePropertiesPrefixed_in_createTableStatement2711);
                            tablePropertiesPrefixed115=tablePropertiesPrefixed();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed115.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // HiveParser.g:880:10: ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatementWithCTE )?
                    {
                    // HiveParser.g:880:10: ( LPAREN columnNameTypeList RPAREN )?
                    int alt30=2;
                    int LA30_0 = input.LA(1);

                    if ( (LA30_0==LPAREN) ) {
                        alt30=1;
                    }
                    switch (alt30) {
                        case 1 :
                            // HiveParser.g:880:11: LPAREN columnNameTypeList RPAREN
                            {
                            LPAREN116=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createTableStatement2724); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN116);


                            pushFollow(FOLLOW_columnNameTypeList_in_createTableStatement2726);
                            columnNameTypeList117=columnNameTypeList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_columnNameTypeList.add(columnNameTypeList117.getTree());

                            RPAREN118=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createTableStatement2728); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN118);


                            }
                            break;

                    }


                    // HiveParser.g:881:10: ( tableComment )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==KW_COMMENT) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // HiveParser.g:881:10: tableComment
                            {
                            pushFollow(FOLLOW_tableComment_in_createTableStatement2741);
                            tableComment119=tableComment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tableComment.add(tableComment119.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:882:10: ( tablePartition )?
                    int alt32=2;
                    int LA32_0 = input.LA(1);

                    if ( (LA32_0==KW_PARTITIONED) ) {
                        alt32=1;
                    }
                    switch (alt32) {
                        case 1 :
                            // HiveParser.g:882:10: tablePartition
                            {
                            pushFollow(FOLLOW_tablePartition_in_createTableStatement2753);
                            tablePartition120=tablePartition();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tablePartition.add(tablePartition120.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:883:10: ( tableBuckets )?
                    int alt33=2;
                    int LA33_0 = input.LA(1);

                    if ( (LA33_0==KW_CLUSTERED) ) {
                        alt33=1;
                    }
                    switch (alt33) {
                        case 1 :
                            // HiveParser.g:883:10: tableBuckets
                            {
                            pushFollow(FOLLOW_tableBuckets_in_createTableStatement2765);
                            tableBuckets121=tableBuckets();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tableBuckets.add(tableBuckets121.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:884:10: ( tableSkewed )?
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==KW_SKEWED) ) {
                        alt34=1;
                    }
                    switch (alt34) {
                        case 1 :
                            // HiveParser.g:884:10: tableSkewed
                            {
                            pushFollow(FOLLOW_tableSkewed_in_createTableStatement2777);
                            tableSkewed122=tableSkewed();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tableSkewed.add(tableSkewed122.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:885:10: ( tableRowFormat )?
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==KW_ROW) ) {
                        alt35=1;
                    }
                    switch (alt35) {
                        case 1 :
                            // HiveParser.g:885:10: tableRowFormat
                            {
                            pushFollow(FOLLOW_tableRowFormat_in_createTableStatement2789);
                            tableRowFormat123=tableRowFormat();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tableRowFormat.add(tableRowFormat123.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:886:10: ( tableFileFormat )?
                    int alt36=2;
                    int LA36_0 = input.LA(1);

                    if ( (LA36_0==KW_STORED) ) {
                        alt36=1;
                    }
                    switch (alt36) {
                        case 1 :
                            // HiveParser.g:886:10: tableFileFormat
                            {
                            pushFollow(FOLLOW_tableFileFormat_in_createTableStatement2801);
                            tableFileFormat124=tableFileFormat();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tableFileFormat.add(tableFileFormat124.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:887:10: ( tableLocation )?
                    int alt37=2;
                    int LA37_0 = input.LA(1);

                    if ( (LA37_0==KW_LOCATION) ) {
                        alt37=1;
                    }
                    switch (alt37) {
                        case 1 :
                            // HiveParser.g:887:10: tableLocation
                            {
                            pushFollow(FOLLOW_tableLocation_in_createTableStatement2813);
                            tableLocation125=tableLocation();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tableLocation.add(tableLocation125.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:888:10: ( tablePropertiesPrefixed )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==KW_TBLPROPERTIES) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // HiveParser.g:888:10: tablePropertiesPrefixed
                            {
                            pushFollow(FOLLOW_tablePropertiesPrefixed_in_createTableStatement2825);
                            tablePropertiesPrefixed126=tablePropertiesPrefixed();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed126.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:889:10: ( KW_AS selectStatementWithCTE )?
                    int alt39=2;
                    int LA39_0 = input.LA(1);

                    if ( (LA39_0==KW_AS) ) {
                        alt39=1;
                    }
                    switch (alt39) {
                        case 1 :
                            // HiveParser.g:889:11: KW_AS selectStatementWithCTE
                            {
                            KW_AS127=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createTableStatement2838); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS127);


                            pushFollow(FOLLOW_selectStatementWithCTE_in_createTableStatement2840);
                            selectStatementWithCTE128=selectStatementWithCTE();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_selectStatementWithCTE.add(selectStatementWithCTE128.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: tableComment, selectStatementWithCTE, tableFileFormat, likeName, name, tablePartition, ifNotExists, tablePropertiesPrefixed, columnNameTypeList, tableSkewed, ext, tableBuckets, temp, tableRowFormat, tableLocation
            // token labels: ext, temp
            // rule labels: likeName, name, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_ext=new RewriteRuleTokenStream(adaptor,"token ext",ext);
            RewriteRuleTokenStream stream_temp=new RewriteRuleTokenStream(adaptor,"token temp",temp);
            RewriteRuleSubtreeStream stream_likeName=new RewriteRuleSubtreeStream(adaptor,"rule likeName",likeName!=null?likeName.tree:null);
            RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 891:5: -> ^( TOK_CREATETABLE $name ( $temp)? ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatementWithCTE )? )
            {
                // HiveParser.g:891:8: ^( TOK_CREATETABLE $name ( $temp)? ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatementWithCTE )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_CREATETABLE, "TOK_CREATETABLE")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                // HiveParser.g:891:33: ( $temp)?
                if ( stream_temp.hasNext() ) {
                    adaptor.addChild(root_1, stream_temp.nextNode());

                }
                stream_temp.reset();

                // HiveParser.g:891:40: ( $ext)?
                if ( stream_ext.hasNext() ) {
                    adaptor.addChild(root_1, stream_ext.nextNode());

                }
                stream_ext.reset();

                // HiveParser.g:891:45: ( ifNotExists )?
                if ( stream_ifNotExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifNotExists.nextTree());

                }
                stream_ifNotExists.reset();

                // HiveParser.g:892:10: ^( TOK_LIKETABLE ( $likeName)? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_LIKETABLE, "TOK_LIKETABLE")
                , root_2);

                // HiveParser.g:892:27: ( $likeName)?
                if ( stream_likeName.hasNext() ) {
                    adaptor.addChild(root_2, stream_likeName.nextTree());

                }
                stream_likeName.reset();

                adaptor.addChild(root_1, root_2);
                }

                // HiveParser.g:893:10: ( columnNameTypeList )?
                if ( stream_columnNameTypeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());

                }
                stream_columnNameTypeList.reset();

                // HiveParser.g:894:10: ( tableComment )?
                if ( stream_tableComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableComment.nextTree());

                }
                stream_tableComment.reset();

                // HiveParser.g:895:10: ( tablePartition )?
                if ( stream_tablePartition.hasNext() ) {
                    adaptor.addChild(root_1, stream_tablePartition.nextTree());

                }
                stream_tablePartition.reset();

                // HiveParser.g:896:10: ( tableBuckets )?
                if ( stream_tableBuckets.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableBuckets.nextTree());

                }
                stream_tableBuckets.reset();

                // HiveParser.g:897:10: ( tableSkewed )?
                if ( stream_tableSkewed.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableSkewed.nextTree());

                }
                stream_tableSkewed.reset();

                // HiveParser.g:898:10: ( tableRowFormat )?
                if ( stream_tableRowFormat.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormat.nextTree());

                }
                stream_tableRowFormat.reset();

                // HiveParser.g:899:10: ( tableFileFormat )?
                if ( stream_tableFileFormat.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableFileFormat.nextTree());

                }
                stream_tableFileFormat.reset();

                // HiveParser.g:900:10: ( tableLocation )?
                if ( stream_tableLocation.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableLocation.nextTree());

                }
                stream_tableLocation.reset();

                // HiveParser.g:901:10: ( tablePropertiesPrefixed )?
                if ( stream_tablePropertiesPrefixed.hasNext() ) {
                    adaptor.addChild(root_1, stream_tablePropertiesPrefixed.nextTree());

                }
                stream_tablePropertiesPrefixed.reset();

                // HiveParser.g:902:10: ( selectStatementWithCTE )?
                if ( stream_selectStatementWithCTE.hasNext() ) {
                    adaptor.addChild(root_1, stream_selectStatementWithCTE.nextTree());

                }
                stream_selectStatementWithCTE.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "createTableStatement"


    public static class truncateTableStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "truncateTableStatement"
    // HiveParser.g:906:1: truncateTableStatement : KW_TRUNCATE KW_TABLE tablePartitionPrefix ( KW_COLUMNS LPAREN columnNameList RPAREN )? -> ^( TOK_TRUNCATETABLE tablePartitionPrefix ( columnNameList )? ) ;
    public final HiveParser.truncateTableStatement_return truncateTableStatement() throws RecognitionException {
        HiveParser.truncateTableStatement_return retval = new HiveParser.truncateTableStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_TRUNCATE129=null;
        Token KW_TABLE130=null;
        Token KW_COLUMNS132=null;
        Token LPAREN133=null;
        Token RPAREN135=null;
        HiveParser.tablePartitionPrefix_return tablePartitionPrefix131 =null;

        HiveParser.columnNameList_return columnNameList134 =null;


        CommonTree KW_TRUNCATE129_tree=null;
        CommonTree KW_TABLE130_tree=null;
        CommonTree KW_COLUMNS132_tree=null;
        CommonTree LPAREN133_tree=null;
        CommonTree RPAREN135_tree=null;
        RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_TRUNCATE=new RewriteRuleTokenStream(adaptor,"token KW_TRUNCATE");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_tablePartitionPrefix=new RewriteRuleSubtreeStream(adaptor,"rule tablePartitionPrefix");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
         pushMsg("truncate table statement", state); 
        try {
            // HiveParser.g:909:5: ( KW_TRUNCATE KW_TABLE tablePartitionPrefix ( KW_COLUMNS LPAREN columnNameList RPAREN )? -> ^( TOK_TRUNCATETABLE tablePartitionPrefix ( columnNameList )? ) )
            // HiveParser.g:909:7: KW_TRUNCATE KW_TABLE tablePartitionPrefix ( KW_COLUMNS LPAREN columnNameList RPAREN )?
            {
            KW_TRUNCATE129=(Token)match(input,KW_TRUNCATE,FOLLOW_KW_TRUNCATE_in_truncateTableStatement3047); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TRUNCATE.add(KW_TRUNCATE129);


            KW_TABLE130=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_truncateTableStatement3049); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE130);


            pushFollow(FOLLOW_tablePartitionPrefix_in_truncateTableStatement3051);
            tablePartitionPrefix131=tablePartitionPrefix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tablePartitionPrefix.add(tablePartitionPrefix131.getTree());

            // HiveParser.g:909:49: ( KW_COLUMNS LPAREN columnNameList RPAREN )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==KW_COLUMNS) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // HiveParser.g:909:50: KW_COLUMNS LPAREN columnNameList RPAREN
                    {
                    KW_COLUMNS132=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_truncateTableStatement3054); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_COLUMNS.add(KW_COLUMNS132);


                    LPAREN133=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_truncateTableStatement3056); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN133);


                    pushFollow(FOLLOW_columnNameList_in_truncateTableStatement3058);
                    columnNameList134=columnNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnNameList.add(columnNameList134.getTree());

                    RPAREN135=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_truncateTableStatement3060); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN135);


                    }
                    break;

            }


            // AST REWRITE
            // elements: tablePartitionPrefix, columnNameList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 909:92: -> ^( TOK_TRUNCATETABLE tablePartitionPrefix ( columnNameList )? )
            {
                // HiveParser.g:909:95: ^( TOK_TRUNCATETABLE tablePartitionPrefix ( columnNameList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TRUNCATETABLE, "TOK_TRUNCATETABLE")
                , root_1);

                adaptor.addChild(root_1, stream_tablePartitionPrefix.nextTree());

                // HiveParser.g:909:136: ( columnNameList )?
                if ( stream_columnNameList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameList.nextTree());

                }
                stream_columnNameList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "truncateTableStatement"


    public static class createIndexStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "createIndexStatement"
    // HiveParser.g:911:1: createIndexStatement : KW_CREATE KW_INDEX indexName= identifier KW_ON KW_TABLE tab= tableName LPAREN indexedCols= columnNameList RPAREN KW_AS typeName= StringLiteral ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? -> ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? ) ;
    public final HiveParser.createIndexStatement_return createIndexStatement() throws RecognitionException {
        HiveParser.createIndexStatement_return retval = new HiveParser.createIndexStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token typeName=null;
        Token KW_CREATE136=null;
        Token KW_INDEX137=null;
        Token KW_ON138=null;
        Token KW_TABLE139=null;
        Token LPAREN140=null;
        Token RPAREN141=null;
        Token KW_AS142=null;
        HiveParser_IdentifiersParser.identifier_return indexName =null;

        HiveParser_FromClauseParser.tableName_return tab =null;

        HiveParser.columnNameList_return indexedCols =null;

        HiveParser.autoRebuild_return autoRebuild143 =null;

        HiveParser.indexPropertiesPrefixed_return indexPropertiesPrefixed144 =null;

        HiveParser.indexTblName_return indexTblName145 =null;

        HiveParser.tableRowFormat_return tableRowFormat146 =null;

        HiveParser.tableFileFormat_return tableFileFormat147 =null;

        HiveParser.tableLocation_return tableLocation148 =null;

        HiveParser.tablePropertiesPrefixed_return tablePropertiesPrefixed149 =null;

        HiveParser.indexComment_return indexComment150 =null;


        CommonTree typeName_tree=null;
        CommonTree KW_CREATE136_tree=null;
        CommonTree KW_INDEX137_tree=null;
        CommonTree KW_ON138_tree=null;
        CommonTree KW_TABLE139_tree=null;
        CommonTree LPAREN140_tree=null;
        CommonTree RPAREN141_tree=null;
        CommonTree KW_AS142_tree=null;
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
        RewriteRuleSubtreeStream stream_indexComment=new RewriteRuleSubtreeStream(adaptor,"rule indexComment");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
        RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
        RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
        RewriteRuleSubtreeStream stream_indexTblName=new RewriteRuleSubtreeStream(adaptor,"rule indexTblName");
        RewriteRuleSubtreeStream stream_autoRebuild=new RewriteRuleSubtreeStream(adaptor,"rule autoRebuild");
        RewriteRuleSubtreeStream stream_indexPropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule indexPropertiesPrefixed");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         pushMsg("create index statement", state);
        try {
            // HiveParser.g:914:5: ( KW_CREATE KW_INDEX indexName= identifier KW_ON KW_TABLE tab= tableName LPAREN indexedCols= columnNameList RPAREN KW_AS typeName= StringLiteral ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? -> ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? ) )
            // HiveParser.g:914:7: KW_CREATE KW_INDEX indexName= identifier KW_ON KW_TABLE tab= tableName LPAREN indexedCols= columnNameList RPAREN KW_AS typeName= StringLiteral ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )?
            {
            KW_CREATE136=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createIndexStatement3095); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE136);


            KW_INDEX137=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_createIndexStatement3097); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_INDEX.add(KW_INDEX137);


            pushFollow(FOLLOW_identifier_in_createIndexStatement3101);
            indexName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(indexName.getTree());

            KW_ON138=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_createIndexStatement3109); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON138);


            KW_TABLE139=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_createIndexStatement3111); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE139);


            pushFollow(FOLLOW_tableName_in_createIndexStatement3115);
            tab=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(tab.getTree());

            LPAREN140=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexStatement3117); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN140);


            pushFollow(FOLLOW_columnNameList_in_createIndexStatement3121);
            indexedCols=columnNameList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnNameList.add(indexedCols.getTree());

            RPAREN141=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexStatement3123); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN141);


            KW_AS142=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createIndexStatement3131); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS142);


            typeName=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_createIndexStatement3135); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(typeName);


            // HiveParser.g:917:7: ( autoRebuild )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==KW_WITH) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // HiveParser.g:917:7: autoRebuild
                    {
                    pushFollow(FOLLOW_autoRebuild_in_createIndexStatement3143);
                    autoRebuild143=autoRebuild();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_autoRebuild.add(autoRebuild143.getTree());

                    }
                    break;

            }


            // HiveParser.g:918:7: ( indexPropertiesPrefixed )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==KW_IDXPROPERTIES) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // HiveParser.g:918:7: indexPropertiesPrefixed
                    {
                    pushFollow(FOLLOW_indexPropertiesPrefixed_in_createIndexStatement3152);
                    indexPropertiesPrefixed144=indexPropertiesPrefixed();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_indexPropertiesPrefixed.add(indexPropertiesPrefixed144.getTree());

                    }
                    break;

            }


            // HiveParser.g:919:7: ( indexTblName )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==KW_IN) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // HiveParser.g:919:7: indexTblName
                    {
                    pushFollow(FOLLOW_indexTblName_in_createIndexStatement3161);
                    indexTblName145=indexTblName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_indexTblName.add(indexTblName145.getTree());

                    }
                    break;

            }


            // HiveParser.g:920:7: ( tableRowFormat )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==KW_ROW) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // HiveParser.g:920:7: tableRowFormat
                    {
                    pushFollow(FOLLOW_tableRowFormat_in_createIndexStatement3170);
                    tableRowFormat146=tableRowFormat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableRowFormat.add(tableRowFormat146.getTree());

                    }
                    break;

            }


            // HiveParser.g:921:7: ( tableFileFormat )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==KW_STORED) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // HiveParser.g:921:7: tableFileFormat
                    {
                    pushFollow(FOLLOW_tableFileFormat_in_createIndexStatement3179);
                    tableFileFormat147=tableFileFormat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableFileFormat.add(tableFileFormat147.getTree());

                    }
                    break;

            }


            // HiveParser.g:922:7: ( tableLocation )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==KW_LOCATION) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // HiveParser.g:922:7: tableLocation
                    {
                    pushFollow(FOLLOW_tableLocation_in_createIndexStatement3188);
                    tableLocation148=tableLocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableLocation.add(tableLocation148.getTree());

                    }
                    break;

            }


            // HiveParser.g:923:7: ( tablePropertiesPrefixed )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==KW_TBLPROPERTIES) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // HiveParser.g:923:7: tablePropertiesPrefixed
                    {
                    pushFollow(FOLLOW_tablePropertiesPrefixed_in_createIndexStatement3197);
                    tablePropertiesPrefixed149=tablePropertiesPrefixed();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed149.getTree());

                    }
                    break;

            }


            // HiveParser.g:924:7: ( indexComment )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==KW_COMMENT) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // HiveParser.g:924:7: indexComment
                    {
                    pushFollow(FOLLOW_indexComment_in_createIndexStatement3206);
                    indexComment150=indexComment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_indexComment.add(indexComment150.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: indexedCols, indexName, tableRowFormat, autoRebuild, tableLocation, indexComment, indexTblName, typeName, tab, indexPropertiesPrefixed, tablePropertiesPrefixed, tableFileFormat
            // token labels: typeName
            // rule labels: indexedCols, tab, indexName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_typeName=new RewriteRuleTokenStream(adaptor,"token typeName",typeName);
            RewriteRuleSubtreeStream stream_indexedCols=new RewriteRuleSubtreeStream(adaptor,"rule indexedCols",indexedCols!=null?indexedCols.tree:null);
            RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.tree:null);
            RewriteRuleSubtreeStream stream_indexName=new RewriteRuleSubtreeStream(adaptor,"rule indexName",indexName!=null?indexName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 925:5: -> ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? )
            {
                // HiveParser.g:925:7: ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_CREATEINDEX, "TOK_CREATEINDEX")
                , root_1);

                adaptor.addChild(root_1, stream_indexName.nextTree());

                adaptor.addChild(root_1, stream_typeName.nextNode());

                adaptor.addChild(root_1, stream_tab.nextTree());

                adaptor.addChild(root_1, stream_indexedCols.nextTree());

                // HiveParser.g:926:9: ( autoRebuild )?
                if ( stream_autoRebuild.hasNext() ) {
                    adaptor.addChild(root_1, stream_autoRebuild.nextTree());

                }
                stream_autoRebuild.reset();

                // HiveParser.g:927:9: ( indexPropertiesPrefixed )?
                if ( stream_indexPropertiesPrefixed.hasNext() ) {
                    adaptor.addChild(root_1, stream_indexPropertiesPrefixed.nextTree());

                }
                stream_indexPropertiesPrefixed.reset();

                // HiveParser.g:928:9: ( indexTblName )?
                if ( stream_indexTblName.hasNext() ) {
                    adaptor.addChild(root_1, stream_indexTblName.nextTree());

                }
                stream_indexTblName.reset();

                // HiveParser.g:929:9: ( tableRowFormat )?
                if ( stream_tableRowFormat.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormat.nextTree());

                }
                stream_tableRowFormat.reset();

                // HiveParser.g:930:9: ( tableFileFormat )?
                if ( stream_tableFileFormat.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableFileFormat.nextTree());

                }
                stream_tableFileFormat.reset();

                // HiveParser.g:931:9: ( tableLocation )?
                if ( stream_tableLocation.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableLocation.nextTree());

                }
                stream_tableLocation.reset();

                // HiveParser.g:932:9: ( tablePropertiesPrefixed )?
                if ( stream_tablePropertiesPrefixed.hasNext() ) {
                    adaptor.addChild(root_1, stream_tablePropertiesPrefixed.nextTree());

                }
                stream_tablePropertiesPrefixed.reset();

                // HiveParser.g:933:9: ( indexComment )?
                if ( stream_indexComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_indexComment.nextTree());

                }
                stream_indexComment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "createIndexStatement"


    public static class indexComment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indexComment"
    // HiveParser.g:936:1: indexComment : KW_COMMENT comment= StringLiteral -> ^( TOK_INDEXCOMMENT $comment) ;
    public final HiveParser.indexComment_return indexComment() throws RecognitionException {
        HiveParser.indexComment_return retval = new HiveParser.indexComment_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token comment=null;
        Token KW_COMMENT151=null;

        CommonTree comment_tree=null;
        CommonTree KW_COMMENT151_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

         pushMsg("comment on an index", state);
        try {
            // HiveParser.g:939:9: ( KW_COMMENT comment= StringLiteral -> ^( TOK_INDEXCOMMENT $comment) )
            // HiveParser.g:940:17: KW_COMMENT comment= StringLiteral
            {
            KW_COMMENT151=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_indexComment3363); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT151);


            comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_indexComment3367); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(comment);


            // AST REWRITE
            // elements: comment
            // token labels: comment
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 940:51: -> ^( TOK_INDEXCOMMENT $comment)
            {
                // HiveParser.g:940:54: ^( TOK_INDEXCOMMENT $comment)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_INDEXCOMMENT, "TOK_INDEXCOMMENT")
                , root_1);

                adaptor.addChild(root_1, stream_comment.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexComment"


    public static class autoRebuild_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "autoRebuild"
    // HiveParser.g:943:1: autoRebuild : KW_WITH KW_DEFERRED KW_REBUILD -> ^( TOK_DEFERRED_REBUILDINDEX ) ;
    public final HiveParser.autoRebuild_return autoRebuild() throws RecognitionException {
        HiveParser.autoRebuild_return retval = new HiveParser.autoRebuild_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_WITH152=null;
        Token KW_DEFERRED153=null;
        Token KW_REBUILD154=null;

        CommonTree KW_WITH152_tree=null;
        CommonTree KW_DEFERRED153_tree=null;
        CommonTree KW_REBUILD154_tree=null;
        RewriteRuleTokenStream stream_KW_REBUILD=new RewriteRuleTokenStream(adaptor,"token KW_REBUILD");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_DEFERRED=new RewriteRuleTokenStream(adaptor,"token KW_DEFERRED");

         pushMsg("auto rebuild index", state);
        try {
            // HiveParser.g:946:5: ( KW_WITH KW_DEFERRED KW_REBUILD -> ^( TOK_DEFERRED_REBUILDINDEX ) )
            // HiveParser.g:946:7: KW_WITH KW_DEFERRED KW_REBUILD
            {
            KW_WITH152=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_autoRebuild3408); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH152);


            KW_DEFERRED153=(Token)match(input,KW_DEFERRED,FOLLOW_KW_DEFERRED_in_autoRebuild3410); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DEFERRED.add(KW_DEFERRED153);


            KW_REBUILD154=(Token)match(input,KW_REBUILD,FOLLOW_KW_REBUILD_in_autoRebuild3412); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_REBUILD.add(KW_REBUILD154);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 947:5: -> ^( TOK_DEFERRED_REBUILDINDEX )
            {
                // HiveParser.g:947:7: ^( TOK_DEFERRED_REBUILDINDEX )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DEFERRED_REBUILDINDEX, "TOK_DEFERRED_REBUILDINDEX")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "autoRebuild"


    public static class indexTblName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indexTblName"
    // HiveParser.g:950:1: indexTblName : KW_IN KW_TABLE indexTbl= tableName -> ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl) ;
    public final HiveParser.indexTblName_return indexTblName() throws RecognitionException {
        HiveParser.indexTblName_return retval = new HiveParser.indexTblName_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_IN155=null;
        Token KW_TABLE156=null;
        HiveParser_FromClauseParser.tableName_return indexTbl =null;


        CommonTree KW_IN155_tree=null;
        CommonTree KW_TABLE156_tree=null;
        RewriteRuleTokenStream stream_KW_IN=new RewriteRuleTokenStream(adaptor,"token KW_IN");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         pushMsg("index table name", state);
        try {
            // HiveParser.g:953:5: ( KW_IN KW_TABLE indexTbl= tableName -> ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl) )
            // HiveParser.g:953:7: KW_IN KW_TABLE indexTbl= tableName
            {
            KW_IN155=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_indexTblName3448); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN155);


            KW_TABLE156=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_indexTblName3450); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE156);


            pushFollow(FOLLOW_tableName_in_indexTblName3454);
            indexTbl=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(indexTbl.getTree());

            // AST REWRITE
            // elements: indexTbl
            // token labels: 
            // rule labels: indexTbl, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_indexTbl=new RewriteRuleSubtreeStream(adaptor,"rule indexTbl",indexTbl!=null?indexTbl.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 954:5: -> ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl)
            {
                // HiveParser.g:954:7: ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_CREATEINDEX_INDEXTBLNAME, "TOK_CREATEINDEX_INDEXTBLNAME")
                , root_1);

                adaptor.addChild(root_1, stream_indexTbl.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexTblName"


    public static class indexPropertiesPrefixed_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indexPropertiesPrefixed"
    // HiveParser.g:957:1: indexPropertiesPrefixed : KW_IDXPROPERTIES ! indexProperties ;
    public final HiveParser.indexPropertiesPrefixed_return indexPropertiesPrefixed() throws RecognitionException {
        HiveParser.indexPropertiesPrefixed_return retval = new HiveParser.indexPropertiesPrefixed_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_IDXPROPERTIES157=null;
        HiveParser.indexProperties_return indexProperties158 =null;


        CommonTree KW_IDXPROPERTIES157_tree=null;

         pushMsg("table properties with prefix", state); 
        try {
            // HiveParser.g:960:5: ( KW_IDXPROPERTIES ! indexProperties )
            // HiveParser.g:961:9: KW_IDXPROPERTIES ! indexProperties
            {
            root_0 = (CommonTree)adaptor.nil();


            KW_IDXPROPERTIES157=(Token)match(input,KW_IDXPROPERTIES,FOLLOW_KW_IDXPROPERTIES_in_indexPropertiesPrefixed3501); if (state.failed) return retval;

            pushFollow(FOLLOW_indexProperties_in_indexPropertiesPrefixed3504);
            indexProperties158=indexProperties();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, indexProperties158.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexPropertiesPrefixed"


    public static class indexProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indexProperties"
    // HiveParser.g:964:1: indexProperties : LPAREN indexPropertiesList RPAREN -> ^( TOK_INDEXPROPERTIES indexPropertiesList ) ;
    public final HiveParser.indexProperties_return indexProperties() throws RecognitionException {
        HiveParser.indexProperties_return retval = new HiveParser.indexProperties_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token LPAREN159=null;
        Token RPAREN161=null;
        HiveParser.indexPropertiesList_return indexPropertiesList160 =null;


        CommonTree LPAREN159_tree=null;
        CommonTree RPAREN161_tree=null;
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_indexPropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule indexPropertiesList");
         pushMsg("index properties", state); 
        try {
            // HiveParser.g:967:5: ( LPAREN indexPropertiesList RPAREN -> ^( TOK_INDEXPROPERTIES indexPropertiesList ) )
            // HiveParser.g:968:7: LPAREN indexPropertiesList RPAREN
            {
            LPAREN159=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_indexProperties3537); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN159);


            pushFollow(FOLLOW_indexPropertiesList_in_indexProperties3539);
            indexPropertiesList160=indexPropertiesList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_indexPropertiesList.add(indexPropertiesList160.getTree());

            RPAREN161=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_indexProperties3541); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN161);


            // AST REWRITE
            // elements: indexPropertiesList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 968:41: -> ^( TOK_INDEXPROPERTIES indexPropertiesList )
            {
                // HiveParser.g:968:44: ^( TOK_INDEXPROPERTIES indexPropertiesList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_INDEXPROPERTIES, "TOK_INDEXPROPERTIES")
                , root_1);

                adaptor.addChild(root_1, stream_indexPropertiesList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexProperties"


    public static class indexPropertiesList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indexPropertiesList"
    // HiveParser.g:971:1: indexPropertiesList : keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_INDEXPROPLIST ( keyValueProperty )+ ) ;
    public final HiveParser.indexPropertiesList_return indexPropertiesList() throws RecognitionException {
        HiveParser.indexPropertiesList_return retval = new HiveParser.indexPropertiesList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA163=null;
        HiveParser.keyValueProperty_return keyValueProperty162 =null;

        HiveParser.keyValueProperty_return keyValueProperty164 =null;


        CommonTree COMMA163_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");
         pushMsg("index properties list", state); 
        try {
            // HiveParser.g:974:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_INDEXPROPLIST ( keyValueProperty )+ ) )
            // HiveParser.g:975:7: keyValueProperty ( COMMA keyValueProperty )*
            {
            pushFollow(FOLLOW_keyValueProperty_in_indexPropertiesList3582);
            keyValueProperty162=keyValueProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty162.getTree());

            // HiveParser.g:975:24: ( COMMA keyValueProperty )*
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==COMMA) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    // HiveParser.g:975:25: COMMA keyValueProperty
            	    {
            	    COMMA163=(Token)match(input,COMMA,FOLLOW_COMMA_in_indexPropertiesList3585); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA163);


            	    pushFollow(FOLLOW_keyValueProperty_in_indexPropertiesList3587);
            	    keyValueProperty164=keyValueProperty();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty164.getTree());

            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);


            // AST REWRITE
            // elements: keyValueProperty
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 975:50: -> ^( TOK_INDEXPROPLIST ( keyValueProperty )+ )
            {
                // HiveParser.g:975:53: ^( TOK_INDEXPROPLIST ( keyValueProperty )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_INDEXPROPLIST, "TOK_INDEXPROPLIST")
                , root_1);

                if ( !(stream_keyValueProperty.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_keyValueProperty.hasNext() ) {
                    adaptor.addChild(root_1, stream_keyValueProperty.nextTree());

                }
                stream_keyValueProperty.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexPropertiesList"


    public static class dropIndexStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dropIndexStatement"
    // HiveParser.g:978:1: dropIndexStatement : KW_DROP KW_INDEX ( ifExists )? indexName= identifier KW_ON tab= tableName -> ^( TOK_DROPINDEX $indexName $tab ( ifExists )? ) ;
    public final HiveParser.dropIndexStatement_return dropIndexStatement() throws RecognitionException {
        HiveParser.dropIndexStatement_return retval = new HiveParser.dropIndexStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_DROP165=null;
        Token KW_INDEX166=null;
        Token KW_ON168=null;
        HiveParser_IdentifiersParser.identifier_return indexName =null;

        HiveParser_FromClauseParser.tableName_return tab =null;

        HiveParser.ifExists_return ifExists167 =null;


        CommonTree KW_DROP165_tree=null;
        CommonTree KW_INDEX166_tree=null;
        CommonTree KW_ON168_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         pushMsg("drop index statement", state);
        try {
            // HiveParser.g:981:5: ( KW_DROP KW_INDEX ( ifExists )? indexName= identifier KW_ON tab= tableName -> ^( TOK_DROPINDEX $indexName $tab ( ifExists )? ) )
            // HiveParser.g:981:7: KW_DROP KW_INDEX ( ifExists )? indexName= identifier KW_ON tab= tableName
            {
            KW_DROP165=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropIndexStatement3625); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP165);


            KW_INDEX166=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_dropIndexStatement3627); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_INDEX.add(KW_INDEX166);


            // HiveParser.g:981:24: ( ifExists )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==KW_IF) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // HiveParser.g:981:24: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropIndexStatement3629);
                    ifExists167=ifExists();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ifExists.add(ifExists167.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_identifier_in_dropIndexStatement3634);
            indexName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(indexName.getTree());

            KW_ON168=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_dropIndexStatement3636); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON168);


            pushFollow(FOLLOW_tableName_in_dropIndexStatement3640);
            tab=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(tab.getTree());

            // AST REWRITE
            // elements: indexName, tab, ifExists
            // token labels: 
            // rule labels: tab, indexName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.tree:null);
            RewriteRuleSubtreeStream stream_indexName=new RewriteRuleSubtreeStream(adaptor,"rule indexName",indexName!=null?indexName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 982:5: -> ^( TOK_DROPINDEX $indexName $tab ( ifExists )? )
            {
                // HiveParser.g:982:7: ^( TOK_DROPINDEX $indexName $tab ( ifExists )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DROPINDEX, "TOK_DROPINDEX")
                , root_1);

                adaptor.addChild(root_1, stream_indexName.nextTree());

                adaptor.addChild(root_1, stream_tab.nextTree());

                // HiveParser.g:982:39: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.nextTree());

                }
                stream_ifExists.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dropIndexStatement"


    public static class dropTableStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dropTableStatement"
    // HiveParser.g:985:1: dropTableStatement : KW_DROP KW_TABLE ( ifExists )? tableName ( KW_PURGE )? ( replicationClause )? -> ^( TOK_DROPTABLE tableName ( ifExists )? ( KW_PURGE )? ( replicationClause )? ) ;
    public final HiveParser.dropTableStatement_return dropTableStatement() throws RecognitionException {
        HiveParser.dropTableStatement_return retval = new HiveParser.dropTableStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_DROP169=null;
        Token KW_TABLE170=null;
        Token KW_PURGE173=null;
        HiveParser.ifExists_return ifExists171 =null;

        HiveParser_FromClauseParser.tableName_return tableName172 =null;

        HiveParser.replicationClause_return replicationClause174 =null;


        CommonTree KW_DROP169_tree=null;
        CommonTree KW_TABLE170_tree=null;
        CommonTree KW_PURGE173_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_PURGE=new RewriteRuleTokenStream(adaptor,"token KW_PURGE");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
        RewriteRuleSubtreeStream stream_replicationClause=new RewriteRuleSubtreeStream(adaptor,"rule replicationClause");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         pushMsg("drop statement", state); 
        try {
            // HiveParser.g:988:5: ( KW_DROP KW_TABLE ( ifExists )? tableName ( KW_PURGE )? ( replicationClause )? -> ^( TOK_DROPTABLE tableName ( ifExists )? ( KW_PURGE )? ( replicationClause )? ) )
            // HiveParser.g:988:7: KW_DROP KW_TABLE ( ifExists )? tableName ( KW_PURGE )? ( replicationClause )?
            {
            KW_DROP169=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropTableStatement3685); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP169);


            KW_TABLE170=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_dropTableStatement3687); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE170);


            // HiveParser.g:988:24: ( ifExists )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==KW_IF) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // HiveParser.g:988:24: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropTableStatement3689);
                    ifExists171=ifExists();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ifExists.add(ifExists171.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_tableName_in_dropTableStatement3692);
            tableName172=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(tableName172.getTree());

            // HiveParser.g:988:44: ( KW_PURGE )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==KW_PURGE) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // HiveParser.g:988:44: KW_PURGE
                    {
                    KW_PURGE173=(Token)match(input,KW_PURGE,FOLLOW_KW_PURGE_in_dropTableStatement3694); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_PURGE.add(KW_PURGE173);


                    }
                    break;

            }


            // HiveParser.g:988:54: ( replicationClause )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==KW_FOR) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // HiveParser.g:988:54: replicationClause
                    {
                    pushFollow(FOLLOW_replicationClause_in_dropTableStatement3697);
                    replicationClause174=replicationClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_replicationClause.add(replicationClause174.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: ifExists, tableName, replicationClause, KW_PURGE
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 989:5: -> ^( TOK_DROPTABLE tableName ( ifExists )? ( KW_PURGE )? ( replicationClause )? )
            {
                // HiveParser.g:989:8: ^( TOK_DROPTABLE tableName ( ifExists )? ( KW_PURGE )? ( replicationClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DROPTABLE, "TOK_DROPTABLE")
                , root_1);

                adaptor.addChild(root_1, stream_tableName.nextTree());

                // HiveParser.g:989:34: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.nextTree());

                }
                stream_ifExists.reset();

                // HiveParser.g:989:44: ( KW_PURGE )?
                if ( stream_KW_PURGE.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_KW_PURGE.nextNode()
                    );

                }
                stream_KW_PURGE.reset();

                // HiveParser.g:989:54: ( replicationClause )?
                if ( stream_replicationClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_replicationClause.nextTree());

                }
                stream_replicationClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dropTableStatement"


    public static class alterStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatement"
    // HiveParser.g:992:1: alterStatement : ( KW_ALTER KW_TABLE tableName alterTableStatementSuffix -> ^( TOK_ALTERTABLE tableName alterTableStatementSuffix ) | KW_ALTER KW_VIEW tableName ( KW_AS )? alterViewStatementSuffix -> ^( TOK_ALTERVIEW tableName alterViewStatementSuffix ) | KW_ALTER KW_INDEX alterIndexStatementSuffix -> alterIndexStatementSuffix | KW_ALTER ( KW_DATABASE | KW_SCHEMA ) alterDatabaseStatementSuffix -> alterDatabaseStatementSuffix );
    public final HiveParser.alterStatement_return alterStatement() throws RecognitionException {
        HiveParser.alterStatement_return retval = new HiveParser.alterStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_ALTER175=null;
        Token KW_TABLE176=null;
        Token KW_ALTER179=null;
        Token KW_VIEW180=null;
        Token KW_AS182=null;
        Token KW_ALTER184=null;
        Token KW_INDEX185=null;
        Token KW_ALTER187=null;
        Token KW_DATABASE188=null;
        Token KW_SCHEMA189=null;
        HiveParser_FromClauseParser.tableName_return tableName177 =null;

        HiveParser.alterTableStatementSuffix_return alterTableStatementSuffix178 =null;

        HiveParser_FromClauseParser.tableName_return tableName181 =null;

        HiveParser.alterViewStatementSuffix_return alterViewStatementSuffix183 =null;

        HiveParser.alterIndexStatementSuffix_return alterIndexStatementSuffix186 =null;

        HiveParser.alterDatabaseStatementSuffix_return alterDatabaseStatementSuffix190 =null;


        CommonTree KW_ALTER175_tree=null;
        CommonTree KW_TABLE176_tree=null;
        CommonTree KW_ALTER179_tree=null;
        CommonTree KW_VIEW180_tree=null;
        CommonTree KW_AS182_tree=null;
        CommonTree KW_ALTER184_tree=null;
        CommonTree KW_INDEX185_tree=null;
        CommonTree KW_ALTER187_tree=null;
        CommonTree KW_DATABASE188_tree=null;
        CommonTree KW_SCHEMA189_tree=null;
        RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
        RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
        RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_KW_ALTER=new RewriteRuleTokenStream(adaptor,"token KW_ALTER");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleSubtreeStream stream_alterTableStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterTableStatementSuffix");
        RewriteRuleSubtreeStream stream_alterViewStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterViewStatementSuffix");
        RewriteRuleSubtreeStream stream_alterDatabaseStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterDatabaseStatementSuffix");
        RewriteRuleSubtreeStream stream_alterIndexStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterIndexStatementSuffix");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         pushMsg("alter statement", state); 
        try {
            // HiveParser.g:995:5: ( KW_ALTER KW_TABLE tableName alterTableStatementSuffix -> ^( TOK_ALTERTABLE tableName alterTableStatementSuffix ) | KW_ALTER KW_VIEW tableName ( KW_AS )? alterViewStatementSuffix -> ^( TOK_ALTERVIEW tableName alterViewStatementSuffix ) | KW_ALTER KW_INDEX alterIndexStatementSuffix -> alterIndexStatementSuffix | KW_ALTER ( KW_DATABASE | KW_SCHEMA ) alterDatabaseStatementSuffix -> alterDatabaseStatementSuffix )
            int alt57=4;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==KW_ALTER) ) {
                switch ( input.LA(2) ) {
                case KW_TABLE:
                    {
                    alt57=1;
                    }
                    break;
                case KW_VIEW:
                    {
                    alt57=2;
                    }
                    break;
                case KW_INDEX:
                    {
                    alt57=3;
                    }
                    break;
                case KW_DATABASE:
                case KW_SCHEMA:
                    {
                    alt57=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 57, 1, input);

                    throw nvae;

                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;

            }
            switch (alt57) {
                case 1 :
                    // HiveParser.g:995:7: KW_ALTER KW_TABLE tableName alterTableStatementSuffix
                    {
                    KW_ALTER175=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_alterStatement3746); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ALTER.add(KW_ALTER175);


                    KW_TABLE176=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_alterStatement3748); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE176);


                    pushFollow(FOLLOW_tableName_in_alterStatement3750);
                    tableName177=tableName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableName.add(tableName177.getTree());

                    pushFollow(FOLLOW_alterTableStatementSuffix_in_alterStatement3752);
                    alterTableStatementSuffix178=alterTableStatementSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alterTableStatementSuffix.add(alterTableStatementSuffix178.getTree());

                    // AST REWRITE
                    // elements: alterTableStatementSuffix, tableName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 995:61: -> ^( TOK_ALTERTABLE tableName alterTableStatementSuffix )
                    {
                        // HiveParser.g:995:64: ^( TOK_ALTERTABLE tableName alterTableStatementSuffix )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERTABLE, "TOK_ALTERTABLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableName.nextTree());

                        adaptor.addChild(root_1, stream_alterTableStatementSuffix.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:996:7: KW_ALTER KW_VIEW tableName ( KW_AS )? alterViewStatementSuffix
                    {
                    KW_ALTER179=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_alterStatement3770); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ALTER.add(KW_ALTER179);


                    KW_VIEW180=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_alterStatement3772); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_VIEW.add(KW_VIEW180);


                    pushFollow(FOLLOW_tableName_in_alterStatement3774);
                    tableName181=tableName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableName.add(tableName181.getTree());

                    // HiveParser.g:996:34: ( KW_AS )?
                    int alt55=2;
                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==KW_AS) ) {
                        alt55=1;
                    }
                    switch (alt55) {
                        case 1 :
                            // HiveParser.g:996:34: KW_AS
                            {
                            KW_AS182=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_alterStatement3776); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS182);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_alterViewStatementSuffix_in_alterStatement3779);
                    alterViewStatementSuffix183=alterViewStatementSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alterViewStatementSuffix.add(alterViewStatementSuffix183.getTree());

                    // AST REWRITE
                    // elements: alterViewStatementSuffix, tableName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 996:66: -> ^( TOK_ALTERVIEW tableName alterViewStatementSuffix )
                    {
                        // HiveParser.g:996:69: ^( TOK_ALTERVIEW tableName alterViewStatementSuffix )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERVIEW, "TOK_ALTERVIEW")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableName.nextTree());

                        adaptor.addChild(root_1, stream_alterViewStatementSuffix.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:997:7: KW_ALTER KW_INDEX alterIndexStatementSuffix
                    {
                    KW_ALTER184=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_alterStatement3797); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ALTER.add(KW_ALTER184);


                    KW_INDEX185=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_alterStatement3799); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_INDEX.add(KW_INDEX185);


                    pushFollow(FOLLOW_alterIndexStatementSuffix_in_alterStatement3801);
                    alterIndexStatementSuffix186=alterIndexStatementSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alterIndexStatementSuffix.add(alterIndexStatementSuffix186.getTree());

                    // AST REWRITE
                    // elements: alterIndexStatementSuffix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 997:51: -> alterIndexStatementSuffix
                    {
                        adaptor.addChild(root_0, stream_alterIndexStatementSuffix.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // HiveParser.g:998:7: KW_ALTER ( KW_DATABASE | KW_SCHEMA ) alterDatabaseStatementSuffix
                    {
                    KW_ALTER187=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_alterStatement3813); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ALTER.add(KW_ALTER187);


                    // HiveParser.g:998:16: ( KW_DATABASE | KW_SCHEMA )
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( (LA56_0==KW_DATABASE) ) {
                        alt56=1;
                    }
                    else if ( (LA56_0==KW_SCHEMA) ) {
                        alt56=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 56, 0, input);

                        throw nvae;

                    }
                    switch (alt56) {
                        case 1 :
                            // HiveParser.g:998:17: KW_DATABASE
                            {
                            KW_DATABASE188=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_alterStatement3816); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE188);


                            }
                            break;
                        case 2 :
                            // HiveParser.g:998:29: KW_SCHEMA
                            {
                            KW_SCHEMA189=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_alterStatement3818); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA189);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_alterDatabaseStatementSuffix_in_alterStatement3821);
                    alterDatabaseStatementSuffix190=alterDatabaseStatementSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alterDatabaseStatementSuffix.add(alterDatabaseStatementSuffix190.getTree());

                    // AST REWRITE
                    // elements: alterDatabaseStatementSuffix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 998:69: -> alterDatabaseStatementSuffix
                    {
                        adaptor.addChild(root_0, stream_alterDatabaseStatementSuffix.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatement"


    public static class alterTableStatementSuffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterTableStatementSuffix"
    // HiveParser.g:1001:1: alterTableStatementSuffix : ( ( alterStatementSuffixRename[true] )=> alterStatementSuffixRename[true] | alterStatementSuffixDropPartitions[true] | alterStatementSuffixAddPartitions[true] | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterStatementSuffixSkewedby | alterStatementSuffixExchangePartition | alterStatementPartitionKeyType | ( partitionSpec )? alterTblPartitionStatementSuffix -> alterTblPartitionStatementSuffix ( partitionSpec )? );
    public final HiveParser.alterTableStatementSuffix_return alterTableStatementSuffix() throws RecognitionException {
        HiveParser.alterTableStatementSuffix_return retval = new HiveParser.alterTableStatementSuffix_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.alterStatementSuffixRename_return alterStatementSuffixRename191 =null;

        HiveParser.alterStatementSuffixDropPartitions_return alterStatementSuffixDropPartitions192 =null;

        HiveParser.alterStatementSuffixAddPartitions_return alterStatementSuffixAddPartitions193 =null;

        HiveParser.alterStatementSuffixTouch_return alterStatementSuffixTouch194 =null;

        HiveParser.alterStatementSuffixArchive_return alterStatementSuffixArchive195 =null;

        HiveParser.alterStatementSuffixUnArchive_return alterStatementSuffixUnArchive196 =null;

        HiveParser.alterStatementSuffixProperties_return alterStatementSuffixProperties197 =null;

        HiveParser.alterStatementSuffixSkewedby_return alterStatementSuffixSkewedby198 =null;

        HiveParser.alterStatementSuffixExchangePartition_return alterStatementSuffixExchangePartition199 =null;

        HiveParser.alterStatementPartitionKeyType_return alterStatementPartitionKeyType200 =null;

        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec201 =null;

        HiveParser.alterTblPartitionStatementSuffix_return alterTblPartitionStatementSuffix202 =null;


        RewriteRuleSubtreeStream stream_alterTblPartitionStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterTblPartitionStatementSuffix");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         pushMsg("alter table statement", state); 
        try {
            // HiveParser.g:1004:5: ( ( alterStatementSuffixRename[true] )=> alterStatementSuffixRename[true] | alterStatementSuffixDropPartitions[true] | alterStatementSuffixAddPartitions[true] | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterStatementSuffixSkewedby | alterStatementSuffixExchangePartition | alterStatementPartitionKeyType | ( partitionSpec )? alterTblPartitionStatementSuffix -> alterTblPartitionStatementSuffix ( partitionSpec )? )
            int alt59=11;
            switch ( input.LA(1) ) {
            case KW_RENAME:
                {
                int LA59_1 = input.LA(2);

                if ( (LA59_1==KW_TO) ) {
                    int LA59_22 = input.LA(3);

                    if ( (LA59_22==Identifier) && (synpred3_HiveParser())) {
                        alt59=1;
                    }
                    else if ( ((LA59_22 >= KW_ADD && LA59_22 <= KW_AFTER)||LA59_22==KW_ANALYZE||LA59_22==KW_ARCHIVE||LA59_22==KW_ASC||LA59_22==KW_BEFORE||(LA59_22 >= KW_BUCKET && LA59_22 <= KW_BUCKETS)||LA59_22==KW_CASCADE||LA59_22==KW_CHANGE||(LA59_22 >= KW_CLUSTER && LA59_22 <= KW_COLLECTION)||(LA59_22 >= KW_COLUMNS && LA59_22 <= KW_CONCATENATE)||LA59_22==KW_CONTINUE||LA59_22==KW_DATA||LA59_22==KW_DATABASES||(LA59_22 >= KW_DATETIME && LA59_22 <= KW_DBPROPERTIES)||(LA59_22 >= KW_DEFERRED && LA59_22 <= KW_DEFINED)||(LA59_22 >= KW_DELIMITED && LA59_22 <= KW_DESC)||(LA59_22 >= KW_DIRECTORIES && LA59_22 <= KW_DISABLE)||LA59_22==KW_DISTRIBUTE||LA59_22==KW_ELEM_TYPE||LA59_22==KW_ENABLE||LA59_22==KW_ESCAPED||LA59_22==KW_EXCLUSIVE||(LA59_22 >= KW_EXPLAIN && LA59_22 <= KW_EXPORT)||(LA59_22 >= KW_FIELDS && LA59_22 <= KW_FIRST)||(LA59_22 >= KW_FORMAT && LA59_22 <= KW_FORMATTED)||LA59_22==KW_FUNCTIONS||(LA59_22 >= KW_HOLD_DDLTIME && LA59_22 <= KW_IDXPROPERTIES)||LA59_22==KW_IGNORE||(LA59_22 >= KW_INDEX && LA59_22 <= KW_INDEXES)||(LA59_22 >= KW_INPATH && LA59_22 <= KW_INPUTFORMAT)||(LA59_22 >= KW_ITEMS && LA59_22 <= KW_JAR)||(LA59_22 >= KW_KEYS && LA59_22 <= KW_KEY_TYPE)||(LA59_22 >= KW_LIMIT && LA59_22 <= KW_LOAD)||(LA59_22 >= KW_LOCATION && LA59_22 <= KW_LONG)||(LA59_22 >= KW_MAPJOIN && LA59_22 <= KW_MONTH)||LA59_22==KW_MSCK||LA59_22==KW_NOSCAN||LA59_22==KW_NO_DROP||LA59_22==KW_OFFLINE||LA59_22==KW_OPTION||(LA59_22 >= KW_OUTPUTDRIVER && LA59_22 <= KW_OUTPUTFORMAT)||(LA59_22 >= KW_OVERWRITE && LA59_22 <= KW_OWNER)||(LA59_22 >= KW_PARTITIONED && LA59_22 <= KW_PARTITIONS)||LA59_22==KW_PLUS||(LA59_22 >= KW_PRETTY && LA59_22 <= KW_PRINCIPALS)||(LA59_22 >= KW_PROTECTION && LA59_22 <= KW_PURGE)||(LA59_22 >= KW_READ && LA59_22 <= KW_READONLY)||(LA59_22 >= KW_REBUILD && LA59_22 <= KW_RECORDWRITER)||(LA59_22 >= KW_REGEXP && LA59_22 <= KW_RESTRICT)||LA59_22==KW_REWRITE||(LA59_22 >= KW_RLIKE && LA59_22 <= KW_ROLES)||(LA59_22 >= KW_SCHEMA && LA59_22 <= KW_SECOND)||(LA59_22 >= KW_SEMI && LA59_22 <= KW_SERVER)||(LA59_22 >= KW_SETS && LA59_22 <= KW_SKEWED)||(LA59_22 >= KW_SORT && LA59_22 <= KW_STRUCT)||LA59_22==KW_TABLES||(LA59_22 >= KW_TBLPROPERTIES && LA59_22 <= KW_TERMINATED)||LA59_22==KW_TINYINT||(LA59_22 >= KW_TOUCH && LA59_22 <= KW_TRANSACTIONS)||LA59_22==KW_UNARCHIVE||LA59_22==KW_UNDO||LA59_22==KW_UNIONTYPE||(LA59_22 >= KW_UNLOCK && LA59_22 <= KW_UNSIGNED)||(LA59_22 >= KW_URI && LA59_22 <= KW_USE)||(LA59_22 >= KW_UTC && LA59_22 <= KW_UTCTIMESTAMP)||LA59_22==KW_VALUE_TYPE||LA59_22==KW_VIEW||LA59_22==KW_WHILE||LA59_22==KW_YEAR) && (synpred3_HiveParser())) {
                        alt59=1;
                    }
                    else if ( (LA59_22==KW_PARTITION) ) {
                        int LA59_40 = input.LA(4);

                        if ( (synpred3_HiveParser()) ) {
                            alt59=1;
                        }
                        else if ( (true) ) {
                            alt59=11;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 59, 40, input);

                            throw nvae;

                        }
                    }
                    else if ( ((LA59_22 >= KW_ALL && LA59_22 <= KW_ALTER)||(LA59_22 >= KW_ARRAY && LA59_22 <= KW_AS)||LA59_22==KW_AUTHORIZATION||(LA59_22 >= KW_BETWEEN && LA59_22 <= KW_BOTH)||LA59_22==KW_BY||LA59_22==KW_CREATE||LA59_22==KW_CUBE||(LA59_22 >= KW_CURRENT_DATE && LA59_22 <= KW_CURSOR)||LA59_22==KW_DATE||LA59_22==KW_DECIMAL||LA59_22==KW_DELETE||LA59_22==KW_DESCRIBE||(LA59_22 >= KW_DOUBLE && LA59_22 <= KW_DROP)||LA59_22==KW_EXISTS||(LA59_22 >= KW_EXTERNAL && LA59_22 <= KW_FETCH)||LA59_22==KW_FLOAT||LA59_22==KW_FOR||LA59_22==KW_FULL||(LA59_22 >= KW_GRANT && LA59_22 <= KW_GROUPING)||(LA59_22 >= KW_IMPORT && LA59_22 <= KW_IN)||LA59_22==KW_INNER||(LA59_22 >= KW_INSERT && LA59_22 <= KW_INTERSECT)||(LA59_22 >= KW_INTO && LA59_22 <= KW_IS)||(LA59_22 >= KW_LATERAL && LA59_22 <= KW_LEFT)||LA59_22==KW_LIKE||LA59_22==KW_LOCAL||LA59_22==KW_NONE||(LA59_22 >= KW_NULL && LA59_22 <= KW_OF)||(LA59_22 >= KW_ORDER && LA59_22 <= KW_OUTER)||LA59_22==KW_PERCENT||LA59_22==KW_PROCEDURE||LA59_22==KW_RANGE||LA59_22==KW_READS||LA59_22==KW_REVOKE||LA59_22==KW_RIGHT||(LA59_22 >= KW_ROLLUP && LA59_22 <= KW_ROWS)||LA59_22==KW_SET||LA59_22==KW_SMALLINT||LA59_22==KW_TABLE||LA59_22==KW_TIMESTAMP||LA59_22==KW_TO||(LA59_22 >= KW_TRIGGER && LA59_22 <= KW_TRUNCATE)||LA59_22==KW_UNION||LA59_22==KW_UPDATE||(LA59_22 >= KW_USER && LA59_22 <= KW_USING)||LA59_22==KW_VALUES||LA59_22==KW_WITH) && (synpred3_HiveParser())) {
                        alt59=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 59, 22, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 59, 1, input);

                    throw nvae;

                }
                }
                break;
            case KW_DROP:
                {
                alt59=2;
                }
                break;
            case KW_ADD:
                {
                int LA59_3 = input.LA(2);

                if ( (LA59_3==KW_IF||LA59_3==KW_PARTITION) ) {
                    alt59=3;
                }
                else if ( (LA59_3==KW_COLUMNS) ) {
                    alt59=11;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 59, 3, input);

                    throw nvae;

                }
                }
                break;
            case KW_TOUCH:
                {
                alt59=4;
                }
                break;
            case KW_ARCHIVE:
                {
                alt59=5;
                }
                break;
            case KW_UNARCHIVE:
                {
                alt59=6;
                }
                break;
            case KW_SET:
                {
                int LA59_7 = input.LA(2);

                if ( (LA59_7==KW_TBLPROPERTIES) ) {
                    alt59=7;
                }
                else if ( (LA59_7==KW_FILEFORMAT||LA59_7==KW_LOCATION||(LA59_7 >= KW_SERDE && LA59_7 <= KW_SERDEPROPERTIES)||LA59_7==KW_SKEWED) ) {
                    alt59=11;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 59, 7, input);

                    throw nvae;

                }
                }
                break;
            case KW_UNSET:
                {
                alt59=7;
                }
                break;
            case KW_SKEWED:
                {
                alt59=8;
                }
                break;
            case KW_NOT:
                {
                int LA59_10 = input.LA(2);

                if ( (LA59_10==KW_SKEWED||LA59_10==KW_STORED) ) {
                    alt59=8;
                }
                else if ( (LA59_10==KW_CLUSTERED||LA59_10==KW_SORTED) ) {
                    alt59=11;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 59, 10, input);

                    throw nvae;

                }
                }
                break;
            case KW_EXCHANGE:
                {
                alt59=9;
                }
                break;
            case KW_PARTITION:
                {
                int LA59_12 = input.LA(2);

                if ( (LA59_12==KW_COLUMN) ) {
                    alt59=10;
                }
                else if ( (LA59_12==LPAREN) ) {
                    alt59=11;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 59, 12, input);

                    throw nvae;

                }
                }
                break;
            case KW_CHANGE:
            case KW_CLUSTERED:
            case KW_COMPACT:
            case KW_CONCATENATE:
            case KW_DISABLE:
            case KW_ENABLE:
            case KW_INTO:
            case KW_REPLACE:
            case KW_UPDATE:
                {
                alt59=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;

            }

            switch (alt59) {
                case 1 :
                    // HiveParser.g:1004:7: ( alterStatementSuffixRename[true] )=> alterStatementSuffixRename[true]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixRename_in_alterTableStatementSuffix3859);
                    alterStatementSuffixRename191=alterStatementSuffixRename(true);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixRename191.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:1005:7: alterStatementSuffixDropPartitions[true]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixDropPartitions_in_alterTableStatementSuffix3868);
                    alterStatementSuffixDropPartitions192=alterStatementSuffixDropPartitions(true);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixDropPartitions192.getTree());

                    }
                    break;
                case 3 :
                    // HiveParser.g:1006:7: alterStatementSuffixAddPartitions[true]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixAddPartitions_in_alterTableStatementSuffix3877);
                    alterStatementSuffixAddPartitions193=alterStatementSuffixAddPartitions(true);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixAddPartitions193.getTree());

                    }
                    break;
                case 4 :
                    // HiveParser.g:1007:7: alterStatementSuffixTouch
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixTouch_in_alterTableStatementSuffix3886);
                    alterStatementSuffixTouch194=alterStatementSuffixTouch();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixTouch194.getTree());

                    }
                    break;
                case 5 :
                    // HiveParser.g:1008:7: alterStatementSuffixArchive
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixArchive_in_alterTableStatementSuffix3894);
                    alterStatementSuffixArchive195=alterStatementSuffixArchive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixArchive195.getTree());

                    }
                    break;
                case 6 :
                    // HiveParser.g:1009:7: alterStatementSuffixUnArchive
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixUnArchive_in_alterTableStatementSuffix3902);
                    alterStatementSuffixUnArchive196=alterStatementSuffixUnArchive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixUnArchive196.getTree());

                    }
                    break;
                case 7 :
                    // HiveParser.g:1010:7: alterStatementSuffixProperties
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixProperties_in_alterTableStatementSuffix3910);
                    alterStatementSuffixProperties197=alterStatementSuffixProperties();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixProperties197.getTree());

                    }
                    break;
                case 8 :
                    // HiveParser.g:1011:7: alterStatementSuffixSkewedby
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixSkewedby_in_alterTableStatementSuffix3918);
                    alterStatementSuffixSkewedby198=alterStatementSuffixSkewedby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixSkewedby198.getTree());

                    }
                    break;
                case 9 :
                    // HiveParser.g:1012:7: alterStatementSuffixExchangePartition
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixExchangePartition_in_alterTableStatementSuffix3926);
                    alterStatementSuffixExchangePartition199=alterStatementSuffixExchangePartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixExchangePartition199.getTree());

                    }
                    break;
                case 10 :
                    // HiveParser.g:1013:7: alterStatementPartitionKeyType
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementPartitionKeyType_in_alterTableStatementSuffix3934);
                    alterStatementPartitionKeyType200=alterStatementPartitionKeyType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementPartitionKeyType200.getTree());

                    }
                    break;
                case 11 :
                    // HiveParser.g:1014:7: ( partitionSpec )? alterTblPartitionStatementSuffix
                    {
                    // HiveParser.g:1014:7: ( partitionSpec )?
                    int alt58=2;
                    int LA58_0 = input.LA(1);

                    if ( (LA58_0==KW_PARTITION) ) {
                        alt58=1;
                    }
                    switch (alt58) {
                        case 1 :
                            // HiveParser.g:1014:7: partitionSpec
                            {
                            pushFollow(FOLLOW_partitionSpec_in_alterTableStatementSuffix3942);
                            partitionSpec201=partitionSpec();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec201.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_alterTblPartitionStatementSuffix_in_alterTableStatementSuffix3945);
                    alterTblPartitionStatementSuffix202=alterTblPartitionStatementSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alterTblPartitionStatementSuffix.add(alterTblPartitionStatementSuffix202.getTree());

                    // AST REWRITE
                    // elements: alterTblPartitionStatementSuffix, partitionSpec
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1014:55: -> alterTblPartitionStatementSuffix ( partitionSpec )?
                    {
                        adaptor.addChild(root_0, stream_alterTblPartitionStatementSuffix.nextTree());

                        // HiveParser.g:1014:91: ( partitionSpec )?
                        if ( stream_partitionSpec.hasNext() ) {
                            adaptor.addChild(root_0, stream_partitionSpec.nextTree());

                        }
                        stream_partitionSpec.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterTableStatementSuffix"


    public static class alterTblPartitionStatementSuffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterTblPartitionStatementSuffix"
    // HiveParser.g:1017:1: alterTblPartitionStatementSuffix : ( alterStatementSuffixFileFormat | alterStatementSuffixLocation | alterStatementSuffixProtectMode | alterStatementSuffixMergeFiles | alterStatementSuffixSerdeProperties | alterStatementSuffixRenamePart | alterStatementSuffixBucketNum | alterTblPartitionStatementSuffixSkewedLocation | alterStatementSuffixClusterbySortby | alterStatementSuffixCompact | alterStatementSuffixUpdateStatsCol | alterStatementSuffixRenameCol | alterStatementSuffixAddCol );
    public final HiveParser.alterTblPartitionStatementSuffix_return alterTblPartitionStatementSuffix() throws RecognitionException {
        HiveParser.alterTblPartitionStatementSuffix_return retval = new HiveParser.alterTblPartitionStatementSuffix_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.alterStatementSuffixFileFormat_return alterStatementSuffixFileFormat203 =null;

        HiveParser.alterStatementSuffixLocation_return alterStatementSuffixLocation204 =null;

        HiveParser.alterStatementSuffixProtectMode_return alterStatementSuffixProtectMode205 =null;

        HiveParser.alterStatementSuffixMergeFiles_return alterStatementSuffixMergeFiles206 =null;

        HiveParser.alterStatementSuffixSerdeProperties_return alterStatementSuffixSerdeProperties207 =null;

        HiveParser.alterStatementSuffixRenamePart_return alterStatementSuffixRenamePart208 =null;

        HiveParser.alterStatementSuffixBucketNum_return alterStatementSuffixBucketNum209 =null;

        HiveParser.alterTblPartitionStatementSuffixSkewedLocation_return alterTblPartitionStatementSuffixSkewedLocation210 =null;

        HiveParser.alterStatementSuffixClusterbySortby_return alterStatementSuffixClusterbySortby211 =null;

        HiveParser.alterStatementSuffixCompact_return alterStatementSuffixCompact212 =null;

        HiveParser.alterStatementSuffixUpdateStatsCol_return alterStatementSuffixUpdateStatsCol213 =null;

        HiveParser.alterStatementSuffixRenameCol_return alterStatementSuffixRenameCol214 =null;

        HiveParser.alterStatementSuffixAddCol_return alterStatementSuffixAddCol215 =null;



        pushMsg("alter table partition statement suffix", state);
        try {
            // HiveParser.g:1020:3: ( alterStatementSuffixFileFormat | alterStatementSuffixLocation | alterStatementSuffixProtectMode | alterStatementSuffixMergeFiles | alterStatementSuffixSerdeProperties | alterStatementSuffixRenamePart | alterStatementSuffixBucketNum | alterTblPartitionStatementSuffixSkewedLocation | alterStatementSuffixClusterbySortby | alterStatementSuffixCompact | alterStatementSuffixUpdateStatsCol | alterStatementSuffixRenameCol | alterStatementSuffixAddCol )
            int alt60=13;
            switch ( input.LA(1) ) {
            case KW_SET:
                {
                switch ( input.LA(2) ) {
                case KW_FILEFORMAT:
                    {
                    alt60=1;
                    }
                    break;
                case KW_LOCATION:
                    {
                    alt60=2;
                    }
                    break;
                case KW_SERDE:
                case KW_SERDEPROPERTIES:
                    {
                    alt60=5;
                    }
                    break;
                case KW_SKEWED:
                    {
                    alt60=8;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 60, 1, input);

                    throw nvae;

                }

                }
                break;
            case KW_DISABLE:
            case KW_ENABLE:
                {
                alt60=3;
                }
                break;
            case KW_CONCATENATE:
                {
                alt60=4;
                }
                break;
            case KW_RENAME:
                {
                alt60=6;
                }
                break;
            case KW_INTO:
                {
                alt60=7;
                }
                break;
            case KW_CLUSTERED:
            case KW_NOT:
                {
                alt60=9;
                }
                break;
            case KW_COMPACT:
                {
                alt60=10;
                }
                break;
            case KW_UPDATE:
                {
                alt60=11;
                }
                break;
            case KW_CHANGE:
                {
                alt60=12;
                }
                break;
            case KW_ADD:
            case KW_REPLACE:
                {
                alt60=13;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;

            }

            switch (alt60) {
                case 1 :
                    // HiveParser.g:1020:5: alterStatementSuffixFileFormat
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixFileFormat_in_alterTblPartitionStatementSuffix3977);
                    alterStatementSuffixFileFormat203=alterStatementSuffixFileFormat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixFileFormat203.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:1021:5: alterStatementSuffixLocation
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixLocation_in_alterTblPartitionStatementSuffix3983);
                    alterStatementSuffixLocation204=alterStatementSuffixLocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixLocation204.getTree());

                    }
                    break;
                case 3 :
                    // HiveParser.g:1022:5: alterStatementSuffixProtectMode
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixProtectMode_in_alterTblPartitionStatementSuffix3989);
                    alterStatementSuffixProtectMode205=alterStatementSuffixProtectMode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixProtectMode205.getTree());

                    }
                    break;
                case 4 :
                    // HiveParser.g:1023:5: alterStatementSuffixMergeFiles
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixMergeFiles_in_alterTblPartitionStatementSuffix3995);
                    alterStatementSuffixMergeFiles206=alterStatementSuffixMergeFiles();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixMergeFiles206.getTree());

                    }
                    break;
                case 5 :
                    // HiveParser.g:1024:5: alterStatementSuffixSerdeProperties
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixSerdeProperties_in_alterTblPartitionStatementSuffix4001);
                    alterStatementSuffixSerdeProperties207=alterStatementSuffixSerdeProperties();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixSerdeProperties207.getTree());

                    }
                    break;
                case 6 :
                    // HiveParser.g:1025:5: alterStatementSuffixRenamePart
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixRenamePart_in_alterTblPartitionStatementSuffix4007);
                    alterStatementSuffixRenamePart208=alterStatementSuffixRenamePart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixRenamePart208.getTree());

                    }
                    break;
                case 7 :
                    // HiveParser.g:1026:5: alterStatementSuffixBucketNum
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixBucketNum_in_alterTblPartitionStatementSuffix4013);
                    alterStatementSuffixBucketNum209=alterStatementSuffixBucketNum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixBucketNum209.getTree());

                    }
                    break;
                case 8 :
                    // HiveParser.g:1027:5: alterTblPartitionStatementSuffixSkewedLocation
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterTblPartitionStatementSuffixSkewedLocation_in_alterTblPartitionStatementSuffix4019);
                    alterTblPartitionStatementSuffixSkewedLocation210=alterTblPartitionStatementSuffixSkewedLocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterTblPartitionStatementSuffixSkewedLocation210.getTree());

                    }
                    break;
                case 9 :
                    // HiveParser.g:1028:5: alterStatementSuffixClusterbySortby
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixClusterbySortby_in_alterTblPartitionStatementSuffix4025);
                    alterStatementSuffixClusterbySortby211=alterStatementSuffixClusterbySortby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixClusterbySortby211.getTree());

                    }
                    break;
                case 10 :
                    // HiveParser.g:1029:5: alterStatementSuffixCompact
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixCompact_in_alterTblPartitionStatementSuffix4031);
                    alterStatementSuffixCompact212=alterStatementSuffixCompact();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixCompact212.getTree());

                    }
                    break;
                case 11 :
                    // HiveParser.g:1030:5: alterStatementSuffixUpdateStatsCol
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixUpdateStatsCol_in_alterTblPartitionStatementSuffix4037);
                    alterStatementSuffixUpdateStatsCol213=alterStatementSuffixUpdateStatsCol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixUpdateStatsCol213.getTree());

                    }
                    break;
                case 12 :
                    // HiveParser.g:1031:5: alterStatementSuffixRenameCol
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixRenameCol_in_alterTblPartitionStatementSuffix4043);
                    alterStatementSuffixRenameCol214=alterStatementSuffixRenameCol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixRenameCol214.getTree());

                    }
                    break;
                case 13 :
                    // HiveParser.g:1032:5: alterStatementSuffixAddCol
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixAddCol_in_alterTblPartitionStatementSuffix4049);
                    alterStatementSuffixAddCol215=alterStatementSuffixAddCol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixAddCol215.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterTblPartitionStatementSuffix"


    public static class alterStatementPartitionKeyType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementPartitionKeyType"
    // HiveParser.g:1035:1: alterStatementPartitionKeyType : KW_PARTITION KW_COLUMN LPAREN columnNameType RPAREN -> ^( TOK_ALTERTABLE_PARTCOLTYPE columnNameType ) ;
    public final HiveParser.alterStatementPartitionKeyType_return alterStatementPartitionKeyType() throws RecognitionException {
        HiveParser.alterStatementPartitionKeyType_return retval = new HiveParser.alterStatementPartitionKeyType_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_PARTITION216=null;
        Token KW_COLUMN217=null;
        Token LPAREN218=null;
        Token RPAREN220=null;
        HiveParser.columnNameType_return columnNameType219 =null;


        CommonTree KW_PARTITION216_tree=null;
        CommonTree KW_COLUMN217_tree=null;
        CommonTree LPAREN218_tree=null;
        CommonTree RPAREN220_tree=null;
        RewriteRuleTokenStream stream_KW_PARTITION=new RewriteRuleTokenStream(adaptor,"token KW_PARTITION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_COLUMN=new RewriteRuleTokenStream(adaptor,"token KW_COLUMN");
        RewriteRuleSubtreeStream stream_columnNameType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameType");
        msgs.push("alter partition key type"); 
        try {
            // HiveParser.g:1038:2: ( KW_PARTITION KW_COLUMN LPAREN columnNameType RPAREN -> ^( TOK_ALTERTABLE_PARTCOLTYPE columnNameType ) )
            // HiveParser.g:1038:4: KW_PARTITION KW_COLUMN LPAREN columnNameType RPAREN
            {
            KW_PARTITION216=(Token)match(input,KW_PARTITION,FOLLOW_KW_PARTITION_in_alterStatementPartitionKeyType4071); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_PARTITION.add(KW_PARTITION216);


            KW_COLUMN217=(Token)match(input,KW_COLUMN,FOLLOW_KW_COLUMN_in_alterStatementPartitionKeyType4073); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_COLUMN.add(KW_COLUMN217);


            LPAREN218=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alterStatementPartitionKeyType4075); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN218);


            pushFollow(FOLLOW_columnNameType_in_alterStatementPartitionKeyType4077);
            columnNameType219=columnNameType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnNameType.add(columnNameType219.getTree());

            RPAREN220=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alterStatementPartitionKeyType4079); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN220);


            // AST REWRITE
            // elements: columnNameType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1039:2: -> ^( TOK_ALTERTABLE_PARTCOLTYPE columnNameType )
            {
                // HiveParser.g:1039:5: ^( TOK_ALTERTABLE_PARTCOLTYPE columnNameType )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_PARTCOLTYPE, "TOK_ALTERTABLE_PARTCOLTYPE")
                , root_1);

                adaptor.addChild(root_1, stream_columnNameType.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {msgs.pop();}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementPartitionKeyType"


    public static class alterViewStatementSuffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterViewStatementSuffix"
    // HiveParser.g:1042:1: alterViewStatementSuffix : ( alterViewSuffixProperties | alterStatementSuffixRename[false] | alterStatementSuffixAddPartitions[false] | alterStatementSuffixDropPartitions[false] | selectStatementWithCTE );
    public final HiveParser.alterViewStatementSuffix_return alterViewStatementSuffix() throws RecognitionException {
        HiveParser.alterViewStatementSuffix_return retval = new HiveParser.alterViewStatementSuffix_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.alterViewSuffixProperties_return alterViewSuffixProperties221 =null;

        HiveParser.alterStatementSuffixRename_return alterStatementSuffixRename222 =null;

        HiveParser.alterStatementSuffixAddPartitions_return alterStatementSuffixAddPartitions223 =null;

        HiveParser.alterStatementSuffixDropPartitions_return alterStatementSuffixDropPartitions224 =null;

        HiveParser.selectStatementWithCTE_return selectStatementWithCTE225 =null;



         pushMsg("alter view statement", state); 
        try {
            // HiveParser.g:1045:5: ( alterViewSuffixProperties | alterStatementSuffixRename[false] | alterStatementSuffixAddPartitions[false] | alterStatementSuffixDropPartitions[false] | selectStatementWithCTE )
            int alt61=5;
            switch ( input.LA(1) ) {
            case KW_SET:
            case KW_UNSET:
                {
                alt61=1;
                }
                break;
            case KW_RENAME:
                {
                alt61=2;
                }
                break;
            case KW_ADD:
                {
                alt61=3;
                }
                break;
            case KW_DROP:
                {
                alt61=4;
                }
                break;
            case KW_MAP:
            case KW_REDUCE:
            case KW_SELECT:
            case KW_WITH:
                {
                alt61=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;

            }

            switch (alt61) {
                case 1 :
                    // HiveParser.g:1045:7: alterViewSuffixProperties
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterViewSuffixProperties_in_alterViewStatementSuffix4112);
                    alterViewSuffixProperties221=alterViewSuffixProperties();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterViewSuffixProperties221.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:1046:7: alterStatementSuffixRename[false]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixRename_in_alterViewStatementSuffix4120);
                    alterStatementSuffixRename222=alterStatementSuffixRename(false);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixRename222.getTree());

                    }
                    break;
                case 3 :
                    // HiveParser.g:1047:7: alterStatementSuffixAddPartitions[false]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixAddPartitions_in_alterViewStatementSuffix4129);
                    alterStatementSuffixAddPartitions223=alterStatementSuffixAddPartitions(false);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixAddPartitions223.getTree());

                    }
                    break;
                case 4 :
                    // HiveParser.g:1048:7: alterStatementSuffixDropPartitions[false]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterStatementSuffixDropPartitions_in_alterViewStatementSuffix4138);
                    alterStatementSuffixDropPartitions224=alterStatementSuffixDropPartitions(false);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixDropPartitions224.getTree());

                    }
                    break;
                case 5 :
                    // HiveParser.g:1049:7: selectStatementWithCTE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_selectStatementWithCTE_in_alterViewStatementSuffix4147);
                    selectStatementWithCTE225=selectStatementWithCTE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectStatementWithCTE225.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterViewStatementSuffix"


    public static class alterIndexStatementSuffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterIndexStatementSuffix"
    // HiveParser.g:1052:1: alterIndexStatementSuffix : indexName= identifier KW_ON tableName ( partitionSpec )? ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD tableName $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES tableName $indexName indexProperties ) ) ;
    public final HiveParser.alterIndexStatementSuffix_return alterIndexStatementSuffix() throws RecognitionException {
        HiveParser.alterIndexStatementSuffix_return retval = new HiveParser.alterIndexStatementSuffix_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_ON226=null;
        Token KW_REBUILD229=null;
        Token KW_SET230=null;
        Token KW_IDXPROPERTIES231=null;
        HiveParser_IdentifiersParser.identifier_return indexName =null;

        HiveParser_FromClauseParser.tableName_return tableName227 =null;

        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec228 =null;

        HiveParser.indexProperties_return indexProperties232 =null;


        CommonTree KW_ON226_tree=null;
        CommonTree KW_REBUILD229_tree=null;
        CommonTree KW_SET230_tree=null;
        CommonTree KW_IDXPROPERTIES231_tree=null;
        RewriteRuleTokenStream stream_KW_IDXPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_IDXPROPERTIES");
        RewriteRuleTokenStream stream_KW_REBUILD=new RewriteRuleTokenStream(adaptor,"token KW_REBUILD");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_indexProperties=new RewriteRuleSubtreeStream(adaptor,"rule indexProperties");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         pushMsg("alter index statement", state); 
        try {
            // HiveParser.g:1055:5: (indexName= identifier KW_ON tableName ( partitionSpec )? ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD tableName $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES tableName $indexName indexProperties ) ) )
            // HiveParser.g:1055:7: indexName= identifier KW_ON tableName ( partitionSpec )? ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD tableName $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES tableName $indexName indexProperties ) )
            {
            pushFollow(FOLLOW_identifier_in_alterIndexStatementSuffix4176);
            indexName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(indexName.getTree());

            KW_ON226=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_alterIndexStatementSuffix4178); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON226);


            pushFollow(FOLLOW_tableName_in_alterIndexStatementSuffix4180);
            tableName227=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(tableName227.getTree());

            // HiveParser.g:1055:44: ( partitionSpec )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==KW_PARTITION) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // HiveParser.g:1055:44: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_alterIndexStatementSuffix4182);
                    partitionSpec228=partitionSpec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec228.getTree());

                    }
                    break;

            }


            // HiveParser.g:1056:5: ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD tableName $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES tableName $indexName indexProperties ) )
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==KW_REBUILD) ) {
                alt63=1;
            }
            else if ( (LA63_0==KW_SET) ) {
                alt63=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;

            }
            switch (alt63) {
                case 1 :
                    // HiveParser.g:1057:7: KW_REBUILD
                    {
                    KW_REBUILD229=(Token)match(input,KW_REBUILD,FOLLOW_KW_REBUILD_in_alterIndexStatementSuffix4197); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_REBUILD.add(KW_REBUILD229);


                    // AST REWRITE
                    // elements: tableName, partitionSpec, indexName
                    // token labels: 
                    // rule labels: indexName, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_indexName=new RewriteRuleSubtreeStream(adaptor,"rule indexName",indexName!=null?indexName.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1058:7: -> ^( TOK_ALTERINDEX_REBUILD tableName $indexName ( partitionSpec )? )
                    {
                        // HiveParser.g:1058:9: ^( TOK_ALTERINDEX_REBUILD tableName $indexName ( partitionSpec )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERINDEX_REBUILD, "TOK_ALTERINDEX_REBUILD")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableName.nextTree());

                        adaptor.addChild(root_1, stream_indexName.nextTree());

                        // HiveParser.g:1058:55: ( partitionSpec )?
                        if ( stream_partitionSpec.hasNext() ) {
                            adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                        }
                        stream_partitionSpec.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1060:7: KW_SET KW_IDXPROPERTIES indexProperties
                    {
                    KW_SET230=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterIndexStatementSuffix4230); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET230);


                    KW_IDXPROPERTIES231=(Token)match(input,KW_IDXPROPERTIES,FOLLOW_KW_IDXPROPERTIES_in_alterIndexStatementSuffix4232); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_IDXPROPERTIES.add(KW_IDXPROPERTIES231);


                    pushFollow(FOLLOW_indexProperties_in_alterIndexStatementSuffix4240);
                    indexProperties232=indexProperties();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_indexProperties.add(indexProperties232.getTree());

                    // AST REWRITE
                    // elements: tableName, indexName, indexProperties
                    // token labels: 
                    // rule labels: indexName, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_indexName=new RewriteRuleSubtreeStream(adaptor,"rule indexName",indexName!=null?indexName.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1062:7: -> ^( TOK_ALTERINDEX_PROPERTIES tableName $indexName indexProperties )
                    {
                        // HiveParser.g:1062:9: ^( TOK_ALTERINDEX_PROPERTIES tableName $indexName indexProperties )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERINDEX_PROPERTIES, "TOK_ALTERINDEX_PROPERTIES")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableName.nextTree());

                        adaptor.addChild(root_1, stream_indexName.nextTree());

                        adaptor.addChild(root_1, stream_indexProperties.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterIndexStatementSuffix"


    public static class alterDatabaseStatementSuffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterDatabaseStatementSuffix"
    // HiveParser.g:1066:1: alterDatabaseStatementSuffix : ( alterDatabaseSuffixProperties | alterDatabaseSuffixSetOwner );
    public final HiveParser.alterDatabaseStatementSuffix_return alterDatabaseStatementSuffix() throws RecognitionException {
        HiveParser.alterDatabaseStatementSuffix_return retval = new HiveParser.alterDatabaseStatementSuffix_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.alterDatabaseSuffixProperties_return alterDatabaseSuffixProperties233 =null;

        HiveParser.alterDatabaseSuffixSetOwner_return alterDatabaseSuffixSetOwner234 =null;



         pushMsg("alter database statement", state); 
        try {
            // HiveParser.g:1069:5: ( alterDatabaseSuffixProperties | alterDatabaseSuffixSetOwner )
            int alt64=2;
            switch ( input.LA(1) ) {
            case Identifier:
                {
                int LA64_1 = input.LA(2);

                if ( (LA64_1==KW_SET) ) {
                    int LA64_4 = input.LA(3);

                    if ( (LA64_4==KW_DBPROPERTIES) ) {
                        alt64=1;
                    }
                    else if ( (LA64_4==KW_OWNER) ) {
                        alt64=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 64, 4, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 64, 1, input);

                    throw nvae;

                }
                }
                break;
            case KW_ADD:
            case KW_ADMIN:
            case KW_AFTER:
            case KW_ANALYZE:
            case KW_ARCHIVE:
            case KW_ASC:
            case KW_BEFORE:
            case KW_BUCKET:
            case KW_BUCKETS:
            case KW_CASCADE:
            case KW_CHANGE:
            case KW_CLUSTER:
            case KW_CLUSTERED:
            case KW_CLUSTERSTATUS:
            case KW_COLLECTION:
            case KW_COLUMNS:
            case KW_COMMENT:
            case KW_COMPACT:
            case KW_COMPACTIONS:
            case KW_COMPUTE:
            case KW_CONCATENATE:
            case KW_CONTINUE:
            case KW_DATA:
            case KW_DATABASES:
            case KW_DATETIME:
            case KW_DAY:
            case KW_DBPROPERTIES:
            case KW_DEFERRED:
            case KW_DEFINED:
            case KW_DELIMITED:
            case KW_DEPENDENCY:
            case KW_DESC:
            case KW_DIRECTORIES:
            case KW_DIRECTORY:
            case KW_DISABLE:
            case KW_DISTRIBUTE:
            case KW_ELEM_TYPE:
            case KW_ENABLE:
            case KW_ESCAPED:
            case KW_EXCLUSIVE:
            case KW_EXPLAIN:
            case KW_EXPORT:
            case KW_FIELDS:
            case KW_FILE:
            case KW_FILEFORMAT:
            case KW_FIRST:
            case KW_FORMAT:
            case KW_FORMATTED:
            case KW_FUNCTIONS:
            case KW_HOLD_DDLTIME:
            case KW_HOUR:
            case KW_IDXPROPERTIES:
            case KW_IGNORE:
            case KW_INDEX:
            case KW_INDEXES:
            case KW_INPATH:
            case KW_INPUTDRIVER:
            case KW_INPUTFORMAT:
            case KW_ITEMS:
            case KW_JAR:
            case KW_KEYS:
            case KW_KEY_TYPE:
            case KW_LIMIT:
            case KW_LINES:
            case KW_LOAD:
            case KW_LOCATION:
            case KW_LOCK:
            case KW_LOCKS:
            case KW_LOGICAL:
            case KW_LONG:
            case KW_MAPJOIN:
            case KW_MATERIALIZED:
            case KW_METADATA:
            case KW_MINUS:
            case KW_MINUTE:
            case KW_MONTH:
            case KW_MSCK:
            case KW_NOSCAN:
            case KW_NO_DROP:
            case KW_OFFLINE:
            case KW_OPTION:
            case KW_OUTPUTDRIVER:
            case KW_OUTPUTFORMAT:
            case KW_OVERWRITE:
            case KW_OWNER:
            case KW_PARTITIONED:
            case KW_PARTITIONS:
            case KW_PLUS:
            case KW_PRETTY:
            case KW_PRINCIPALS:
            case KW_PROTECTION:
            case KW_PURGE:
            case KW_READ:
            case KW_READONLY:
            case KW_REBUILD:
            case KW_RECORDREADER:
            case KW_RECORDWRITER:
            case KW_REGEXP:
            case KW_RELOAD:
            case KW_RENAME:
            case KW_REPAIR:
            case KW_REPLACE:
            case KW_REPLICATION:
            case KW_RESTRICT:
            case KW_REWRITE:
            case KW_RLIKE:
            case KW_ROLE:
            case KW_ROLES:
            case KW_SCHEMA:
            case KW_SCHEMAS:
            case KW_SECOND:
            case KW_SEMI:
            case KW_SERDE:
            case KW_SERDEPROPERTIES:
            case KW_SERVER:
            case KW_SETS:
            case KW_SHARED:
            case KW_SHOW:
            case KW_SHOW_DATABASE:
            case KW_SKEWED:
            case KW_SORT:
            case KW_SORTED:
            case KW_SSL:
            case KW_STATISTICS:
            case KW_STORED:
            case KW_STREAMTABLE:
            case KW_STRING:
            case KW_STRUCT:
            case KW_TABLES:
            case KW_TBLPROPERTIES:
            case KW_TEMPORARY:
            case KW_TERMINATED:
            case KW_TINYINT:
            case KW_TOUCH:
            case KW_TRANSACTIONS:
            case KW_UNARCHIVE:
            case KW_UNDO:
            case KW_UNIONTYPE:
            case KW_UNLOCK:
            case KW_UNSET:
            case KW_UNSIGNED:
            case KW_URI:
            case KW_USE:
            case KW_UTC:
            case KW_UTCTIMESTAMP:
            case KW_VALUE_TYPE:
            case KW_VIEW:
            case KW_WHILE:
            case KW_YEAR:
                {
                int LA64_2 = input.LA(2);

                if ( (LA64_2==KW_SET) ) {
                    int LA64_5 = input.LA(3);

                    if ( (LA64_5==KW_DBPROPERTIES) ) {
                        alt64=1;
                    }
                    else if ( (LA64_5==KW_OWNER) ) {
                        alt64=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 64, 5, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 64, 2, input);

                    throw nvae;

                }
                }
                break;
            case KW_ALL:
            case KW_ALTER:
            case KW_ARRAY:
            case KW_AS:
            case KW_AUTHORIZATION:
            case KW_BETWEEN:
            case KW_BIGINT:
            case KW_BINARY:
            case KW_BOOLEAN:
            case KW_BOTH:
            case KW_BY:
            case KW_CREATE:
            case KW_CUBE:
            case KW_CURRENT_DATE:
            case KW_CURRENT_TIMESTAMP:
            case KW_CURSOR:
            case KW_DATE:
            case KW_DECIMAL:
            case KW_DELETE:
            case KW_DESCRIBE:
            case KW_DOUBLE:
            case KW_DROP:
            case KW_EXISTS:
            case KW_EXTERNAL:
            case KW_FALSE:
            case KW_FETCH:
            case KW_FLOAT:
            case KW_FOR:
            case KW_FULL:
            case KW_GRANT:
            case KW_GROUP:
            case KW_GROUPING:
            case KW_IMPORT:
            case KW_IN:
            case KW_INNER:
            case KW_INSERT:
            case KW_INT:
            case KW_INTERSECT:
            case KW_INTO:
            case KW_IS:
            case KW_LATERAL:
            case KW_LEFT:
            case KW_LIKE:
            case KW_LOCAL:
            case KW_NONE:
            case KW_NULL:
            case KW_OF:
            case KW_ORDER:
            case KW_OUT:
            case KW_OUTER:
            case KW_PARTITION:
            case KW_PERCENT:
            case KW_PROCEDURE:
            case KW_RANGE:
            case KW_READS:
            case KW_REVOKE:
            case KW_RIGHT:
            case KW_ROLLUP:
            case KW_ROW:
            case KW_ROWS:
            case KW_SET:
            case KW_SMALLINT:
            case KW_TABLE:
            case KW_TIMESTAMP:
            case KW_TO:
            case KW_TRIGGER:
            case KW_TRUE:
            case KW_TRUNCATE:
            case KW_UNION:
            case KW_UPDATE:
            case KW_USER:
            case KW_USING:
            case KW_VALUES:
            case KW_WITH:
                {
                int LA64_3 = input.LA(2);

                if ( (LA64_3==KW_SET) ) {
                    int LA64_6 = input.LA(3);

                    if ( (LA64_6==KW_DBPROPERTIES) ) {
                        alt64=1;
                    }
                    else if ( (LA64_6==KW_OWNER) ) {
                        alt64=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 64, 6, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 64, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;

            }

            switch (alt64) {
                case 1 :
                    // HiveParser.g:1069:7: alterDatabaseSuffixProperties
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterDatabaseSuffixProperties_in_alterDatabaseStatementSuffix4291);
                    alterDatabaseSuffixProperties233=alterDatabaseSuffixProperties();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterDatabaseSuffixProperties233.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:1070:7: alterDatabaseSuffixSetOwner
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_alterDatabaseSuffixSetOwner_in_alterDatabaseStatementSuffix4299);
                    alterDatabaseSuffixSetOwner234=alterDatabaseSuffixSetOwner();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterDatabaseSuffixSetOwner234.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterDatabaseStatementSuffix"


    public static class alterDatabaseSuffixProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterDatabaseSuffixProperties"
    // HiveParser.g:1073:1: alterDatabaseSuffixProperties : name= identifier KW_SET KW_DBPROPERTIES dbProperties -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties ) ;
    public final HiveParser.alterDatabaseSuffixProperties_return alterDatabaseSuffixProperties() throws RecognitionException {
        HiveParser.alterDatabaseSuffixProperties_return retval = new HiveParser.alterDatabaseSuffixProperties_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_SET235=null;
        Token KW_DBPROPERTIES236=null;
        HiveParser_IdentifiersParser.identifier_return name =null;

        HiveParser.dbProperties_return dbProperties237 =null;


        CommonTree KW_SET235_tree=null;
        CommonTree KW_DBPROPERTIES236_tree=null;
        RewriteRuleTokenStream stream_KW_DBPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_DBPROPERTIES");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_dbProperties=new RewriteRuleSubtreeStream(adaptor,"rule dbProperties");
         pushMsg("alter database properties statement", state); 
        try {
            // HiveParser.g:1076:5: (name= identifier KW_SET KW_DBPROPERTIES dbProperties -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties ) )
            // HiveParser.g:1076:7: name= identifier KW_SET KW_DBPROPERTIES dbProperties
            {
            pushFollow(FOLLOW_identifier_in_alterDatabaseSuffixProperties4328);
            name=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(name.getTree());

            KW_SET235=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterDatabaseSuffixProperties4330); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET235);


            KW_DBPROPERTIES236=(Token)match(input,KW_DBPROPERTIES,FOLLOW_KW_DBPROPERTIES_in_alterDatabaseSuffixProperties4332); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DBPROPERTIES.add(KW_DBPROPERTIES236);


            pushFollow(FOLLOW_dbProperties_in_alterDatabaseSuffixProperties4334);
            dbProperties237=dbProperties();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_dbProperties.add(dbProperties237.getTree());

            // AST REWRITE
            // elements: dbProperties, name
            // token labels: 
            // rule labels: name, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1077:5: -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties )
            {
                // HiveParser.g:1077:8: ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERDATABASE_PROPERTIES, "TOK_ALTERDATABASE_PROPERTIES")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_dbProperties.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterDatabaseSuffixProperties"


    public static class alterDatabaseSuffixSetOwner_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterDatabaseSuffixSetOwner"
    // HiveParser.g:1080:1: alterDatabaseSuffixSetOwner : dbName= identifier KW_SET KW_OWNER principalName -> ^( TOK_ALTERDATABASE_OWNER $dbName principalName ) ;
    public final HiveParser.alterDatabaseSuffixSetOwner_return alterDatabaseSuffixSetOwner() throws RecognitionException {
        HiveParser.alterDatabaseSuffixSetOwner_return retval = new HiveParser.alterDatabaseSuffixSetOwner_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_SET238=null;
        Token KW_OWNER239=null;
        HiveParser_IdentifiersParser.identifier_return dbName =null;

        HiveParser.principalName_return principalName240 =null;


        CommonTree KW_SET238_tree=null;
        CommonTree KW_OWNER239_tree=null;
        RewriteRuleTokenStream stream_KW_OWNER=new RewriteRuleTokenStream(adaptor,"token KW_OWNER");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");
         pushMsg("alter database set owner", state); 
        try {
            // HiveParser.g:1083:5: (dbName= identifier KW_SET KW_OWNER principalName -> ^( TOK_ALTERDATABASE_OWNER $dbName principalName ) )
            // HiveParser.g:1083:7: dbName= identifier KW_SET KW_OWNER principalName
            {
            pushFollow(FOLLOW_identifier_in_alterDatabaseSuffixSetOwner4378);
            dbName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(dbName.getTree());

            KW_SET238=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterDatabaseSuffixSetOwner4380); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET238);


            KW_OWNER239=(Token)match(input,KW_OWNER,FOLLOW_KW_OWNER_in_alterDatabaseSuffixSetOwner4382); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_OWNER.add(KW_OWNER239);


            pushFollow(FOLLOW_principalName_in_alterDatabaseSuffixSetOwner4384);
            principalName240=principalName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_principalName.add(principalName240.getTree());

            // AST REWRITE
            // elements: dbName, principalName
            // token labels: 
            // rule labels: dbName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1084:5: -> ^( TOK_ALTERDATABASE_OWNER $dbName principalName )
            {
                // HiveParser.g:1084:8: ^( TOK_ALTERDATABASE_OWNER $dbName principalName )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERDATABASE_OWNER, "TOK_ALTERDATABASE_OWNER")
                , root_1);

                adaptor.addChild(root_1, stream_dbName.nextTree());

                adaptor.addChild(root_1, stream_principalName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterDatabaseSuffixSetOwner"


    public static class alterStatementSuffixRename_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixRename"
    // HiveParser.g:1087:1: alterStatementSuffixRename[boolean table] : KW_RENAME KW_TO tableName -> { table }? ^( TOK_ALTERTABLE_RENAME tableName ) -> ^( TOK_ALTERVIEW_RENAME tableName ) ;
    public final HiveParser.alterStatementSuffixRename_return alterStatementSuffixRename(boolean table) throws RecognitionException {
        HiveParser.alterStatementSuffixRename_return retval = new HiveParser.alterStatementSuffixRename_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_RENAME241=null;
        Token KW_TO242=null;
        HiveParser_FromClauseParser.tableName_return tableName243 =null;


        CommonTree KW_RENAME241_tree=null;
        CommonTree KW_TO242_tree=null;
        RewriteRuleTokenStream stream_KW_RENAME=new RewriteRuleTokenStream(adaptor,"token KW_RENAME");
        RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         pushMsg("rename statement", state); 
        try {
            // HiveParser.g:1090:5: ( KW_RENAME KW_TO tableName -> { table }? ^( TOK_ALTERTABLE_RENAME tableName ) -> ^( TOK_ALTERVIEW_RENAME tableName ) )
            // HiveParser.g:1090:7: KW_RENAME KW_TO tableName
            {
            KW_RENAME241=(Token)match(input,KW_RENAME,FOLLOW_KW_RENAME_in_alterStatementSuffixRename4427); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_RENAME.add(KW_RENAME241);


            KW_TO242=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_alterStatementSuffixRename4429); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TO.add(KW_TO242);


            pushFollow(FOLLOW_tableName_in_alterStatementSuffixRename4431);
            tableName243=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(tableName243.getTree());

            // AST REWRITE
            // elements: tableName, tableName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1091:5: -> { table }? ^( TOK_ALTERTABLE_RENAME tableName )
            if ( table ) {
                // HiveParser.g:1091:19: ^( TOK_ALTERTABLE_RENAME tableName )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_RENAME, "TOK_ALTERTABLE_RENAME")
                , root_1);

                adaptor.addChild(root_1, stream_tableName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1092:5: -> ^( TOK_ALTERVIEW_RENAME tableName )
            {
                // HiveParser.g:1092:19: ^( TOK_ALTERVIEW_RENAME tableName )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERVIEW_RENAME, "TOK_ALTERVIEW_RENAME")
                , root_1);

                adaptor.addChild(root_1, stream_tableName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixRename"


    public static class alterStatementSuffixAddCol_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixAddCol"
    // HiveParser.g:1095:1: alterStatementSuffixAddCol : (add= KW_ADD |replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN ( restrictOrCascade )? -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS columnNameTypeList ( restrictOrCascade )? ) -> ^( TOK_ALTERTABLE_REPLACECOLS columnNameTypeList ( restrictOrCascade )? ) ;
    public final HiveParser.alterStatementSuffixAddCol_return alterStatementSuffixAddCol() throws RecognitionException {
        HiveParser.alterStatementSuffixAddCol_return retval = new HiveParser.alterStatementSuffixAddCol_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token add=null;
        Token replace=null;
        Token KW_COLUMNS244=null;
        Token LPAREN245=null;
        Token RPAREN247=null;
        HiveParser.columnNameTypeList_return columnNameTypeList246 =null;

        HiveParser.restrictOrCascade_return restrictOrCascade248 =null;


        CommonTree add_tree=null;
        CommonTree replace_tree=null;
        CommonTree KW_COLUMNS244_tree=null;
        CommonTree LPAREN245_tree=null;
        CommonTree RPAREN247_tree=null;
        RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_REPLACE=new RewriteRuleTokenStream(adaptor,"token KW_REPLACE");
        RewriteRuleTokenStream stream_KW_ADD=new RewriteRuleTokenStream(adaptor,"token KW_ADD");
        RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
        RewriteRuleSubtreeStream stream_restrictOrCascade=new RewriteRuleSubtreeStream(adaptor,"rule restrictOrCascade");
         pushMsg("add column statement", state); 
        try {
            // HiveParser.g:1098:5: ( (add= KW_ADD |replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN ( restrictOrCascade )? -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS columnNameTypeList ( restrictOrCascade )? ) -> ^( TOK_ALTERTABLE_REPLACECOLS columnNameTypeList ( restrictOrCascade )? ) )
            // HiveParser.g:1098:7: (add= KW_ADD |replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN ( restrictOrCascade )?
            {
            // HiveParser.g:1098:7: (add= KW_ADD |replace= KW_REPLACE )
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==KW_ADD) ) {
                alt65=1;
            }
            else if ( (LA65_0==KW_REPLACE) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;

            }
            switch (alt65) {
                case 1 :
                    // HiveParser.g:1098:8: add= KW_ADD
                    {
                    add=(Token)match(input,KW_ADD,FOLLOW_KW_ADD_in_alterStatementSuffixAddCol4498); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ADD.add(add);


                    }
                    break;
                case 2 :
                    // HiveParser.g:1098:21: replace= KW_REPLACE
                    {
                    replace=(Token)match(input,KW_REPLACE,FOLLOW_KW_REPLACE_in_alterStatementSuffixAddCol4504); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_REPLACE.add(replace);


                    }
                    break;

            }


            KW_COLUMNS244=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_alterStatementSuffixAddCol4507); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_COLUMNS.add(KW_COLUMNS244);


            LPAREN245=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alterStatementSuffixAddCol4509); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN245);


            pushFollow(FOLLOW_columnNameTypeList_in_alterStatementSuffixAddCol4511);
            columnNameTypeList246=columnNameTypeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnNameTypeList.add(columnNameTypeList246.getTree());

            RPAREN247=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alterStatementSuffixAddCol4513); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN247);


            // HiveParser.g:1098:85: ( restrictOrCascade )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==KW_CASCADE||LA66_0==KW_RESTRICT) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // HiveParser.g:1098:85: restrictOrCascade
                    {
                    pushFollow(FOLLOW_restrictOrCascade_in_alterStatementSuffixAddCol4515);
                    restrictOrCascade248=restrictOrCascade();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_restrictOrCascade.add(restrictOrCascade248.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: restrictOrCascade, columnNameTypeList, restrictOrCascade, columnNameTypeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1099:5: -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS columnNameTypeList ( restrictOrCascade )? )
            if (add != null) {
                // HiveParser.g:1099:24: ^( TOK_ALTERTABLE_ADDCOLS columnNameTypeList ( restrictOrCascade )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_ADDCOLS, "TOK_ALTERTABLE_ADDCOLS")
                , root_1);

                adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());

                // HiveParser.g:1099:68: ( restrictOrCascade )?
                if ( stream_restrictOrCascade.hasNext() ) {
                    adaptor.addChild(root_1, stream_restrictOrCascade.nextTree());

                }
                stream_restrictOrCascade.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1100:5: -> ^( TOK_ALTERTABLE_REPLACECOLS columnNameTypeList ( restrictOrCascade )? )
            {
                // HiveParser.g:1100:24: ^( TOK_ALTERTABLE_REPLACECOLS columnNameTypeList ( restrictOrCascade )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_REPLACECOLS, "TOK_ALTERTABLE_REPLACECOLS")
                , root_1);

                adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());

                // HiveParser.g:1100:72: ( restrictOrCascade )?
                if ( stream_restrictOrCascade.hasNext() ) {
                    adaptor.addChild(root_1, stream_restrictOrCascade.nextTree());

                }
                stream_restrictOrCascade.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixAddCol"


    public static class alterStatementSuffixRenameCol_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixRenameCol"
    // HiveParser.g:1103:1: alterStatementSuffixRenameCol : KW_CHANGE ( KW_COLUMN )? oldName= identifier newName= identifier colType ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )? ( restrictOrCascade )? -> ^( TOK_ALTERTABLE_RENAMECOL $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? ( restrictOrCascade )? ) ;
    public final HiveParser.alterStatementSuffixRenameCol_return alterStatementSuffixRenameCol() throws RecognitionException {
        HiveParser.alterStatementSuffixRenameCol_return retval = new HiveParser.alterStatementSuffixRenameCol_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token comment=null;
        Token KW_CHANGE249=null;
        Token KW_COLUMN250=null;
        Token KW_COMMENT252=null;
        HiveParser_IdentifiersParser.identifier_return oldName =null;

        HiveParser_IdentifiersParser.identifier_return newName =null;

        HiveParser.colType_return colType251 =null;

        HiveParser.alterStatementChangeColPosition_return alterStatementChangeColPosition253 =null;

        HiveParser.restrictOrCascade_return restrictOrCascade254 =null;


        CommonTree comment_tree=null;
        CommonTree KW_CHANGE249_tree=null;
        CommonTree KW_COLUMN250_tree=null;
        CommonTree KW_COMMENT252_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleTokenStream stream_KW_COLUMN=new RewriteRuleTokenStream(adaptor,"token KW_COLUMN");
        RewriteRuleTokenStream stream_KW_CHANGE=new RewriteRuleTokenStream(adaptor,"token KW_CHANGE");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
        RewriteRuleSubtreeStream stream_alterStatementChangeColPosition=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementChangeColPosition");
        RewriteRuleSubtreeStream stream_restrictOrCascade=new RewriteRuleSubtreeStream(adaptor,"rule restrictOrCascade");
         pushMsg("rename column name", state); 
        try {
            // HiveParser.g:1106:5: ( KW_CHANGE ( KW_COLUMN )? oldName= identifier newName= identifier colType ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )? ( restrictOrCascade )? -> ^( TOK_ALTERTABLE_RENAMECOL $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? ( restrictOrCascade )? ) )
            // HiveParser.g:1106:7: KW_CHANGE ( KW_COLUMN )? oldName= identifier newName= identifier colType ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )? ( restrictOrCascade )?
            {
            KW_CHANGE249=(Token)match(input,KW_CHANGE,FOLLOW_KW_CHANGE_in_alterStatementSuffixRenameCol4591); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_CHANGE.add(KW_CHANGE249);


            // HiveParser.g:1106:17: ( KW_COLUMN )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==KW_COLUMN) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // HiveParser.g:1106:17: KW_COLUMN
                    {
                    KW_COLUMN250=(Token)match(input,KW_COLUMN,FOLLOW_KW_COLUMN_in_alterStatementSuffixRenameCol4593); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_COLUMN.add(KW_COLUMN250);


                    }
                    break;

            }


            pushFollow(FOLLOW_identifier_in_alterStatementSuffixRenameCol4598);
            oldName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(oldName.getTree());

            pushFollow(FOLLOW_identifier_in_alterStatementSuffixRenameCol4602);
            newName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(newName.getTree());

            pushFollow(FOLLOW_colType_in_alterStatementSuffixRenameCol4604);
            colType251=colType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_colType.add(colType251.getTree());

            // HiveParser.g:1106:74: ( KW_COMMENT comment= StringLiteral )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==KW_COMMENT) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // HiveParser.g:1106:75: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT252=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_alterStatementSuffixRenameCol4607); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT252);


                    comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixRenameCol4611); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(comment);


                    }
                    break;

            }


            // HiveParser.g:1106:110: ( alterStatementChangeColPosition )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==KW_AFTER||LA69_0==KW_FIRST) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // HiveParser.g:1106:110: alterStatementChangeColPosition
                    {
                    pushFollow(FOLLOW_alterStatementChangeColPosition_in_alterStatementSuffixRenameCol4615);
                    alterStatementChangeColPosition253=alterStatementChangeColPosition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alterStatementChangeColPosition.add(alterStatementChangeColPosition253.getTree());

                    }
                    break;

            }


            // HiveParser.g:1106:143: ( restrictOrCascade )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==KW_CASCADE||LA70_0==KW_RESTRICT) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // HiveParser.g:1106:143: restrictOrCascade
                    {
                    pushFollow(FOLLOW_restrictOrCascade_in_alterStatementSuffixRenameCol4618);
                    restrictOrCascade254=restrictOrCascade();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_restrictOrCascade.add(restrictOrCascade254.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: comment, oldName, colType, alterStatementChangeColPosition, restrictOrCascade, newName
            // token labels: comment
            // rule labels: newName, oldName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_newName=new RewriteRuleSubtreeStream(adaptor,"rule newName",newName!=null?newName.tree:null);
            RewriteRuleSubtreeStream stream_oldName=new RewriteRuleSubtreeStream(adaptor,"rule oldName",oldName!=null?oldName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1107:5: -> ^( TOK_ALTERTABLE_RENAMECOL $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? ( restrictOrCascade )? )
            {
                // HiveParser.g:1107:7: ^( TOK_ALTERTABLE_RENAMECOL $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? ( restrictOrCascade )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_RENAMECOL, "TOK_ALTERTABLE_RENAMECOL")
                , root_1);

                adaptor.addChild(root_1, stream_oldName.nextTree());

                adaptor.addChild(root_1, stream_newName.nextTree());

                adaptor.addChild(root_1, stream_colType.nextTree());

                // HiveParser.g:1107:61: ( $comment)?
                if ( stream_comment.hasNext() ) {
                    adaptor.addChild(root_1, stream_comment.nextNode());

                }
                stream_comment.reset();

                // HiveParser.g:1107:70: ( alterStatementChangeColPosition )?
                if ( stream_alterStatementChangeColPosition.hasNext() ) {
                    adaptor.addChild(root_1, stream_alterStatementChangeColPosition.nextTree());

                }
                stream_alterStatementChangeColPosition.reset();

                // HiveParser.g:1107:103: ( restrictOrCascade )?
                if ( stream_restrictOrCascade.hasNext() ) {
                    adaptor.addChild(root_1, stream_restrictOrCascade.nextTree());

                }
                stream_restrictOrCascade.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixRenameCol"


    public static class alterStatementSuffixUpdateStatsCol_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixUpdateStatsCol"
    // HiveParser.g:1110:1: alterStatementSuffixUpdateStatsCol : KW_UPDATE KW_STATISTICS KW_FOR ( KW_COLUMN )? colName= identifier KW_SET tableProperties ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? ) ;
    public final HiveParser.alterStatementSuffixUpdateStatsCol_return alterStatementSuffixUpdateStatsCol() throws RecognitionException {
        HiveParser.alterStatementSuffixUpdateStatsCol_return retval = new HiveParser.alterStatementSuffixUpdateStatsCol_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token comment=null;
        Token KW_UPDATE255=null;
        Token KW_STATISTICS256=null;
        Token KW_FOR257=null;
        Token KW_COLUMN258=null;
        Token KW_SET259=null;
        Token KW_COMMENT261=null;
        HiveParser_IdentifiersParser.identifier_return colName =null;

        HiveParser.tableProperties_return tableProperties260 =null;


        CommonTree comment_tree=null;
        CommonTree KW_UPDATE255_tree=null;
        CommonTree KW_STATISTICS256_tree=null;
        CommonTree KW_FOR257_tree=null;
        CommonTree KW_COLUMN258_tree=null;
        CommonTree KW_SET259_tree=null;
        CommonTree KW_COMMENT261_tree=null;
        RewriteRuleTokenStream stream_KW_STATISTICS=new RewriteRuleTokenStream(adaptor,"token KW_STATISTICS");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
        RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleTokenStream stream_KW_COLUMN=new RewriteRuleTokenStream(adaptor,"token KW_COLUMN");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
         pushMsg("update column statistics", state); 
        try {
            // HiveParser.g:1113:5: ( KW_UPDATE KW_STATISTICS KW_FOR ( KW_COLUMN )? colName= identifier KW_SET tableProperties ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? ) )
            // HiveParser.g:1113:7: KW_UPDATE KW_STATISTICS KW_FOR ( KW_COLUMN )? colName= identifier KW_SET tableProperties ( KW_COMMENT comment= StringLiteral )?
            {
            KW_UPDATE255=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_alterStatementSuffixUpdateStatsCol4673); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_UPDATE.add(KW_UPDATE255);


            KW_STATISTICS256=(Token)match(input,KW_STATISTICS,FOLLOW_KW_STATISTICS_in_alterStatementSuffixUpdateStatsCol4675); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_STATISTICS.add(KW_STATISTICS256);


            KW_FOR257=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_alterStatementSuffixUpdateStatsCol4677); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR257);


            // HiveParser.g:1113:38: ( KW_COLUMN )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==KW_COLUMN) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // HiveParser.g:1113:38: KW_COLUMN
                    {
                    KW_COLUMN258=(Token)match(input,KW_COLUMN,FOLLOW_KW_COLUMN_in_alterStatementSuffixUpdateStatsCol4679); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_COLUMN.add(KW_COLUMN258);


                    }
                    break;

            }


            pushFollow(FOLLOW_identifier_in_alterStatementSuffixUpdateStatsCol4684);
            colName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());

            KW_SET259=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixUpdateStatsCol4686); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET259);


            pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixUpdateStatsCol4688);
            tableProperties260=tableProperties();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties260.getTree());

            // HiveParser.g:1113:91: ( KW_COMMENT comment= StringLiteral )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==KW_COMMENT) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // HiveParser.g:1113:92: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT261=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_alterStatementSuffixUpdateStatsCol4691); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT261);


                    comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixUpdateStatsCol4695); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(comment);


                    }
                    break;

            }


            // AST REWRITE
            // elements: comment, colName, tableProperties
            // token labels: comment
            // rule labels: colName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1114:5: -> ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? )
            {
                // HiveParser.g:1114:7: ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_UPDATECOLSTATS, "TOK_ALTERTABLE_UPDATECOLSTATS")
                , root_1);

                adaptor.addChild(root_1, stream_colName.nextTree());

                adaptor.addChild(root_1, stream_tableProperties.nextTree());

                // HiveParser.g:1114:65: ( $comment)?
                if ( stream_comment.hasNext() ) {
                    adaptor.addChild(root_1, stream_comment.nextNode());

                }
                stream_comment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixUpdateStatsCol"


    public static class alterStatementChangeColPosition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementChangeColPosition"
    // HiveParser.g:1117:1: alterStatementChangeColPosition : (first= KW_FIRST | KW_AFTER afterCol= identifier -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION ) -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol) );
    public final HiveParser.alterStatementChangeColPosition_return alterStatementChangeColPosition() throws RecognitionException {
        HiveParser.alterStatementChangeColPosition_return retval = new HiveParser.alterStatementChangeColPosition_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token first=null;
        Token KW_AFTER262=null;
        HiveParser_IdentifiersParser.identifier_return afterCol =null;


        CommonTree first_tree=null;
        CommonTree KW_AFTER262_tree=null;
        RewriteRuleTokenStream stream_KW_AFTER=new RewriteRuleTokenStream(adaptor,"token KW_AFTER");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        try {
            // HiveParser.g:1118:5: (first= KW_FIRST | KW_AFTER afterCol= identifier -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION ) -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol) )
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==KW_FIRST) ) {
                alt73=1;
            }
            else if ( (LA73_0==KW_AFTER) ) {
                alt73=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;

            }
            switch (alt73) {
                case 1 :
                    // HiveParser.g:1118:7: first= KW_FIRST
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    first=(Token)match(input,KW_FIRST,FOLLOW_KW_FIRST_in_alterStatementChangeColPosition4734); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    first_tree = 
                    (CommonTree)adaptor.create(first)
                    ;
                    adaptor.addChild(root_0, first_tree);
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1118:22: KW_AFTER afterCol= identifier
                    {
                    KW_AFTER262=(Token)match(input,KW_AFTER,FOLLOW_KW_AFTER_in_alterStatementChangeColPosition4736); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_AFTER.add(KW_AFTER262);


                    pushFollow(FOLLOW_identifier_in_alterStatementChangeColPosition4740);
                    afterCol=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(afterCol.getTree());

                    // AST REWRITE
                    // elements: afterCol
                    // token labels: 
                    // rule labels: afterCol, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_afterCol=new RewriteRuleSubtreeStream(adaptor,"rule afterCol",afterCol!=null?afterCol.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1119:5: -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION )
                    if (first != null) {
                        // HiveParser.g:1119:25: ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION, "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    else // 1120:5: -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol)
                    {
                        // HiveParser.g:1120:8: ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION, "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION")
                        , root_1);

                        adaptor.addChild(root_1, stream_afterCol.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementChangeColPosition"


    public static class alterStatementSuffixAddPartitions_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixAddPartitions"
    // HiveParser.g:1123:1: alterStatementSuffixAddPartitions[boolean table] : KW_ADD ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ -> { table }? ^( TOK_ALTERTABLE_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ ) -> ^( TOK_ALTERVIEW_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ ) ;
    public final HiveParser.alterStatementSuffixAddPartitions_return alterStatementSuffixAddPartitions(boolean table) throws RecognitionException {
        HiveParser.alterStatementSuffixAddPartitions_return retval = new HiveParser.alterStatementSuffixAddPartitions_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_ADD263=null;
        HiveParser.ifNotExists_return ifNotExists264 =null;

        HiveParser.alterStatementSuffixAddPartitionsElement_return alterStatementSuffixAddPartitionsElement265 =null;


        CommonTree KW_ADD263_tree=null;
        RewriteRuleTokenStream stream_KW_ADD=new RewriteRuleTokenStream(adaptor,"token KW_ADD");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
        RewriteRuleSubtreeStream stream_alterStatementSuffixAddPartitionsElement=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementSuffixAddPartitionsElement");
         pushMsg("add partition statement", state); 
        try {
            // HiveParser.g:1126:5: ( KW_ADD ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ -> { table }? ^( TOK_ALTERTABLE_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ ) -> ^( TOK_ALTERVIEW_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ ) )
            // HiveParser.g:1126:7: KW_ADD ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+
            {
            KW_ADD263=(Token)match(input,KW_ADD,FOLLOW_KW_ADD_in_alterStatementSuffixAddPartitions4793); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ADD.add(KW_ADD263);


            // HiveParser.g:1126:14: ( ifNotExists )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==KW_IF) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // HiveParser.g:1126:14: ifNotExists
                    {
                    pushFollow(FOLLOW_ifNotExists_in_alterStatementSuffixAddPartitions4795);
                    ifNotExists264=ifNotExists();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists264.getTree());

                    }
                    break;

            }


            // HiveParser.g:1126:27: ( alterStatementSuffixAddPartitionsElement )+
            int cnt75=0;
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==KW_PARTITION) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // HiveParser.g:1126:27: alterStatementSuffixAddPartitionsElement
            	    {
            	    pushFollow(FOLLOW_alterStatementSuffixAddPartitionsElement_in_alterStatementSuffixAddPartitions4798);
            	    alterStatementSuffixAddPartitionsElement265=alterStatementSuffixAddPartitionsElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_alterStatementSuffixAddPartitionsElement.add(alterStatementSuffixAddPartitionsElement265.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt75 >= 1 ) break loop75;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(75, input);
                        throw eee;
                }
                cnt75++;
            } while (true);


            // AST REWRITE
            // elements: ifNotExists, alterStatementSuffixAddPartitionsElement, ifNotExists, alterStatementSuffixAddPartitionsElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1127:5: -> { table }? ^( TOK_ALTERTABLE_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ )
            if ( table ) {
                // HiveParser.g:1127:19: ^( TOK_ALTERTABLE_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_ADDPARTS, "TOK_ALTERTABLE_ADDPARTS")
                , root_1);

                // HiveParser.g:1127:45: ( ifNotExists )?
                if ( stream_ifNotExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifNotExists.nextTree());

                }
                stream_ifNotExists.reset();

                if ( !(stream_alterStatementSuffixAddPartitionsElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_alterStatementSuffixAddPartitionsElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_alterStatementSuffixAddPartitionsElement.nextTree());

                }
                stream_alterStatementSuffixAddPartitionsElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1128:5: -> ^( TOK_ALTERVIEW_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ )
            {
                // HiveParser.g:1128:19: ^( TOK_ALTERVIEW_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERVIEW_ADDPARTS, "TOK_ALTERVIEW_ADDPARTS")
                , root_1);

                // HiveParser.g:1128:44: ( ifNotExists )?
                if ( stream_ifNotExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifNotExists.nextTree());

                }
                stream_ifNotExists.reset();

                if ( !(stream_alterStatementSuffixAddPartitionsElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_alterStatementSuffixAddPartitionsElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_alterStatementSuffixAddPartitionsElement.nextTree());

                }
                stream_alterStatementSuffixAddPartitionsElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixAddPartitions"


    public static class alterStatementSuffixAddPartitionsElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixAddPartitionsElement"
    // HiveParser.g:1131:1: alterStatementSuffixAddPartitionsElement : partitionSpec ( partitionLocation )? ;
    public final HiveParser.alterStatementSuffixAddPartitionsElement_return alterStatementSuffixAddPartitionsElement() throws RecognitionException {
        HiveParser.alterStatementSuffixAddPartitionsElement_return retval = new HiveParser.alterStatementSuffixAddPartitionsElement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec266 =null;

        HiveParser.partitionLocation_return partitionLocation267 =null;



        try {
            // HiveParser.g:1132:5: ( partitionSpec ( partitionLocation )? )
            // HiveParser.g:1132:7: partitionSpec ( partitionLocation )?
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitionsElement4861);
            partitionSpec266=partitionSpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, partitionSpec266.getTree());

            // HiveParser.g:1132:21: ( partitionLocation )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==KW_LOCATION) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // HiveParser.g:1132:21: partitionLocation
                    {
                    pushFollow(FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitionsElement4863);
                    partitionLocation267=partitionLocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partitionLocation267.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixAddPartitionsElement"


    public static class alterStatementSuffixTouch_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixTouch"
    // HiveParser.g:1135:1: alterStatementSuffixTouch : KW_TOUCH ( partitionSpec )* -> ^( TOK_ALTERTABLE_TOUCH ( partitionSpec )* ) ;
    public final HiveParser.alterStatementSuffixTouch_return alterStatementSuffixTouch() throws RecognitionException {
        HiveParser.alterStatementSuffixTouch_return retval = new HiveParser.alterStatementSuffixTouch_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_TOUCH268=null;
        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec269 =null;


        CommonTree KW_TOUCH268_tree=null;
        RewriteRuleTokenStream stream_KW_TOUCH=new RewriteRuleTokenStream(adaptor,"token KW_TOUCH");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         pushMsg("touch statement", state); 
        try {
            // HiveParser.g:1138:5: ( KW_TOUCH ( partitionSpec )* -> ^( TOK_ALTERTABLE_TOUCH ( partitionSpec )* ) )
            // HiveParser.g:1138:7: KW_TOUCH ( partitionSpec )*
            {
            KW_TOUCH268=(Token)match(input,KW_TOUCH,FOLLOW_KW_TOUCH_in_alterStatementSuffixTouch4891); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TOUCH.add(KW_TOUCH268);


            // HiveParser.g:1138:16: ( partitionSpec )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==KW_PARTITION) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // HiveParser.g:1138:17: partitionSpec
            	    {
            	    pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixTouch4894);
            	    partitionSpec269=partitionSpec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec269.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            // AST REWRITE
            // elements: partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1139:5: -> ^( TOK_ALTERTABLE_TOUCH ( partitionSpec )* )
            {
                // HiveParser.g:1139:8: ^( TOK_ALTERTABLE_TOUCH ( partitionSpec )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_TOUCH, "TOK_ALTERTABLE_TOUCH")
                , root_1);

                // HiveParser.g:1139:31: ( partitionSpec )*
                while ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixTouch"


    public static class alterStatementSuffixArchive_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixArchive"
    // HiveParser.g:1142:1: alterStatementSuffixArchive : KW_ARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_ARCHIVE ( partitionSpec )* ) ;
    public final HiveParser.alterStatementSuffixArchive_return alterStatementSuffixArchive() throws RecognitionException {
        HiveParser.alterStatementSuffixArchive_return retval = new HiveParser.alterStatementSuffixArchive_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_ARCHIVE270=null;
        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec271 =null;


        CommonTree KW_ARCHIVE270_tree=null;
        RewriteRuleTokenStream stream_KW_ARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_ARCHIVE");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         pushMsg("archive statement", state); 
        try {
            // HiveParser.g:1145:5: ( KW_ARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_ARCHIVE ( partitionSpec )* ) )
            // HiveParser.g:1145:7: KW_ARCHIVE ( partitionSpec )*
            {
            KW_ARCHIVE270=(Token)match(input,KW_ARCHIVE,FOLLOW_KW_ARCHIVE_in_alterStatementSuffixArchive4938); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ARCHIVE.add(KW_ARCHIVE270);


            // HiveParser.g:1145:18: ( partitionSpec )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==KW_PARTITION) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // HiveParser.g:1145:19: partitionSpec
            	    {
            	    pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixArchive4941);
            	    partitionSpec271=partitionSpec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec271.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);


            // AST REWRITE
            // elements: partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1146:5: -> ^( TOK_ALTERTABLE_ARCHIVE ( partitionSpec )* )
            {
                // HiveParser.g:1146:8: ^( TOK_ALTERTABLE_ARCHIVE ( partitionSpec )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_ARCHIVE, "TOK_ALTERTABLE_ARCHIVE")
                , root_1);

                // HiveParser.g:1146:33: ( partitionSpec )*
                while ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixArchive"


    public static class alterStatementSuffixUnArchive_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixUnArchive"
    // HiveParser.g:1149:1: alterStatementSuffixUnArchive : KW_UNARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_UNARCHIVE ( partitionSpec )* ) ;
    public final HiveParser.alterStatementSuffixUnArchive_return alterStatementSuffixUnArchive() throws RecognitionException {
        HiveParser.alterStatementSuffixUnArchive_return retval = new HiveParser.alterStatementSuffixUnArchive_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_UNARCHIVE272=null;
        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec273 =null;


        CommonTree KW_UNARCHIVE272_tree=null;
        RewriteRuleTokenStream stream_KW_UNARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_UNARCHIVE");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         pushMsg("unarchive statement", state); 
        try {
            // HiveParser.g:1152:5: ( KW_UNARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_UNARCHIVE ( partitionSpec )* ) )
            // HiveParser.g:1152:7: KW_UNARCHIVE ( partitionSpec )*
            {
            KW_UNARCHIVE272=(Token)match(input,KW_UNARCHIVE,FOLLOW_KW_UNARCHIVE_in_alterStatementSuffixUnArchive4985); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_UNARCHIVE.add(KW_UNARCHIVE272);


            // HiveParser.g:1152:20: ( partitionSpec )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==KW_PARTITION) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // HiveParser.g:1152:21: partitionSpec
            	    {
            	    pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixUnArchive4988);
            	    partitionSpec273=partitionSpec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec273.getTree());

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);


            // AST REWRITE
            // elements: partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1153:5: -> ^( TOK_ALTERTABLE_UNARCHIVE ( partitionSpec )* )
            {
                // HiveParser.g:1153:8: ^( TOK_ALTERTABLE_UNARCHIVE ( partitionSpec )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_UNARCHIVE, "TOK_ALTERTABLE_UNARCHIVE")
                , root_1);

                // HiveParser.g:1153:35: ( partitionSpec )*
                while ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixUnArchive"


    public static class partitionLocation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "partitionLocation"
    // HiveParser.g:1156:1: partitionLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_PARTITIONLOCATION $locn) ;
    public final HiveParser.partitionLocation_return partitionLocation() throws RecognitionException {
        HiveParser.partitionLocation_return retval = new HiveParser.partitionLocation_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token locn=null;
        Token KW_LOCATION274=null;

        CommonTree locn_tree=null;
        CommonTree KW_LOCATION274_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

         pushMsg("partition location", state); 
        try {
            // HiveParser.g:1159:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_PARTITIONLOCATION $locn) )
            // HiveParser.g:1160:7: KW_LOCATION locn= StringLiteral
            {
            KW_LOCATION274=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_partitionLocation5038); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_LOCATION.add(KW_LOCATION274);


            locn=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_partitionLocation5042); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(locn);


            // AST REWRITE
            // elements: locn
            // token labels: locn
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1160:38: -> ^( TOK_PARTITIONLOCATION $locn)
            {
                // HiveParser.g:1160:41: ^( TOK_PARTITIONLOCATION $locn)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_PARTITIONLOCATION, "TOK_PARTITIONLOCATION")
                , root_1);

                adaptor.addChild(root_1, stream_locn.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "partitionLocation"


    public static class alterStatementSuffixDropPartitions_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixDropPartitions"
    // HiveParser.g:1163:1: alterStatementSuffixDropPartitions[boolean table] : KW_DROP ( ifExists )? dropPartitionSpec ( COMMA dropPartitionSpec )* ( ignoreProtection )? ( KW_PURGE )? ( replicationClause )? -> { table }? ^( TOK_ALTERTABLE_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( ignoreProtection )? ( KW_PURGE )? ( replicationClause )? ) -> ^( TOK_ALTERVIEW_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( ignoreProtection )? ( replicationClause )? ) ;
    public final HiveParser.alterStatementSuffixDropPartitions_return alterStatementSuffixDropPartitions(boolean table) throws RecognitionException {
        HiveParser.alterStatementSuffixDropPartitions_return retval = new HiveParser.alterStatementSuffixDropPartitions_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_DROP275=null;
        Token COMMA278=null;
        Token KW_PURGE281=null;
        HiveParser.ifExists_return ifExists276 =null;

        HiveParser_IdentifiersParser.dropPartitionSpec_return dropPartitionSpec277 =null;

        HiveParser_IdentifiersParser.dropPartitionSpec_return dropPartitionSpec279 =null;

        HiveParser.ignoreProtection_return ignoreProtection280 =null;

        HiveParser.replicationClause_return replicationClause282 =null;


        CommonTree KW_DROP275_tree=null;
        CommonTree COMMA278_tree=null;
        CommonTree KW_PURGE281_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_PURGE=new RewriteRuleTokenStream(adaptor,"token KW_PURGE");
        RewriteRuleSubtreeStream stream_dropPartitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule dropPartitionSpec");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
        RewriteRuleSubtreeStream stream_ignoreProtection=new RewriteRuleSubtreeStream(adaptor,"rule ignoreProtection");
        RewriteRuleSubtreeStream stream_replicationClause=new RewriteRuleSubtreeStream(adaptor,"rule replicationClause");
         pushMsg("drop partition statement", state); 
        try {
            // HiveParser.g:1166:5: ( KW_DROP ( ifExists )? dropPartitionSpec ( COMMA dropPartitionSpec )* ( ignoreProtection )? ( KW_PURGE )? ( replicationClause )? -> { table }? ^( TOK_ALTERTABLE_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( ignoreProtection )? ( KW_PURGE )? ( replicationClause )? ) -> ^( TOK_ALTERVIEW_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( ignoreProtection )? ( replicationClause )? ) )
            // HiveParser.g:1166:7: KW_DROP ( ifExists )? dropPartitionSpec ( COMMA dropPartitionSpec )* ( ignoreProtection )? ( KW_PURGE )? ( replicationClause )?
            {
            KW_DROP275=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_alterStatementSuffixDropPartitions5079); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP275);


            // HiveParser.g:1166:15: ( ifExists )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==KW_IF) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // HiveParser.g:1166:15: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_alterStatementSuffixDropPartitions5081);
                    ifExists276=ifExists();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ifExists.add(ifExists276.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions5084);
            dropPartitionSpec277=dropPartitionSpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_dropPartitionSpec.add(dropPartitionSpec277.getTree());

            // HiveParser.g:1166:43: ( COMMA dropPartitionSpec )*
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);

                if ( (LA81_0==COMMA) ) {
                    alt81=1;
                }


                switch (alt81) {
            	case 1 :
            	    // HiveParser.g:1166:44: COMMA dropPartitionSpec
            	    {
            	    COMMA278=(Token)match(input,COMMA,FOLLOW_COMMA_in_alterStatementSuffixDropPartitions5087); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA278);


            	    pushFollow(FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions5089);
            	    dropPartitionSpec279=dropPartitionSpec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dropPartitionSpec.add(dropPartitionSpec279.getTree());

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);


            // HiveParser.g:1166:70: ( ignoreProtection )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==KW_IGNORE) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // HiveParser.g:1166:70: ignoreProtection
                    {
                    pushFollow(FOLLOW_ignoreProtection_in_alterStatementSuffixDropPartitions5093);
                    ignoreProtection280=ignoreProtection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ignoreProtection.add(ignoreProtection280.getTree());

                    }
                    break;

            }


            // HiveParser.g:1166:88: ( KW_PURGE )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==KW_PURGE) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // HiveParser.g:1166:88: KW_PURGE
                    {
                    KW_PURGE281=(Token)match(input,KW_PURGE,FOLLOW_KW_PURGE_in_alterStatementSuffixDropPartitions5096); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_PURGE.add(KW_PURGE281);


                    }
                    break;

            }


            // HiveParser.g:1166:98: ( replicationClause )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==KW_FOR) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // HiveParser.g:1166:98: replicationClause
                    {
                    pushFollow(FOLLOW_replicationClause_in_alterStatementSuffixDropPartitions5099);
                    replicationClause282=replicationClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_replicationClause.add(replicationClause282.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: dropPartitionSpec, replicationClause, ignoreProtection, ifExists, replicationClause, ifExists, ignoreProtection, dropPartitionSpec, KW_PURGE
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1167:5: -> { table }? ^( TOK_ALTERTABLE_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( ignoreProtection )? ( KW_PURGE )? ( replicationClause )? )
            if ( table ) {
                // HiveParser.g:1167:19: ^( TOK_ALTERTABLE_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( ignoreProtection )? ( KW_PURGE )? ( replicationClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_DROPPARTS, "TOK_ALTERTABLE_DROPPARTS")
                , root_1);

                if ( !(stream_dropPartitionSpec.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_dropPartitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_dropPartitionSpec.nextTree());

                }
                stream_dropPartitionSpec.reset();

                // HiveParser.g:1167:65: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.nextTree());

                }
                stream_ifExists.reset();

                // HiveParser.g:1167:75: ( ignoreProtection )?
                if ( stream_ignoreProtection.hasNext() ) {
                    adaptor.addChild(root_1, stream_ignoreProtection.nextTree());

                }
                stream_ignoreProtection.reset();

                // HiveParser.g:1167:93: ( KW_PURGE )?
                if ( stream_KW_PURGE.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_KW_PURGE.nextNode()
                    );

                }
                stream_KW_PURGE.reset();

                // HiveParser.g:1167:103: ( replicationClause )?
                if ( stream_replicationClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_replicationClause.nextTree());

                }
                stream_replicationClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1168:5: -> ^( TOK_ALTERVIEW_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( ignoreProtection )? ( replicationClause )? )
            {
                // HiveParser.g:1168:19: ^( TOK_ALTERVIEW_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( ignoreProtection )? ( replicationClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERVIEW_DROPPARTS, "TOK_ALTERVIEW_DROPPARTS")
                , root_1);

                if ( !(stream_dropPartitionSpec.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_dropPartitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_dropPartitionSpec.nextTree());

                }
                stream_dropPartitionSpec.reset();

                // HiveParser.g:1168:64: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.nextTree());

                }
                stream_ifExists.reset();

                // HiveParser.g:1168:74: ( ignoreProtection )?
                if ( stream_ignoreProtection.hasNext() ) {
                    adaptor.addChild(root_1, stream_ignoreProtection.nextTree());

                }
                stream_ignoreProtection.reset();

                // HiveParser.g:1168:92: ( replicationClause )?
                if ( stream_replicationClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_replicationClause.nextTree());

                }
                stream_replicationClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixDropPartitions"


    public static class alterStatementSuffixProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixProperties"
    // HiveParser.g:1171:1: alterStatementSuffixProperties : ( KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_PROPERTIES tableProperties ) | KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_ALTERTABLE_DROPPROPERTIES tableProperties ( ifExists )? ) );
    public final HiveParser.alterStatementSuffixProperties_return alterStatementSuffixProperties() throws RecognitionException {
        HiveParser.alterStatementSuffixProperties_return retval = new HiveParser.alterStatementSuffixProperties_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_SET283=null;
        Token KW_TBLPROPERTIES284=null;
        Token KW_UNSET286=null;
        Token KW_TBLPROPERTIES287=null;
        HiveParser.tableProperties_return tableProperties285 =null;

        HiveParser.ifExists_return ifExists288 =null;

        HiveParser.tableProperties_return tableProperties289 =null;


        CommonTree KW_SET283_tree=null;
        CommonTree KW_TBLPROPERTIES284_tree=null;
        CommonTree KW_UNSET286_tree=null;
        CommonTree KW_TBLPROPERTIES287_tree=null;
        RewriteRuleTokenStream stream_KW_UNSET=new RewriteRuleTokenStream(adaptor,"token KW_UNSET");
        RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         pushMsg("alter properties statement", state); 
        try {
            // HiveParser.g:1174:5: ( KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_PROPERTIES tableProperties ) | KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_ALTERTABLE_DROPPROPERTIES tableProperties ( ifExists )? ) )
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==KW_SET) ) {
                alt86=1;
            }
            else if ( (LA86_0==KW_UNSET) ) {
                alt86=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);

                throw nvae;

            }
            switch (alt86) {
                case 1 :
                    // HiveParser.g:1174:7: KW_SET KW_TBLPROPERTIES tableProperties
                    {
                    KW_SET283=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixProperties5187); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET283);


                    KW_TBLPROPERTIES284=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties5189); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES284);


                    pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixProperties5191);
                    tableProperties285=tableProperties();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties285.getTree());

                    // AST REWRITE
                    // elements: tableProperties
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1175:5: -> ^( TOK_ALTERTABLE_PROPERTIES tableProperties )
                    {
                        // HiveParser.g:1175:8: ^( TOK_ALTERTABLE_PROPERTIES tableProperties )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERTABLE_PROPERTIES, "TOK_ALTERTABLE_PROPERTIES")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableProperties.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1176:7: KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties
                    {
                    KW_UNSET286=(Token)match(input,KW_UNSET,FOLLOW_KW_UNSET_in_alterStatementSuffixProperties5211); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_UNSET.add(KW_UNSET286);


                    KW_TBLPROPERTIES287=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties5213); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES287);


                    // HiveParser.g:1176:33: ( ifExists )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==KW_IF) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            // HiveParser.g:1176:33: ifExists
                            {
                            pushFollow(FOLLOW_ifExists_in_alterStatementSuffixProperties5215);
                            ifExists288=ifExists();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_ifExists.add(ifExists288.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixProperties5218);
                    tableProperties289=tableProperties();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties289.getTree());

                    // AST REWRITE
                    // elements: ifExists, tableProperties
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1177:5: -> ^( TOK_ALTERTABLE_DROPPROPERTIES tableProperties ( ifExists )? )
                    {
                        // HiveParser.g:1177:8: ^( TOK_ALTERTABLE_DROPPROPERTIES tableProperties ( ifExists )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERTABLE_DROPPROPERTIES, "TOK_ALTERTABLE_DROPPROPERTIES")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableProperties.nextTree());

                        // HiveParser.g:1177:56: ( ifExists )?
                        if ( stream_ifExists.hasNext() ) {
                            adaptor.addChild(root_1, stream_ifExists.nextTree());

                        }
                        stream_ifExists.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixProperties"


    public static class alterViewSuffixProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterViewSuffixProperties"
    // HiveParser.g:1180:1: alterViewSuffixProperties : ( KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERVIEW_PROPERTIES tableProperties ) | KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_ALTERVIEW_DROPPROPERTIES tableProperties ( ifExists )? ) );
    public final HiveParser.alterViewSuffixProperties_return alterViewSuffixProperties() throws RecognitionException {
        HiveParser.alterViewSuffixProperties_return retval = new HiveParser.alterViewSuffixProperties_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_SET290=null;
        Token KW_TBLPROPERTIES291=null;
        Token KW_UNSET293=null;
        Token KW_TBLPROPERTIES294=null;
        HiveParser.tableProperties_return tableProperties292 =null;

        HiveParser.ifExists_return ifExists295 =null;

        HiveParser.tableProperties_return tableProperties296 =null;


        CommonTree KW_SET290_tree=null;
        CommonTree KW_TBLPROPERTIES291_tree=null;
        CommonTree KW_UNSET293_tree=null;
        CommonTree KW_TBLPROPERTIES294_tree=null;
        RewriteRuleTokenStream stream_KW_UNSET=new RewriteRuleTokenStream(adaptor,"token KW_UNSET");
        RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         pushMsg("alter view properties statement", state); 
        try {
            // HiveParser.g:1183:5: ( KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERVIEW_PROPERTIES tableProperties ) | KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_ALTERVIEW_DROPPROPERTIES tableProperties ( ifExists )? ) )
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==KW_SET) ) {
                alt88=1;
            }
            else if ( (LA88_0==KW_UNSET) ) {
                alt88=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;

            }
            switch (alt88) {
                case 1 :
                    // HiveParser.g:1183:7: KW_SET KW_TBLPROPERTIES tableProperties
                    {
                    KW_SET290=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterViewSuffixProperties5260); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET290);


                    KW_TBLPROPERTIES291=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties5262); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES291);


                    pushFollow(FOLLOW_tableProperties_in_alterViewSuffixProperties5264);
                    tableProperties292=tableProperties();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties292.getTree());

                    // AST REWRITE
                    // elements: tableProperties
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1184:5: -> ^( TOK_ALTERVIEW_PROPERTIES tableProperties )
                    {
                        // HiveParser.g:1184:8: ^( TOK_ALTERVIEW_PROPERTIES tableProperties )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERVIEW_PROPERTIES, "TOK_ALTERVIEW_PROPERTIES")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableProperties.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1185:7: KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties
                    {
                    KW_UNSET293=(Token)match(input,KW_UNSET,FOLLOW_KW_UNSET_in_alterViewSuffixProperties5284); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_UNSET.add(KW_UNSET293);


                    KW_TBLPROPERTIES294=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties5286); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES294);


                    // HiveParser.g:1185:33: ( ifExists )?
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==KW_IF) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            // HiveParser.g:1185:33: ifExists
                            {
                            pushFollow(FOLLOW_ifExists_in_alterViewSuffixProperties5288);
                            ifExists295=ifExists();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_ifExists.add(ifExists295.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_tableProperties_in_alterViewSuffixProperties5291);
                    tableProperties296=tableProperties();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties296.getTree());

                    // AST REWRITE
                    // elements: tableProperties, ifExists
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1186:5: -> ^( TOK_ALTERVIEW_DROPPROPERTIES tableProperties ( ifExists )? )
                    {
                        // HiveParser.g:1186:8: ^( TOK_ALTERVIEW_DROPPROPERTIES tableProperties ( ifExists )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERVIEW_DROPPROPERTIES, "TOK_ALTERVIEW_DROPPROPERTIES")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableProperties.nextTree());

                        // HiveParser.g:1186:55: ( ifExists )?
                        if ( stream_ifExists.hasNext() ) {
                            adaptor.addChild(root_1, stream_ifExists.nextTree());

                        }
                        stream_ifExists.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterViewSuffixProperties"


    public static class alterStatementSuffixSerdeProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixSerdeProperties"
    // HiveParser.g:1189:1: alterStatementSuffixSerdeProperties : ( KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? ) | KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties ) );
    public final HiveParser.alterStatementSuffixSerdeProperties_return alterStatementSuffixSerdeProperties() throws RecognitionException {
        HiveParser.alterStatementSuffixSerdeProperties_return retval = new HiveParser.alterStatementSuffixSerdeProperties_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token serdeName=null;
        Token KW_SET297=null;
        Token KW_SERDE298=null;
        Token KW_WITH299=null;
        Token KW_SERDEPROPERTIES300=null;
        Token KW_SET302=null;
        Token KW_SERDEPROPERTIES303=null;
        HiveParser.tableProperties_return tableProperties301 =null;

        HiveParser.tableProperties_return tableProperties304 =null;


        CommonTree serdeName_tree=null;
        CommonTree KW_SET297_tree=null;
        CommonTree KW_SERDE298_tree=null;
        CommonTree KW_WITH299_tree=null;
        CommonTree KW_SERDEPROPERTIES300_tree=null;
        CommonTree KW_SET302_tree=null;
        CommonTree KW_SERDEPROPERTIES303_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
        RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
         pushMsg("alter serdes statement", state); 
        try {
            // HiveParser.g:1192:5: ( KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? ) | KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties ) )
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==KW_SET) ) {
                int LA90_1 = input.LA(2);

                if ( (LA90_1==KW_SERDE) ) {
                    alt90=1;
                }
                else if ( (LA90_1==KW_SERDEPROPERTIES) ) {
                    alt90=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 90, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;

            }
            switch (alt90) {
                case 1 :
                    // HiveParser.g:1192:7: KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )?
                    {
                    KW_SET297=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties5333); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET297);


                    KW_SERDE298=(Token)match(input,KW_SERDE,FOLLOW_KW_SERDE_in_alterStatementSuffixSerdeProperties5335); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SERDE.add(KW_SERDE298);


                    serdeName=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixSerdeProperties5339); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(serdeName);


                    // HiveParser.g:1192:47: ( KW_WITH KW_SERDEPROPERTIES tableProperties )?
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==KW_WITH) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            // HiveParser.g:1192:48: KW_WITH KW_SERDEPROPERTIES tableProperties
                            {
                            KW_WITH299=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_alterStatementSuffixSerdeProperties5342); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH299);


                            KW_SERDEPROPERTIES300=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties5344); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES300);


                            pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties5346);
                            tableProperties301=tableProperties();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties301.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: serdeName, tableProperties
                    // token labels: serdeName
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_serdeName=new RewriteRuleTokenStream(adaptor,"token serdeName",serdeName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1193:5: -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? )
                    {
                        // HiveParser.g:1193:8: ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERTABLE_SERIALIZER, "TOK_ALTERTABLE_SERIALIZER")
                        , root_1);

                        adaptor.addChild(root_1, stream_serdeName.nextNode());

                        // HiveParser.g:1193:47: ( tableProperties )?
                        if ( stream_tableProperties.hasNext() ) {
                            adaptor.addChild(root_1, stream_tableProperties.nextTree());

                        }
                        stream_tableProperties.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1194:7: KW_SET KW_SERDEPROPERTIES tableProperties
                    {
                    KW_SET302=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties5372); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET302);


                    KW_SERDEPROPERTIES303=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties5374); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES303);


                    pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties5376);
                    tableProperties304=tableProperties();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties304.getTree());

                    // AST REWRITE
                    // elements: tableProperties
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1195:5: -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties )
                    {
                        // HiveParser.g:1195:8: ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERTABLE_SERDEPROPERTIES, "TOK_ALTERTABLE_SERDEPROPERTIES")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableProperties.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixSerdeProperties"


    public static class tablePartitionPrefix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tablePartitionPrefix"
    // HiveParser.g:1198:1: tablePartitionPrefix : tableName ( partitionSpec )? -> ^( TOK_TABLE_PARTITION tableName ( partitionSpec )? ) ;
    public final HiveParser.tablePartitionPrefix_return tablePartitionPrefix() throws RecognitionException {
        HiveParser.tablePartitionPrefix_return retval = new HiveParser.tablePartitionPrefix_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser_FromClauseParser.tableName_return tableName305 =null;

        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec306 =null;


        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        pushMsg("table partition prefix", state);
        try {
            // HiveParser.g:1201:3: ( tableName ( partitionSpec )? -> ^( TOK_TABLE_PARTITION tableName ( partitionSpec )? ) )
            // HiveParser.g:1201:5: tableName ( partitionSpec )?
            {
            pushFollow(FOLLOW_tableName_in_tablePartitionPrefix5413);
            tableName305=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(tableName305.getTree());

            // HiveParser.g:1201:15: ( partitionSpec )?
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==KW_PARTITION) ) {
                alt91=1;
            }
            switch (alt91) {
                case 1 :
                    // HiveParser.g:1201:15: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_tablePartitionPrefix5415);
                    partitionSpec306=partitionSpec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec306.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: partitionSpec, tableName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1202:3: -> ^( TOK_TABLE_PARTITION tableName ( partitionSpec )? )
            {
                // HiveParser.g:1202:5: ^( TOK_TABLE_PARTITION tableName ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLE_PARTITION, "TOK_TABLE_PARTITION")
                , root_1);

                adaptor.addChild(root_1, stream_tableName.nextTree());

                // HiveParser.g:1202:37: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tablePartitionPrefix"


    public static class alterStatementSuffixFileFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixFileFormat"
    // HiveParser.g:1205:1: alterStatementSuffixFileFormat : KW_SET KW_FILEFORMAT fileFormat -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat ) ;
    public final HiveParser.alterStatementSuffixFileFormat_return alterStatementSuffixFileFormat() throws RecognitionException {
        HiveParser.alterStatementSuffixFileFormat_return retval = new HiveParser.alterStatementSuffixFileFormat_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_SET307=null;
        Token KW_FILEFORMAT308=null;
        HiveParser.fileFormat_return fileFormat309 =null;


        CommonTree KW_SET307_tree=null;
        CommonTree KW_FILEFORMAT308_tree=null;
        RewriteRuleTokenStream stream_KW_FILEFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FILEFORMAT");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleSubtreeStream stream_fileFormat=new RewriteRuleSubtreeStream(adaptor,"rule fileFormat");
        pushMsg("alter fileformat statement", state); 
        try {
            // HiveParser.g:1208:2: ( KW_SET KW_FILEFORMAT fileFormat -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat ) )
            // HiveParser.g:1208:4: KW_SET KW_FILEFORMAT fileFormat
            {
            KW_SET307=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixFileFormat5450); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET307);


            KW_FILEFORMAT308=(Token)match(input,KW_FILEFORMAT,FOLLOW_KW_FILEFORMAT_in_alterStatementSuffixFileFormat5452); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FILEFORMAT.add(KW_FILEFORMAT308);


            pushFollow(FOLLOW_fileFormat_in_alterStatementSuffixFileFormat5454);
            fileFormat309=fileFormat();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fileFormat.add(fileFormat309.getTree());

            // AST REWRITE
            // elements: fileFormat
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1209:2: -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat )
            {
                // HiveParser.g:1209:5: ^( TOK_ALTERTABLE_FILEFORMAT fileFormat )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_FILEFORMAT, "TOK_ALTERTABLE_FILEFORMAT")
                , root_1);

                adaptor.addChild(root_1, stream_fileFormat.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixFileFormat"


    public static class alterStatementSuffixClusterbySortby_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixClusterbySortby"
    // HiveParser.g:1212:1: alterStatementSuffixClusterbySortby : ( KW_NOT KW_CLUSTERED -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_CLUSTERED ) | KW_NOT KW_SORTED -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_SORTED ) | tableBuckets -> ^( TOK_ALTERTABLE_CLUSTER_SORT tableBuckets ) );
    public final HiveParser.alterStatementSuffixClusterbySortby_return alterStatementSuffixClusterbySortby() throws RecognitionException {
        HiveParser.alterStatementSuffixClusterbySortby_return retval = new HiveParser.alterStatementSuffixClusterbySortby_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_NOT310=null;
        Token KW_CLUSTERED311=null;
        Token KW_NOT312=null;
        Token KW_SORTED313=null;
        HiveParser.tableBuckets_return tableBuckets314 =null;


        CommonTree KW_NOT310_tree=null;
        CommonTree KW_CLUSTERED311_tree=null;
        CommonTree KW_NOT312_tree=null;
        CommonTree KW_SORTED313_tree=null;
        RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
        RewriteRuleTokenStream stream_KW_SORTED=new RewriteRuleTokenStream(adaptor,"token KW_SORTED");
        RewriteRuleTokenStream stream_KW_CLUSTERED=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTERED");
        RewriteRuleSubtreeStream stream_tableBuckets=new RewriteRuleSubtreeStream(adaptor,"rule tableBuckets");
        pushMsg("alter partition cluster by sort by statement", state);
        try {
            // HiveParser.g:1215:3: ( KW_NOT KW_CLUSTERED -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_CLUSTERED ) | KW_NOT KW_SORTED -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_SORTED ) | tableBuckets -> ^( TOK_ALTERTABLE_CLUSTER_SORT tableBuckets ) )
            int alt92=3;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==KW_NOT) ) {
                int LA92_1 = input.LA(2);

                if ( (LA92_1==KW_CLUSTERED) ) {
                    alt92=1;
                }
                else if ( (LA92_1==KW_SORTED) ) {
                    alt92=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 92, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA92_0==KW_CLUSTERED) ) {
                alt92=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;

            }
            switch (alt92) {
                case 1 :
                    // HiveParser.g:1215:5: KW_NOT KW_CLUSTERED
                    {
                    KW_NOT310=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby5485); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT310);


                    KW_CLUSTERED311=(Token)match(input,KW_CLUSTERED,FOLLOW_KW_CLUSTERED_in_alterStatementSuffixClusterbySortby5487); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_CLUSTERED.add(KW_CLUSTERED311);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1215:25: -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_CLUSTERED )
                    {
                        // HiveParser.g:1215:28: ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_CLUSTERED )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERTABLE_CLUSTER_SORT, "TOK_ALTERTABLE_CLUSTER_SORT")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (CommonTree)adaptor.create(TOK_NOT_CLUSTERED, "TOK_NOT_CLUSTERED")
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1216:5: KW_NOT KW_SORTED
                    {
                    KW_NOT312=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby5501); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT312);


                    KW_SORTED313=(Token)match(input,KW_SORTED,FOLLOW_KW_SORTED_in_alterStatementSuffixClusterbySortby5503); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SORTED.add(KW_SORTED313);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1216:22: -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_SORTED )
                    {
                        // HiveParser.g:1216:25: ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_SORTED )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERTABLE_CLUSTER_SORT, "TOK_ALTERTABLE_CLUSTER_SORT")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (CommonTree)adaptor.create(TOK_NOT_SORTED, "TOK_NOT_SORTED")
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:1217:5: tableBuckets
                    {
                    pushFollow(FOLLOW_tableBuckets_in_alterStatementSuffixClusterbySortby5517);
                    tableBuckets314=tableBuckets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableBuckets.add(tableBuckets314.getTree());

                    // AST REWRITE
                    // elements: tableBuckets
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1217:18: -> ^( TOK_ALTERTABLE_CLUSTER_SORT tableBuckets )
                    {
                        // HiveParser.g:1217:21: ^( TOK_ALTERTABLE_CLUSTER_SORT tableBuckets )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERTABLE_CLUSTER_SORT, "TOK_ALTERTABLE_CLUSTER_SORT")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableBuckets.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixClusterbySortby"


    public static class alterTblPartitionStatementSuffixSkewedLocation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterTblPartitionStatementSuffixSkewedLocation"
    // HiveParser.g:1220:1: alterTblPartitionStatementSuffixSkewedLocation : KW_SET KW_SKEWED KW_LOCATION skewedLocations -> ^( TOK_ALTERTABLE_SKEWED_LOCATION skewedLocations ) ;
    public final HiveParser.alterTblPartitionStatementSuffixSkewedLocation_return alterTblPartitionStatementSuffixSkewedLocation() throws RecognitionException {
        HiveParser.alterTblPartitionStatementSuffixSkewedLocation_return retval = new HiveParser.alterTblPartitionStatementSuffixSkewedLocation_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_SET315=null;
        Token KW_SKEWED316=null;
        Token KW_LOCATION317=null;
        HiveParser.skewedLocations_return skewedLocations318 =null;


        CommonTree KW_SET315_tree=null;
        CommonTree KW_SKEWED316_tree=null;
        CommonTree KW_LOCATION317_tree=null;
        RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");
        RewriteRuleTokenStream stream_KW_SKEWED=new RewriteRuleTokenStream(adaptor,"token KW_SKEWED");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleSubtreeStream stream_skewedLocations=new RewriteRuleSubtreeStream(adaptor,"rule skewedLocations");
        pushMsg("alter partition skewed location", state);
        try {
            // HiveParser.g:1223:3: ( KW_SET KW_SKEWED KW_LOCATION skewedLocations -> ^( TOK_ALTERTABLE_SKEWED_LOCATION skewedLocations ) )
            // HiveParser.g:1223:5: KW_SET KW_SKEWED KW_LOCATION skewedLocations
            {
            KW_SET315=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterTblPartitionStatementSuffixSkewedLocation5548); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET315);


            KW_SKEWED316=(Token)match(input,KW_SKEWED,FOLLOW_KW_SKEWED_in_alterTblPartitionStatementSuffixSkewedLocation5550); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SKEWED.add(KW_SKEWED316);


            KW_LOCATION317=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_alterTblPartitionStatementSuffixSkewedLocation5552); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_LOCATION.add(KW_LOCATION317);


            pushFollow(FOLLOW_skewedLocations_in_alterTblPartitionStatementSuffixSkewedLocation5554);
            skewedLocations318=skewedLocations();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_skewedLocations.add(skewedLocations318.getTree());

            // AST REWRITE
            // elements: skewedLocations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1224:3: -> ^( TOK_ALTERTABLE_SKEWED_LOCATION skewedLocations )
            {
                // HiveParser.g:1224:6: ^( TOK_ALTERTABLE_SKEWED_LOCATION skewedLocations )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_SKEWED_LOCATION, "TOK_ALTERTABLE_SKEWED_LOCATION")
                , root_1);

                adaptor.addChild(root_1, stream_skewedLocations.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterTblPartitionStatementSuffixSkewedLocation"


    public static class skewedLocations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "skewedLocations"
    // HiveParser.g:1227:1: skewedLocations : LPAREN skewedLocationsList RPAREN -> ^( TOK_SKEWED_LOCATIONS skewedLocationsList ) ;
    public final HiveParser.skewedLocations_return skewedLocations() throws RecognitionException {
        HiveParser.skewedLocations_return retval = new HiveParser.skewedLocations_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token LPAREN319=null;
        Token RPAREN321=null;
        HiveParser.skewedLocationsList_return skewedLocationsList320 =null;


        CommonTree LPAREN319_tree=null;
        CommonTree RPAREN321_tree=null;
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_skewedLocationsList=new RewriteRuleSubtreeStream(adaptor,"rule skewedLocationsList");
         pushMsg("skewed locations", state); 
        try {
            // HiveParser.g:1230:5: ( LPAREN skewedLocationsList RPAREN -> ^( TOK_SKEWED_LOCATIONS skewedLocationsList ) )
            // HiveParser.g:1231:7: LPAREN skewedLocationsList RPAREN
            {
            LPAREN319=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_skewedLocations5595); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN319);


            pushFollow(FOLLOW_skewedLocationsList_in_skewedLocations5597);
            skewedLocationsList320=skewedLocationsList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_skewedLocationsList.add(skewedLocationsList320.getTree());

            RPAREN321=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_skewedLocations5599); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN321);


            // AST REWRITE
            // elements: skewedLocationsList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1231:41: -> ^( TOK_SKEWED_LOCATIONS skewedLocationsList )
            {
                // HiveParser.g:1231:44: ^( TOK_SKEWED_LOCATIONS skewedLocationsList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SKEWED_LOCATIONS, "TOK_SKEWED_LOCATIONS")
                , root_1);

                adaptor.addChild(root_1, stream_skewedLocationsList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "skewedLocations"


    public static class skewedLocationsList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "skewedLocationsList"
    // HiveParser.g:1234:1: skewedLocationsList : skewedLocationMap ( COMMA skewedLocationMap )* -> ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ ) ;
    public final HiveParser.skewedLocationsList_return skewedLocationsList() throws RecognitionException {
        HiveParser.skewedLocationsList_return retval = new HiveParser.skewedLocationsList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA323=null;
        HiveParser.skewedLocationMap_return skewedLocationMap322 =null;

        HiveParser.skewedLocationMap_return skewedLocationMap324 =null;


        CommonTree COMMA323_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_skewedLocationMap=new RewriteRuleSubtreeStream(adaptor,"rule skewedLocationMap");
         pushMsg("skewed locations list", state); 
        try {
            // HiveParser.g:1237:5: ( skewedLocationMap ( COMMA skewedLocationMap )* -> ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ ) )
            // HiveParser.g:1238:7: skewedLocationMap ( COMMA skewedLocationMap )*
            {
            pushFollow(FOLLOW_skewedLocationMap_in_skewedLocationsList5640);
            skewedLocationMap322=skewedLocationMap();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_skewedLocationMap.add(skewedLocationMap322.getTree());

            // HiveParser.g:1238:25: ( COMMA skewedLocationMap )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==COMMA) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // HiveParser.g:1238:26: COMMA skewedLocationMap
            	    {
            	    COMMA323=(Token)match(input,COMMA,FOLLOW_COMMA_in_skewedLocationsList5643); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA323);


            	    pushFollow(FOLLOW_skewedLocationMap_in_skewedLocationsList5645);
            	    skewedLocationMap324=skewedLocationMap();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_skewedLocationMap.add(skewedLocationMap324.getTree());

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);


            // AST REWRITE
            // elements: skewedLocationMap
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1238:52: -> ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ )
            {
                // HiveParser.g:1238:55: ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SKEWED_LOCATION_LIST, "TOK_SKEWED_LOCATION_LIST")
                , root_1);

                if ( !(stream_skewedLocationMap.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_skewedLocationMap.hasNext() ) {
                    adaptor.addChild(root_1, stream_skewedLocationMap.nextTree());

                }
                stream_skewedLocationMap.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "skewedLocationsList"


    public static class skewedLocationMap_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "skewedLocationMap"
    // HiveParser.g:1241:1: skewedLocationMap : key= skewedValueLocationElement EQUAL value= StringLiteral -> ^( TOK_SKEWED_LOCATION_MAP $key $value) ;
    public final HiveParser.skewedLocationMap_return skewedLocationMap() throws RecognitionException {
        HiveParser.skewedLocationMap_return retval = new HiveParser.skewedLocationMap_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token value=null;
        Token EQUAL325=null;
        HiveParser.skewedValueLocationElement_return key =null;


        CommonTree value_tree=null;
        CommonTree EQUAL325_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_skewedValueLocationElement=new RewriteRuleSubtreeStream(adaptor,"rule skewedValueLocationElement");
         pushMsg("specifying skewed location map", state); 
        try {
            // HiveParser.g:1244:5: (key= skewedValueLocationElement EQUAL value= StringLiteral -> ^( TOK_SKEWED_LOCATION_MAP $key $value) )
            // HiveParser.g:1245:7: key= skewedValueLocationElement EQUAL value= StringLiteral
            {
            pushFollow(FOLLOW_skewedValueLocationElement_in_skewedLocationMap5691);
            key=skewedValueLocationElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_skewedValueLocationElement.add(key.getTree());

            EQUAL325=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_skewedLocationMap5693); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL325);


            value=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_skewedLocationMap5697); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(value);


            // AST REWRITE
            // elements: value, key
            // token labels: value
            // rule labels: key, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_value=new RewriteRuleTokenStream(adaptor,"token value",value);
            RewriteRuleSubtreeStream stream_key=new RewriteRuleSubtreeStream(adaptor,"rule key",key!=null?key.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1245:64: -> ^( TOK_SKEWED_LOCATION_MAP $key $value)
            {
                // HiveParser.g:1245:67: ^( TOK_SKEWED_LOCATION_MAP $key $value)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SKEWED_LOCATION_MAP, "TOK_SKEWED_LOCATION_MAP")
                , root_1);

                adaptor.addChild(root_1, stream_key.nextTree());

                adaptor.addChild(root_1, stream_value.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "skewedLocationMap"


    public static class alterStatementSuffixLocation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixLocation"
    // HiveParser.g:1248:1: alterStatementSuffixLocation : KW_SET KW_LOCATION newLoc= StringLiteral -> ^( TOK_ALTERTABLE_LOCATION $newLoc) ;
    public final HiveParser.alterStatementSuffixLocation_return alterStatementSuffixLocation() throws RecognitionException {
        HiveParser.alterStatementSuffixLocation_return retval = new HiveParser.alterStatementSuffixLocation_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token newLoc=null;
        Token KW_SET326=null;
        Token KW_LOCATION327=null;

        CommonTree newLoc_tree=null;
        CommonTree KW_SET326_tree=null;
        CommonTree KW_LOCATION327_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");

        pushMsg("alter location", state);
        try {
            // HiveParser.g:1251:3: ( KW_SET KW_LOCATION newLoc= StringLiteral -> ^( TOK_ALTERTABLE_LOCATION $newLoc) )
            // HiveParser.g:1251:5: KW_SET KW_LOCATION newLoc= StringLiteral
            {
            KW_SET326=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixLocation5734); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET326);


            KW_LOCATION327=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_alterStatementSuffixLocation5736); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_LOCATION.add(KW_LOCATION327);


            newLoc=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixLocation5740); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(newLoc);


            // AST REWRITE
            // elements: newLoc
            // token labels: newLoc
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_newLoc=new RewriteRuleTokenStream(adaptor,"token newLoc",newLoc);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1252:3: -> ^( TOK_ALTERTABLE_LOCATION $newLoc)
            {
                // HiveParser.g:1252:6: ^( TOK_ALTERTABLE_LOCATION $newLoc)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_LOCATION, "TOK_ALTERTABLE_LOCATION")
                , root_1);

                adaptor.addChild(root_1, stream_newLoc.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixLocation"


    public static class alterStatementSuffixSkewedby_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixSkewedby"
    // HiveParser.g:1256:1: alterStatementSuffixSkewedby : ( tableSkewed -> ^( TOK_ALTERTABLE_SKEWED tableSkewed ) | KW_NOT KW_SKEWED -> ^( TOK_ALTERTABLE_SKEWED ) | KW_NOT storedAsDirs -> ^( TOK_ALTERTABLE_SKEWED storedAsDirs ) );
    public final HiveParser.alterStatementSuffixSkewedby_return alterStatementSuffixSkewedby() throws RecognitionException {
        HiveParser.alterStatementSuffixSkewedby_return retval = new HiveParser.alterStatementSuffixSkewedby_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_NOT329=null;
        Token KW_SKEWED330=null;
        Token KW_NOT331=null;
        HiveParser.tableSkewed_return tableSkewed328 =null;

        HiveParser.storedAsDirs_return storedAsDirs332 =null;


        CommonTree KW_NOT329_tree=null;
        CommonTree KW_SKEWED330_tree=null;
        CommonTree KW_NOT331_tree=null;
        RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
        RewriteRuleTokenStream stream_KW_SKEWED=new RewriteRuleTokenStream(adaptor,"token KW_SKEWED");
        RewriteRuleSubtreeStream stream_tableSkewed=new RewriteRuleSubtreeStream(adaptor,"rule tableSkewed");
        RewriteRuleSubtreeStream stream_storedAsDirs=new RewriteRuleSubtreeStream(adaptor,"rule storedAsDirs");
        pushMsg("alter skewed by statement", state);
        try {
            // HiveParser.g:1259:2: ( tableSkewed -> ^( TOK_ALTERTABLE_SKEWED tableSkewed ) | KW_NOT KW_SKEWED -> ^( TOK_ALTERTABLE_SKEWED ) | KW_NOT storedAsDirs -> ^( TOK_ALTERTABLE_SKEWED storedAsDirs ) )
            int alt94=3;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==KW_SKEWED) ) {
                alt94=1;
            }
            else if ( (LA94_0==KW_NOT) ) {
                int LA94_2 = input.LA(2);

                if ( (LA94_2==KW_SKEWED) ) {
                    alt94=2;
                }
                else if ( (LA94_2==KW_STORED) ) {
                    alt94=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 94, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 94, 0, input);

                throw nvae;

            }
            switch (alt94) {
                case 1 :
                    // HiveParser.g:1259:4: tableSkewed
                    {
                    pushFollow(FOLLOW_tableSkewed_in_alterStatementSuffixSkewedby5773);
                    tableSkewed328=tableSkewed();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableSkewed.add(tableSkewed328.getTree());

                    // AST REWRITE
                    // elements: tableSkewed
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1260:2: -> ^( TOK_ALTERTABLE_SKEWED tableSkewed )
                    {
                        // HiveParser.g:1260:4: ^( TOK_ALTERTABLE_SKEWED tableSkewed )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERTABLE_SKEWED, "TOK_ALTERTABLE_SKEWED")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableSkewed.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1262:3: KW_NOT KW_SKEWED
                    {
                    KW_NOT329=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby5788); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT329);


                    KW_SKEWED330=(Token)match(input,KW_SKEWED,FOLLOW_KW_SKEWED_in_alterStatementSuffixSkewedby5790); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SKEWED.add(KW_SKEWED330);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1263:2: -> ^( TOK_ALTERTABLE_SKEWED )
                    {
                        // HiveParser.g:1263:4: ^( TOK_ALTERTABLE_SKEWED )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERTABLE_SKEWED, "TOK_ALTERTABLE_SKEWED")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:1265:3: KW_NOT storedAsDirs
                    {
                    KW_NOT331=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby5803); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT331);


                    pushFollow(FOLLOW_storedAsDirs_in_alterStatementSuffixSkewedby5805);
                    storedAsDirs332=storedAsDirs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_storedAsDirs.add(storedAsDirs332.getTree());

                    // AST REWRITE
                    // elements: storedAsDirs
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1266:2: -> ^( TOK_ALTERTABLE_SKEWED storedAsDirs )
                    {
                        // HiveParser.g:1266:4: ^( TOK_ALTERTABLE_SKEWED storedAsDirs )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ALTERTABLE_SKEWED, "TOK_ALTERTABLE_SKEWED")
                        , root_1);

                        adaptor.addChild(root_1, stream_storedAsDirs.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixSkewedby"


    public static class alterStatementSuffixExchangePartition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixExchangePartition"
    // HiveParser.g:1269:1: alterStatementSuffixExchangePartition : KW_EXCHANGE partitionSpec KW_WITH KW_TABLE exchangename= tableName -> ^( TOK_ALTERTABLE_EXCHANGEPARTITION partitionSpec $exchangename) ;
    public final HiveParser.alterStatementSuffixExchangePartition_return alterStatementSuffixExchangePartition() throws RecognitionException {
        HiveParser.alterStatementSuffixExchangePartition_return retval = new HiveParser.alterStatementSuffixExchangePartition_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_EXCHANGE333=null;
        Token KW_WITH335=null;
        Token KW_TABLE336=null;
        HiveParser_FromClauseParser.tableName_return exchangename =null;

        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec334 =null;


        CommonTree KW_EXCHANGE333_tree=null;
        CommonTree KW_WITH335_tree=null;
        CommonTree KW_TABLE336_tree=null;
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_EXCHANGE=new RewriteRuleTokenStream(adaptor,"token KW_EXCHANGE");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        pushMsg("alter exchange partition", state);
        try {
            // HiveParser.g:1272:5: ( KW_EXCHANGE partitionSpec KW_WITH KW_TABLE exchangename= tableName -> ^( TOK_ALTERTABLE_EXCHANGEPARTITION partitionSpec $exchangename) )
            // HiveParser.g:1272:7: KW_EXCHANGE partitionSpec KW_WITH KW_TABLE exchangename= tableName
            {
            KW_EXCHANGE333=(Token)match(input,KW_EXCHANGE,FOLLOW_KW_EXCHANGE_in_alterStatementSuffixExchangePartition5836); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_EXCHANGE.add(KW_EXCHANGE333);


            pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixExchangePartition5838);
            partitionSpec334=partitionSpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec334.getTree());

            KW_WITH335=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_alterStatementSuffixExchangePartition5840); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH335);


            KW_TABLE336=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_alterStatementSuffixExchangePartition5842); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE336);


            pushFollow(FOLLOW_tableName_in_alterStatementSuffixExchangePartition5846);
            exchangename=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(exchangename.getTree());

            // AST REWRITE
            // elements: exchangename, partitionSpec
            // token labels: 
            // rule labels: exchangename, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_exchangename=new RewriteRuleSubtreeStream(adaptor,"rule exchangename",exchangename!=null?exchangename.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1273:5: -> ^( TOK_ALTERTABLE_EXCHANGEPARTITION partitionSpec $exchangename)
            {
                // HiveParser.g:1273:8: ^( TOK_ALTERTABLE_EXCHANGEPARTITION partitionSpec $exchangename)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_EXCHANGEPARTITION, "TOK_ALTERTABLE_EXCHANGEPARTITION")
                , root_1);

                adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                adaptor.addChild(root_1, stream_exchangename.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixExchangePartition"


    public static class alterStatementSuffixProtectMode_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixProtectMode"
    // HiveParser.g:1276:1: alterStatementSuffixProtectMode : alterProtectMode -> ^( TOK_ALTERTABLE_PROTECTMODE alterProtectMode ) ;
    public final HiveParser.alterStatementSuffixProtectMode_return alterStatementSuffixProtectMode() throws RecognitionException {
        HiveParser.alterStatementSuffixProtectMode_return retval = new HiveParser.alterStatementSuffixProtectMode_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.alterProtectMode_return alterProtectMode337 =null;


        RewriteRuleSubtreeStream stream_alterProtectMode=new RewriteRuleSubtreeStream(adaptor,"rule alterProtectMode");
         pushMsg("alter partition protect mode statement", state); 
        try {
            // HiveParser.g:1279:5: ( alterProtectMode -> ^( TOK_ALTERTABLE_PROTECTMODE alterProtectMode ) )
            // HiveParser.g:1279:7: alterProtectMode
            {
            pushFollow(FOLLOW_alterProtectMode_in_alterStatementSuffixProtectMode5888);
            alterProtectMode337=alterProtectMode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_alterProtectMode.add(alterProtectMode337.getTree());

            // AST REWRITE
            // elements: alterProtectMode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1280:5: -> ^( TOK_ALTERTABLE_PROTECTMODE alterProtectMode )
            {
                // HiveParser.g:1280:8: ^( TOK_ALTERTABLE_PROTECTMODE alterProtectMode )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_PROTECTMODE, "TOK_ALTERTABLE_PROTECTMODE")
                , root_1);

                adaptor.addChild(root_1, stream_alterProtectMode.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixProtectMode"


    public static class alterStatementSuffixRenamePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixRenamePart"
    // HiveParser.g:1283:1: alterStatementSuffixRenamePart : KW_RENAME KW_TO partitionSpec -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec ) ;
    public final HiveParser.alterStatementSuffixRenamePart_return alterStatementSuffixRenamePart() throws RecognitionException {
        HiveParser.alterStatementSuffixRenamePart_return retval = new HiveParser.alterStatementSuffixRenamePart_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_RENAME338=null;
        Token KW_TO339=null;
        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec340 =null;


        CommonTree KW_RENAME338_tree=null;
        CommonTree KW_TO339_tree=null;
        RewriteRuleTokenStream stream_KW_RENAME=new RewriteRuleTokenStream(adaptor,"token KW_RENAME");
        RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         pushMsg("alter table rename partition statement", state); 
        try {
            // HiveParser.g:1286:5: ( KW_RENAME KW_TO partitionSpec -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec ) )
            // HiveParser.g:1286:7: KW_RENAME KW_TO partitionSpec
            {
            KW_RENAME338=(Token)match(input,KW_RENAME,FOLLOW_KW_RENAME_in_alterStatementSuffixRenamePart5927); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_RENAME.add(KW_RENAME338);


            KW_TO339=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_alterStatementSuffixRenamePart5929); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TO.add(KW_TO339);


            pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixRenamePart5931);
            partitionSpec340=partitionSpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec340.getTree());

            // AST REWRITE
            // elements: partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1287:5: -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec )
            {
                // HiveParser.g:1287:7: ^( TOK_ALTERTABLE_RENAMEPART partitionSpec )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_RENAMEPART, "TOK_ALTERTABLE_RENAMEPART")
                , root_1);

                adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixRenamePart"


    public static class alterStatementSuffixStatsPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixStatsPart"
    // HiveParser.g:1290:1: alterStatementSuffixStatsPart : KW_UPDATE KW_STATISTICS KW_FOR ( KW_COLUMN )? colName= identifier KW_SET tableProperties ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? ) ;
    public final HiveParser.alterStatementSuffixStatsPart_return alterStatementSuffixStatsPart() throws RecognitionException {
        HiveParser.alterStatementSuffixStatsPart_return retval = new HiveParser.alterStatementSuffixStatsPart_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token comment=null;
        Token KW_UPDATE341=null;
        Token KW_STATISTICS342=null;
        Token KW_FOR343=null;
        Token KW_COLUMN344=null;
        Token KW_SET345=null;
        Token KW_COMMENT347=null;
        HiveParser_IdentifiersParser.identifier_return colName =null;

        HiveParser.tableProperties_return tableProperties346 =null;


        CommonTree comment_tree=null;
        CommonTree KW_UPDATE341_tree=null;
        CommonTree KW_STATISTICS342_tree=null;
        CommonTree KW_FOR343_tree=null;
        CommonTree KW_COLUMN344_tree=null;
        CommonTree KW_SET345_tree=null;
        CommonTree KW_COMMENT347_tree=null;
        RewriteRuleTokenStream stream_KW_STATISTICS=new RewriteRuleTokenStream(adaptor,"token KW_STATISTICS");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
        RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleTokenStream stream_KW_COLUMN=new RewriteRuleTokenStream(adaptor,"token KW_COLUMN");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
         pushMsg("alter table stats partition statement", state); 
        try {
            // HiveParser.g:1293:5: ( KW_UPDATE KW_STATISTICS KW_FOR ( KW_COLUMN )? colName= identifier KW_SET tableProperties ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? ) )
            // HiveParser.g:1293:7: KW_UPDATE KW_STATISTICS KW_FOR ( KW_COLUMN )? colName= identifier KW_SET tableProperties ( KW_COMMENT comment= StringLiteral )?
            {
            KW_UPDATE341=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_alterStatementSuffixStatsPart5969); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_UPDATE.add(KW_UPDATE341);


            KW_STATISTICS342=(Token)match(input,KW_STATISTICS,FOLLOW_KW_STATISTICS_in_alterStatementSuffixStatsPart5971); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_STATISTICS.add(KW_STATISTICS342);


            KW_FOR343=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_alterStatementSuffixStatsPart5973); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR343);


            // HiveParser.g:1293:38: ( KW_COLUMN )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==KW_COLUMN) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // HiveParser.g:1293:38: KW_COLUMN
                    {
                    KW_COLUMN344=(Token)match(input,KW_COLUMN,FOLLOW_KW_COLUMN_in_alterStatementSuffixStatsPart5975); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_COLUMN.add(KW_COLUMN344);


                    }
                    break;

            }


            pushFollow(FOLLOW_identifier_in_alterStatementSuffixStatsPart5980);
            colName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());

            KW_SET345=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixStatsPart5982); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET345);


            pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixStatsPart5984);
            tableProperties346=tableProperties();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties346.getTree());

            // HiveParser.g:1293:91: ( KW_COMMENT comment= StringLiteral )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==KW_COMMENT) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // HiveParser.g:1293:92: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT347=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_alterStatementSuffixStatsPart5987); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT347);


                    comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixStatsPart5991); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(comment);


                    }
                    break;

            }


            // AST REWRITE
            // elements: colName, comment, tableProperties
            // token labels: comment
            // rule labels: colName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1294:5: -> ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? )
            {
                // HiveParser.g:1294:7: ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_UPDATECOLSTATS, "TOK_ALTERTABLE_UPDATECOLSTATS")
                , root_1);

                adaptor.addChild(root_1, stream_colName.nextTree());

                adaptor.addChild(root_1, stream_tableProperties.nextTree());

                // HiveParser.g:1294:65: ( $comment)?
                if ( stream_comment.hasNext() ) {
                    adaptor.addChild(root_1, stream_comment.nextNode());

                }
                stream_comment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixStatsPart"


    public static class alterStatementSuffixMergeFiles_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixMergeFiles"
    // HiveParser.g:1297:1: alterStatementSuffixMergeFiles : KW_CONCATENATE -> ^( TOK_ALTERTABLE_MERGEFILES ) ;
    public final HiveParser.alterStatementSuffixMergeFiles_return alterStatementSuffixMergeFiles() throws RecognitionException {
        HiveParser.alterStatementSuffixMergeFiles_return retval = new HiveParser.alterStatementSuffixMergeFiles_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_CONCATENATE348=null;

        CommonTree KW_CONCATENATE348_tree=null;
        RewriteRuleTokenStream stream_KW_CONCATENATE=new RewriteRuleTokenStream(adaptor,"token KW_CONCATENATE");

         pushMsg("", state); 
        try {
            // HiveParser.g:1300:5: ( KW_CONCATENATE -> ^( TOK_ALTERTABLE_MERGEFILES ) )
            // HiveParser.g:1300:7: KW_CONCATENATE
            {
            KW_CONCATENATE348=(Token)match(input,KW_CONCATENATE,FOLLOW_KW_CONCATENATE_in_alterStatementSuffixMergeFiles6038); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_CONCATENATE.add(KW_CONCATENATE348);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1301:5: -> ^( TOK_ALTERTABLE_MERGEFILES )
            {
                // HiveParser.g:1301:8: ^( TOK_ALTERTABLE_MERGEFILES )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_MERGEFILES, "TOK_ALTERTABLE_MERGEFILES")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixMergeFiles"


    public static class alterProtectMode_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterProtectMode"
    // HiveParser.g:1304:1: alterProtectMode : ( KW_ENABLE alterProtectModeMode -> ^( TOK_ENABLE alterProtectModeMode ) | KW_DISABLE alterProtectModeMode -> ^( TOK_DISABLE alterProtectModeMode ) );
    public final HiveParser.alterProtectMode_return alterProtectMode() throws RecognitionException {
        HiveParser.alterProtectMode_return retval = new HiveParser.alterProtectMode_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_ENABLE349=null;
        Token KW_DISABLE351=null;
        HiveParser.alterProtectModeMode_return alterProtectModeMode350 =null;

        HiveParser.alterProtectModeMode_return alterProtectModeMode352 =null;


        CommonTree KW_ENABLE349_tree=null;
        CommonTree KW_DISABLE351_tree=null;
        RewriteRuleTokenStream stream_KW_DISABLE=new RewriteRuleTokenStream(adaptor,"token KW_DISABLE");
        RewriteRuleTokenStream stream_KW_ENABLE=new RewriteRuleTokenStream(adaptor,"token KW_ENABLE");
        RewriteRuleSubtreeStream stream_alterProtectModeMode=new RewriteRuleSubtreeStream(adaptor,"rule alterProtectModeMode");
         pushMsg("protect mode specification enable", state); 
        try {
            // HiveParser.g:1307:5: ( KW_ENABLE alterProtectModeMode -> ^( TOK_ENABLE alterProtectModeMode ) | KW_DISABLE alterProtectModeMode -> ^( TOK_DISABLE alterProtectModeMode ) )
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==KW_ENABLE) ) {
                alt97=1;
            }
            else if ( (LA97_0==KW_DISABLE) ) {
                alt97=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;

            }
            switch (alt97) {
                case 1 :
                    // HiveParser.g:1307:7: KW_ENABLE alterProtectModeMode
                    {
                    KW_ENABLE349=(Token)match(input,KW_ENABLE,FOLLOW_KW_ENABLE_in_alterProtectMode6075); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ENABLE.add(KW_ENABLE349);


                    pushFollow(FOLLOW_alterProtectModeMode_in_alterProtectMode6077);
                    alterProtectModeMode350=alterProtectModeMode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alterProtectModeMode.add(alterProtectModeMode350.getTree());

                    // AST REWRITE
                    // elements: alterProtectModeMode
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1307:39: -> ^( TOK_ENABLE alterProtectModeMode )
                    {
                        // HiveParser.g:1307:42: ^( TOK_ENABLE alterProtectModeMode )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ENABLE, "TOK_ENABLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_alterProtectModeMode.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1308:7: KW_DISABLE alterProtectModeMode
                    {
                    KW_DISABLE351=(Token)match(input,KW_DISABLE,FOLLOW_KW_DISABLE_in_alterProtectMode6094); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DISABLE.add(KW_DISABLE351);


                    pushFollow(FOLLOW_alterProtectModeMode_in_alterProtectMode6096);
                    alterProtectModeMode352=alterProtectModeMode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alterProtectModeMode.add(alterProtectModeMode352.getTree());

                    // AST REWRITE
                    // elements: alterProtectModeMode
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1308:40: -> ^( TOK_DISABLE alterProtectModeMode )
                    {
                        // HiveParser.g:1308:43: ^( TOK_DISABLE alterProtectModeMode )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_DISABLE, "TOK_DISABLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_alterProtectModeMode.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterProtectMode"


    public static class alterProtectModeMode_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterProtectModeMode"
    // HiveParser.g:1311:1: alterProtectModeMode : ( KW_OFFLINE -> ^( TOK_OFFLINE ) | KW_NO_DROP ( KW_CASCADE )? -> ^( TOK_NO_DROP ( KW_CASCADE )? ) | KW_READONLY -> ^( TOK_READONLY ) );
    public final HiveParser.alterProtectModeMode_return alterProtectModeMode() throws RecognitionException {
        HiveParser.alterProtectModeMode_return retval = new HiveParser.alterProtectModeMode_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_OFFLINE353=null;
        Token KW_NO_DROP354=null;
        Token KW_CASCADE355=null;
        Token KW_READONLY356=null;

        CommonTree KW_OFFLINE353_tree=null;
        CommonTree KW_NO_DROP354_tree=null;
        CommonTree KW_CASCADE355_tree=null;
        CommonTree KW_READONLY356_tree=null;
        RewriteRuleTokenStream stream_KW_CASCADE=new RewriteRuleTokenStream(adaptor,"token KW_CASCADE");
        RewriteRuleTokenStream stream_KW_READONLY=new RewriteRuleTokenStream(adaptor,"token KW_READONLY");
        RewriteRuleTokenStream stream_KW_OFFLINE=new RewriteRuleTokenStream(adaptor,"token KW_OFFLINE");
        RewriteRuleTokenStream stream_KW_NO_DROP=new RewriteRuleTokenStream(adaptor,"token KW_NO_DROP");

         pushMsg("protect mode specification enable", state); 
        try {
            // HiveParser.g:1314:5: ( KW_OFFLINE -> ^( TOK_OFFLINE ) | KW_NO_DROP ( KW_CASCADE )? -> ^( TOK_NO_DROP ( KW_CASCADE )? ) | KW_READONLY -> ^( TOK_READONLY ) )
            int alt99=3;
            switch ( input.LA(1) ) {
            case KW_OFFLINE:
                {
                alt99=1;
                }
                break;
            case KW_NO_DROP:
                {
                alt99=2;
                }
                break;
            case KW_READONLY:
                {
                alt99=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;

            }

            switch (alt99) {
                case 1 :
                    // HiveParser.g:1314:7: KW_OFFLINE
                    {
                    KW_OFFLINE353=(Token)match(input,KW_OFFLINE,FOLLOW_KW_OFFLINE_in_alterProtectModeMode6132); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_OFFLINE.add(KW_OFFLINE353);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1314:19: -> ^( TOK_OFFLINE )
                    {
                        // HiveParser.g:1314:22: ^( TOK_OFFLINE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_OFFLINE, "TOK_OFFLINE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1315:7: KW_NO_DROP ( KW_CASCADE )?
                    {
                    KW_NO_DROP354=(Token)match(input,KW_NO_DROP,FOLLOW_KW_NO_DROP_in_alterProtectModeMode6147); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_NO_DROP.add(KW_NO_DROP354);


                    // HiveParser.g:1315:18: ( KW_CASCADE )?
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==KW_CASCADE) ) {
                        alt98=1;
                    }
                    switch (alt98) {
                        case 1 :
                            // HiveParser.g:1315:18: KW_CASCADE
                            {
                            KW_CASCADE355=(Token)match(input,KW_CASCADE,FOLLOW_KW_CASCADE_in_alterProtectModeMode6149); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_CASCADE.add(KW_CASCADE355);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: KW_CASCADE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1315:30: -> ^( TOK_NO_DROP ( KW_CASCADE )? )
                    {
                        // HiveParser.g:1315:33: ^( TOK_NO_DROP ( KW_CASCADE )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_NO_DROP, "TOK_NO_DROP")
                        , root_1);

                        // HiveParser.g:1315:47: ( KW_CASCADE )?
                        if ( stream_KW_CASCADE.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_KW_CASCADE.nextNode()
                            );

                        }
                        stream_KW_CASCADE.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:1316:7: KW_READONLY
                    {
                    KW_READONLY356=(Token)match(input,KW_READONLY,FOLLOW_KW_READONLY_in_alterProtectModeMode6167); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_READONLY.add(KW_READONLY356);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1316:20: -> ^( TOK_READONLY )
                    {
                        // HiveParser.g:1316:23: ^( TOK_READONLY )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_READONLY, "TOK_READONLY")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterProtectModeMode"


    public static class alterStatementSuffixBucketNum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixBucketNum"
    // HiveParser.g:1319:1: alterStatementSuffixBucketNum : KW_INTO num= Number KW_BUCKETS -> ^( TOK_ALTERTABLE_BUCKETS $num) ;
    public final HiveParser.alterStatementSuffixBucketNum_return alterStatementSuffixBucketNum() throws RecognitionException {
        HiveParser.alterStatementSuffixBucketNum_return retval = new HiveParser.alterStatementSuffixBucketNum_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token num=null;
        Token KW_INTO357=null;
        Token KW_BUCKETS358=null;

        CommonTree num_tree=null;
        CommonTree KW_INTO357_tree=null;
        CommonTree KW_BUCKETS358_tree=null;
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
        RewriteRuleTokenStream stream_KW_BUCKETS=new RewriteRuleTokenStream(adaptor,"token KW_BUCKETS");

         pushMsg("", state); 
        try {
            // HiveParser.g:1322:5: ( KW_INTO num= Number KW_BUCKETS -> ^( TOK_ALTERTABLE_BUCKETS $num) )
            // HiveParser.g:1322:7: KW_INTO num= Number KW_BUCKETS
            {
            KW_INTO357=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_alterStatementSuffixBucketNum6201); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_INTO.add(KW_INTO357);


            num=(Token)match(input,Number,FOLLOW_Number_in_alterStatementSuffixBucketNum6205); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Number.add(num);


            KW_BUCKETS358=(Token)match(input,KW_BUCKETS,FOLLOW_KW_BUCKETS_in_alterStatementSuffixBucketNum6207); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_BUCKETS.add(KW_BUCKETS358);


            // AST REWRITE
            // elements: num
            // token labels: num
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1323:5: -> ^( TOK_ALTERTABLE_BUCKETS $num)
            {
                // HiveParser.g:1323:8: ^( TOK_ALTERTABLE_BUCKETS $num)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_BUCKETS, "TOK_ALTERTABLE_BUCKETS")
                , root_1);

                adaptor.addChild(root_1, stream_num.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixBucketNum"


    public static class alterStatementSuffixCompact_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterStatementSuffixCompact"
    // HiveParser.g:1326:1: alterStatementSuffixCompact : KW_COMPACT compactType= StringLiteral -> ^( TOK_ALTERTABLE_COMPACT $compactType) ;
    public final HiveParser.alterStatementSuffixCompact_return alterStatementSuffixCompact() throws RecognitionException {
        HiveParser.alterStatementSuffixCompact_return retval = new HiveParser.alterStatementSuffixCompact_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token compactType=null;
        Token KW_COMPACT359=null;

        CommonTree compactType_tree=null;
        CommonTree KW_COMPACT359_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMPACT=new RewriteRuleTokenStream(adaptor,"token KW_COMPACT");

         msgs.push("compaction request"); 
        try {
            // HiveParser.g:1329:5: ( KW_COMPACT compactType= StringLiteral -> ^( TOK_ALTERTABLE_COMPACT $compactType) )
            // HiveParser.g:1329:7: KW_COMPACT compactType= StringLiteral
            {
            KW_COMPACT359=(Token)match(input,KW_COMPACT,FOLLOW_KW_COMPACT_in_alterStatementSuffixCompact6247); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_COMPACT.add(KW_COMPACT359);


            compactType=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixCompact6251); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(compactType);


            // AST REWRITE
            // elements: compactType
            // token labels: compactType
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_compactType=new RewriteRuleTokenStream(adaptor,"token compactType",compactType);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1330:5: -> ^( TOK_ALTERTABLE_COMPACT $compactType)
            {
                // HiveParser.g:1330:8: ^( TOK_ALTERTABLE_COMPACT $compactType)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_COMPACT, "TOK_ALTERTABLE_COMPACT")
                , root_1);

                adaptor.addChild(root_1, stream_compactType.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { msgs.pop(); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterStatementSuffixCompact"


    public static class fileFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fileFormat"
    // HiveParser.g:1334:1: fileFormat : ( KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral KW_SERDE serdeCls= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt $serdeCls ( $inDriver)? ( $outDriver)? ) |genericSpec= identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );
    public final HiveParser.fileFormat_return fileFormat() throws RecognitionException {
        HiveParser.fileFormat_return retval = new HiveParser.fileFormat_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token inFmt=null;
        Token outFmt=null;
        Token serdeCls=null;
        Token inDriver=null;
        Token outDriver=null;
        Token KW_INPUTFORMAT360=null;
        Token KW_OUTPUTFORMAT361=null;
        Token KW_SERDE362=null;
        Token KW_INPUTDRIVER363=null;
        Token KW_OUTPUTDRIVER364=null;
        HiveParser_IdentifiersParser.identifier_return genericSpec =null;


        CommonTree inFmt_tree=null;
        CommonTree outFmt_tree=null;
        CommonTree serdeCls_tree=null;
        CommonTree inDriver_tree=null;
        CommonTree outDriver_tree=null;
        CommonTree KW_INPUTFORMAT360_tree=null;
        CommonTree KW_OUTPUTFORMAT361_tree=null;
        CommonTree KW_SERDE362_tree=null;
        CommonTree KW_INPUTDRIVER363_tree=null;
        CommonTree KW_OUTPUTDRIVER364_tree=null;
        RewriteRuleTokenStream stream_KW_INPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_INPUTFORMAT");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_INPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_INPUTDRIVER");
        RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");
        RewriteRuleTokenStream stream_KW_OUTPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTFORMAT");
        RewriteRuleTokenStream stream_KW_OUTPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTDRIVER");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
         pushMsg("file format specification", state); 
        try {
            // HiveParser.g:1337:5: ( KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral KW_SERDE serdeCls= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt $serdeCls ( $inDriver)? ( $outDriver)? ) |genericSpec= identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) )
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==KW_INPUTFORMAT) ) {
                int LA101_1 = input.LA(2);

                if ( (LA101_1==StringLiteral) ) {
                    alt101=1;
                }
                else if ( (LA101_1==EOF) ) {
                    alt101=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 1, input);

                    throw nvae;

                }
            }
            else if ( ((LA101_0 >= Identifier && LA101_0 <= KW_ANALYZE)||(LA101_0 >= KW_ARCHIVE && LA101_0 <= KW_CASCADE)||LA101_0==KW_CHANGE||(LA101_0 >= KW_CLUSTER && LA101_0 <= KW_COLLECTION)||(LA101_0 >= KW_COLUMNS && LA101_0 <= KW_CONCATENATE)||(LA101_0 >= KW_CONTINUE && LA101_0 <= KW_CREATE)||LA101_0==KW_CUBE||(LA101_0 >= KW_CURRENT_DATE && LA101_0 <= KW_DATA)||(LA101_0 >= KW_DATABASES && LA101_0 <= KW_DISABLE)||(LA101_0 >= KW_DISTRIBUTE && LA101_0 <= KW_ELEM_TYPE)||LA101_0==KW_ENABLE||LA101_0==KW_ESCAPED||(LA101_0 >= KW_EXCLUSIVE && LA101_0 <= KW_EXPORT)||(LA101_0 >= KW_EXTERNAL && LA101_0 <= KW_FLOAT)||(LA101_0 >= KW_FOR && LA101_0 <= KW_FORMATTED)||LA101_0==KW_FULL||(LA101_0 >= KW_FUNCTIONS && LA101_0 <= KW_GROUPING)||(LA101_0 >= KW_HOLD_DDLTIME && LA101_0 <= KW_IDXPROPERTIES)||(LA101_0 >= KW_IGNORE && LA101_0 <= KW_INPUTDRIVER)||(LA101_0 >= KW_INSERT && LA101_0 <= KW_INTERSECT)||(LA101_0 >= KW_INTO && LA101_0 <= KW_JAR)||(LA101_0 >= KW_KEYS && LA101_0 <= KW_LEFT)||(LA101_0 >= KW_LIKE && LA101_0 <= KW_LONG)||(LA101_0 >= KW_MAPJOIN && LA101_0 <= KW_MONTH)||(LA101_0 >= KW_MSCK && LA101_0 <= KW_NOSCAN)||(LA101_0 >= KW_NO_DROP && LA101_0 <= KW_OFFLINE)||LA101_0==KW_OPTION||(LA101_0 >= KW_ORDER && LA101_0 <= KW_OUTPUTFORMAT)||(LA101_0 >= KW_OVERWRITE && LA101_0 <= KW_OWNER)||(LA101_0 >= KW_PARTITION && LA101_0 <= KW_PLUS)||(LA101_0 >= KW_PRETTY && LA101_0 <= KW_RECORDWRITER)||(LA101_0 >= KW_REGEXP && LA101_0 <= KW_SECOND)||(LA101_0 >= KW_SEMI && LA101_0 <= KW_TABLES)||(LA101_0 >= KW_TBLPROPERTIES && LA101_0 <= KW_TERMINATED)||(LA101_0 >= KW_TIMESTAMP && LA101_0 <= KW_TRANSACTIONS)||(LA101_0 >= KW_TRIGGER && LA101_0 <= KW_UNARCHIVE)||(LA101_0 >= KW_UNDO && LA101_0 <= KW_UNIONTYPE)||(LA101_0 >= KW_UNLOCK && LA101_0 <= KW_VALUE_TYPE)||LA101_0==KW_VIEW||LA101_0==KW_WHILE||(LA101_0 >= KW_WITH && LA101_0 <= KW_YEAR)) ) {
                alt101=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);

                throw nvae;

            }
            switch (alt101) {
                case 1 :
                    // HiveParser.g:1337:7: KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral KW_SERDE serdeCls= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
                    {
                    KW_INPUTFORMAT360=(Token)match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_fileFormat6292); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_INPUTFORMAT.add(KW_INPUTFORMAT360);


                    inFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat6296); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(inFmt);


                    KW_OUTPUTFORMAT361=(Token)match(input,KW_OUTPUTFORMAT,FOLLOW_KW_OUTPUTFORMAT_in_fileFormat6298); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_OUTPUTFORMAT.add(KW_OUTPUTFORMAT361);


                    outFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat6302); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(outFmt);


                    KW_SERDE362=(Token)match(input,KW_SERDE,FOLLOW_KW_SERDE_in_fileFormat6304); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SERDE.add(KW_SERDE362);


                    serdeCls=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat6308); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(serdeCls);


                    // HiveParser.g:1337:111: ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==KW_INPUTDRIVER) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            // HiveParser.g:1337:112: KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral
                            {
                            KW_INPUTDRIVER363=(Token)match(input,KW_INPUTDRIVER,FOLLOW_KW_INPUTDRIVER_in_fileFormat6311); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_INPUTDRIVER.add(KW_INPUTDRIVER363);


                            inDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat6315); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_StringLiteral.add(inDriver);


                            KW_OUTPUTDRIVER364=(Token)match(input,KW_OUTPUTDRIVER,FOLLOW_KW_OUTPUTDRIVER_in_fileFormat6317); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_OUTPUTDRIVER.add(KW_OUTPUTDRIVER364);


                            outDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat6321); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_StringLiteral.add(outDriver);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: outFmt, outDriver, inDriver, serdeCls, inFmt
                    // token labels: inFmt, inDriver, outDriver, serdeCls, outFmt
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_inFmt=new RewriteRuleTokenStream(adaptor,"token inFmt",inFmt);
                    RewriteRuleTokenStream stream_inDriver=new RewriteRuleTokenStream(adaptor,"token inDriver",inDriver);
                    RewriteRuleTokenStream stream_outDriver=new RewriteRuleTokenStream(adaptor,"token outDriver",outDriver);
                    RewriteRuleTokenStream stream_serdeCls=new RewriteRuleTokenStream(adaptor,"token serdeCls",serdeCls);
                    RewriteRuleTokenStream stream_outFmt=new RewriteRuleTokenStream(adaptor,"token outFmt",outFmt);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1338:7: -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt $serdeCls ( $inDriver)? ( $outDriver)? )
                    {
                        // HiveParser.g:1338:10: ^( TOK_TABLEFILEFORMAT $inFmt $outFmt $serdeCls ( $inDriver)? ( $outDriver)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_TABLEFILEFORMAT, "TOK_TABLEFILEFORMAT")
                        , root_1);

                        adaptor.addChild(root_1, stream_inFmt.nextNode());

                        adaptor.addChild(root_1, stream_outFmt.nextNode());

                        adaptor.addChild(root_1, stream_serdeCls.nextNode());

                        // HiveParser.g:1338:58: ( $inDriver)?
                        if ( stream_inDriver.hasNext() ) {
                            adaptor.addChild(root_1, stream_inDriver.nextNode());

                        }
                        stream_inDriver.reset();

                        // HiveParser.g:1338:69: ( $outDriver)?
                        if ( stream_outDriver.hasNext() ) {
                            adaptor.addChild(root_1, stream_outDriver.nextNode());

                        }
                        stream_outDriver.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1339:7: genericSpec= identifier
                    {
                    pushFollow(FOLLOW_identifier_in_fileFormat6362);
                    genericSpec=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(genericSpec.getTree());

                    // AST REWRITE
                    // elements: genericSpec
                    // token labels: 
                    // rule labels: genericSpec, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_genericSpec=new RewriteRuleSubtreeStream(adaptor,"rule genericSpec",genericSpec!=null?genericSpec.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1339:30: -> ^( TOK_FILEFORMAT_GENERIC $genericSpec)
                    {
                        // HiveParser.g:1339:33: ^( TOK_FILEFORMAT_GENERIC $genericSpec)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_FILEFORMAT_GENERIC, "TOK_FILEFORMAT_GENERIC")
                        , root_1);

                        adaptor.addChild(root_1, stream_genericSpec.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fileFormat"


    public static class tabTypeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tabTypeExpr"
    // HiveParser.g:1342:1: tabTypeExpr : identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* ( identifier )? ;
    public final HiveParser.tabTypeExpr_return tabTypeExpr() throws RecognitionException {
        HiveParser.tabTypeExpr_return retval = new HiveParser.tabTypeExpr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token DOT366=null;
        Token KW_ELEM_TYPE367=null;
        Token KW_KEY_TYPE368=null;
        Token KW_VALUE_TYPE369=null;
        HiveParser_IdentifiersParser.identifier_return identifier365 =null;

        HiveParser_IdentifiersParser.identifier_return identifier370 =null;

        HiveParser_IdentifiersParser.identifier_return identifier371 =null;


        CommonTree DOT366_tree=null;
        CommonTree KW_ELEM_TYPE367_tree=null;
        CommonTree KW_KEY_TYPE368_tree=null;
        CommonTree KW_VALUE_TYPE369_tree=null;

         pushMsg("specifying table types", state); 
        try {
            // HiveParser.g:1345:4: ( identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* ( identifier )? )
            // HiveParser.g:1345:6: identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* ( identifier )?
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_tabTypeExpr6397);
            identifier365=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier365.getTree());

            // HiveParser.g:1345:17: ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==DOT) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // HiveParser.g:1345:18: DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier )
            	    {
            	    DOT366=(Token)match(input,DOT,FOLLOW_DOT_in_tabTypeExpr6400); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOT366_tree = 
            	    (CommonTree)adaptor.create(DOT366)
            	    ;
            	    root_0 = (CommonTree)adaptor.becomeRoot(DOT366_tree, root_0);
            	    }

            	    // HiveParser.g:1346:4: ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier )
            	    int alt102=4;
            	    switch ( input.LA(1) ) {
            	    case KW_ELEM_TYPE:
            	        {
            	        int LA102_1 = input.LA(2);

            	        if ( (synpred4_HiveParser()) ) {
            	            alt102=1;
            	        }
            	        else if ( (true) ) {
            	            alt102=4;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 102, 1, input);

            	            throw nvae;

            	        }
            	        }
            	        break;
            	    case KW_KEY_TYPE:
            	        {
            	        int LA102_2 = input.LA(2);

            	        if ( (synpred5_HiveParser()) ) {
            	            alt102=2;
            	        }
            	        else if ( (true) ) {
            	            alt102=4;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 102, 2, input);

            	            throw nvae;

            	        }
            	        }
            	        break;
            	    case KW_VALUE_TYPE:
            	        {
            	        int LA102_3 = input.LA(2);

            	        if ( (synpred6_HiveParser()) ) {
            	            alt102=3;
            	        }
            	        else if ( (true) ) {
            	            alt102=4;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 102, 3, input);

            	            throw nvae;

            	        }
            	        }
            	        break;
            	    case Identifier:
            	    case KW_ADD:
            	    case KW_ADMIN:
            	    case KW_AFTER:
            	    case KW_ALL:
            	    case KW_ALTER:
            	    case KW_ANALYZE:
            	    case KW_ARCHIVE:
            	    case KW_ARRAY:
            	    case KW_AS:
            	    case KW_ASC:
            	    case KW_AUTHORIZATION:
            	    case KW_BEFORE:
            	    case KW_BETWEEN:
            	    case KW_BIGINT:
            	    case KW_BINARY:
            	    case KW_BOOLEAN:
            	    case KW_BOTH:
            	    case KW_BUCKET:
            	    case KW_BUCKETS:
            	    case KW_BY:
            	    case KW_CASCADE:
            	    case KW_CHANGE:
            	    case KW_CLUSTER:
            	    case KW_CLUSTERED:
            	    case KW_CLUSTERSTATUS:
            	    case KW_COLLECTION:
            	    case KW_COLUMNS:
            	    case KW_COMMENT:
            	    case KW_COMPACT:
            	    case KW_COMPACTIONS:
            	    case KW_COMPUTE:
            	    case KW_CONCATENATE:
            	    case KW_CONTINUE:
            	    case KW_CREATE:
            	    case KW_CUBE:
            	    case KW_CURRENT_DATE:
            	    case KW_CURRENT_TIMESTAMP:
            	    case KW_CURSOR:
            	    case KW_DATA:
            	    case KW_DATABASES:
            	    case KW_DATE:
            	    case KW_DATETIME:
            	    case KW_DAY:
            	    case KW_DBPROPERTIES:
            	    case KW_DECIMAL:
            	    case KW_DEFERRED:
            	    case KW_DEFINED:
            	    case KW_DELETE:
            	    case KW_DELIMITED:
            	    case KW_DEPENDENCY:
            	    case KW_DESC:
            	    case KW_DESCRIBE:
            	    case KW_DIRECTORIES:
            	    case KW_DIRECTORY:
            	    case KW_DISABLE:
            	    case KW_DISTRIBUTE:
            	    case KW_DOUBLE:
            	    case KW_DROP:
            	    case KW_ENABLE:
            	    case KW_ESCAPED:
            	    case KW_EXCLUSIVE:
            	    case KW_EXISTS:
            	    case KW_EXPLAIN:
            	    case KW_EXPORT:
            	    case KW_EXTERNAL:
            	    case KW_FALSE:
            	    case KW_FETCH:
            	    case KW_FIELDS:
            	    case KW_FILE:
            	    case KW_FILEFORMAT:
            	    case KW_FIRST:
            	    case KW_FLOAT:
            	    case KW_FOR:
            	    case KW_FORMAT:
            	    case KW_FORMATTED:
            	    case KW_FULL:
            	    case KW_FUNCTIONS:
            	    case KW_GRANT:
            	    case KW_GROUP:
            	    case KW_GROUPING:
            	    case KW_HOLD_DDLTIME:
            	    case KW_HOUR:
            	    case KW_IDXPROPERTIES:
            	    case KW_IGNORE:
            	    case KW_IMPORT:
            	    case KW_IN:
            	    case KW_INDEX:
            	    case KW_INDEXES:
            	    case KW_INNER:
            	    case KW_INPATH:
            	    case KW_INPUTDRIVER:
            	    case KW_INPUTFORMAT:
            	    case KW_INSERT:
            	    case KW_INT:
            	    case KW_INTERSECT:
            	    case KW_INTO:
            	    case KW_IS:
            	    case KW_ITEMS:
            	    case KW_JAR:
            	    case KW_KEYS:
            	    case KW_LATERAL:
            	    case KW_LEFT:
            	    case KW_LIKE:
            	    case KW_LIMIT:
            	    case KW_LINES:
            	    case KW_LOAD:
            	    case KW_LOCAL:
            	    case KW_LOCATION:
            	    case KW_LOCK:
            	    case KW_LOCKS:
            	    case KW_LOGICAL:
            	    case KW_LONG:
            	    case KW_MAPJOIN:
            	    case KW_MATERIALIZED:
            	    case KW_METADATA:
            	    case KW_MINUS:
            	    case KW_MINUTE:
            	    case KW_MONTH:
            	    case KW_MSCK:
            	    case KW_NONE:
            	    case KW_NOSCAN:
            	    case KW_NO_DROP:
            	    case KW_NULL:
            	    case KW_OF:
            	    case KW_OFFLINE:
            	    case KW_OPTION:
            	    case KW_ORDER:
            	    case KW_OUT:
            	    case KW_OUTER:
            	    case KW_OUTPUTDRIVER:
            	    case KW_OUTPUTFORMAT:
            	    case KW_OVERWRITE:
            	    case KW_OWNER:
            	    case KW_PARTITION:
            	    case KW_PARTITIONED:
            	    case KW_PARTITIONS:
            	    case KW_PERCENT:
            	    case KW_PLUS:
            	    case KW_PRETTY:
            	    case KW_PRINCIPALS:
            	    case KW_PROCEDURE:
            	    case KW_PROTECTION:
            	    case KW_PURGE:
            	    case KW_RANGE:
            	    case KW_READ:
            	    case KW_READONLY:
            	    case KW_READS:
            	    case KW_REBUILD:
            	    case KW_RECORDREADER:
            	    case KW_RECORDWRITER:
            	    case KW_REGEXP:
            	    case KW_RELOAD:
            	    case KW_RENAME:
            	    case KW_REPAIR:
            	    case KW_REPLACE:
            	    case KW_REPLICATION:
            	    case KW_RESTRICT:
            	    case KW_REVOKE:
            	    case KW_REWRITE:
            	    case KW_RIGHT:
            	    case KW_RLIKE:
            	    case KW_ROLE:
            	    case KW_ROLES:
            	    case KW_ROLLUP:
            	    case KW_ROW:
            	    case KW_ROWS:
            	    case KW_SCHEMA:
            	    case KW_SCHEMAS:
            	    case KW_SECOND:
            	    case KW_SEMI:
            	    case KW_SERDE:
            	    case KW_SERDEPROPERTIES:
            	    case KW_SERVER:
            	    case KW_SET:
            	    case KW_SETS:
            	    case KW_SHARED:
            	    case KW_SHOW:
            	    case KW_SHOW_DATABASE:
            	    case KW_SKEWED:
            	    case KW_SMALLINT:
            	    case KW_SORT:
            	    case KW_SORTED:
            	    case KW_SSL:
            	    case KW_STATISTICS:
            	    case KW_STORED:
            	    case KW_STREAMTABLE:
            	    case KW_STRING:
            	    case KW_STRUCT:
            	    case KW_TABLE:
            	    case KW_TABLES:
            	    case KW_TBLPROPERTIES:
            	    case KW_TEMPORARY:
            	    case KW_TERMINATED:
            	    case KW_TIMESTAMP:
            	    case KW_TINYINT:
            	    case KW_TO:
            	    case KW_TOUCH:
            	    case KW_TRANSACTIONS:
            	    case KW_TRIGGER:
            	    case KW_TRUE:
            	    case KW_TRUNCATE:
            	    case KW_UNARCHIVE:
            	    case KW_UNDO:
            	    case KW_UNION:
            	    case KW_UNIONTYPE:
            	    case KW_UNLOCK:
            	    case KW_UNSET:
            	    case KW_UNSIGNED:
            	    case KW_UPDATE:
            	    case KW_URI:
            	    case KW_USE:
            	    case KW_USER:
            	    case KW_USING:
            	    case KW_UTC:
            	    case KW_UTCTIMESTAMP:
            	    case KW_VALUES:
            	    case KW_VIEW:
            	    case KW_WHILE:
            	    case KW_WITH:
            	    case KW_YEAR:
            	        {
            	        alt102=4;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 102, 0, input);

            	        throw nvae;

            	    }

            	    switch (alt102) {
            	        case 1 :
            	            // HiveParser.g:1347:4: ( KW_ELEM_TYPE )=> KW_ELEM_TYPE
            	            {
            	            KW_ELEM_TYPE367=(Token)match(input,KW_ELEM_TYPE,FOLLOW_KW_ELEM_TYPE_in_tabTypeExpr6417); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            KW_ELEM_TYPE367_tree = 
            	            (CommonTree)adaptor.create(KW_ELEM_TYPE367)
            	            ;
            	            adaptor.addChild(root_0, KW_ELEM_TYPE367_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // HiveParser.g:1349:4: ( KW_KEY_TYPE )=> KW_KEY_TYPE
            	            {
            	            KW_KEY_TYPE368=(Token)match(input,KW_KEY_TYPE,FOLLOW_KW_KEY_TYPE_in_tabTypeExpr6433); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            KW_KEY_TYPE368_tree = 
            	            (CommonTree)adaptor.create(KW_KEY_TYPE368)
            	            ;
            	            adaptor.addChild(root_0, KW_KEY_TYPE368_tree);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // HiveParser.g:1351:4: ( KW_VALUE_TYPE )=> KW_VALUE_TYPE
            	            {
            	            KW_VALUE_TYPE369=(Token)match(input,KW_VALUE_TYPE,FOLLOW_KW_VALUE_TYPE_in_tabTypeExpr6449); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            KW_VALUE_TYPE369_tree = 
            	            (CommonTree)adaptor.create(KW_VALUE_TYPE369)
            	            ;
            	            adaptor.addChild(root_0, KW_VALUE_TYPE369_tree);
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // HiveParser.g:1352:6: identifier
            	            {
            	            pushFollow(FOLLOW_identifier_in_tabTypeExpr6456);
            	            identifier370=identifier();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier370.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);


            // HiveParser.g:1353:8: ( identifier )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( ((LA104_0 >= Identifier && LA104_0 <= KW_ANALYZE)||(LA104_0 >= KW_ARCHIVE && LA104_0 <= KW_CASCADE)||LA104_0==KW_CHANGE||(LA104_0 >= KW_CLUSTER && LA104_0 <= KW_COLLECTION)||(LA104_0 >= KW_COLUMNS && LA104_0 <= KW_CONCATENATE)||(LA104_0 >= KW_CONTINUE && LA104_0 <= KW_CREATE)||LA104_0==KW_CUBE||(LA104_0 >= KW_CURRENT_DATE && LA104_0 <= KW_DATA)||(LA104_0 >= KW_DATABASES && LA104_0 <= KW_DISABLE)||(LA104_0 >= KW_DISTRIBUTE && LA104_0 <= KW_ELEM_TYPE)||LA104_0==KW_ENABLE||LA104_0==KW_ESCAPED||(LA104_0 >= KW_EXCLUSIVE && LA104_0 <= KW_EXPORT)||(LA104_0 >= KW_EXTERNAL && LA104_0 <= KW_FLOAT)||(LA104_0 >= KW_FOR && LA104_0 <= KW_FORMATTED)||LA104_0==KW_FULL||(LA104_0 >= KW_FUNCTIONS && LA104_0 <= KW_GROUPING)||(LA104_0 >= KW_HOLD_DDLTIME && LA104_0 <= KW_IDXPROPERTIES)||(LA104_0 >= KW_IGNORE && LA104_0 <= KW_INTERSECT)||(LA104_0 >= KW_INTO && LA104_0 <= KW_JAR)||(LA104_0 >= KW_KEYS && LA104_0 <= KW_LEFT)||(LA104_0 >= KW_LIKE && LA104_0 <= KW_LONG)||(LA104_0 >= KW_MAPJOIN && LA104_0 <= KW_MONTH)||(LA104_0 >= KW_MSCK && LA104_0 <= KW_NOSCAN)||(LA104_0 >= KW_NO_DROP && LA104_0 <= KW_OFFLINE)||LA104_0==KW_OPTION||(LA104_0 >= KW_ORDER && LA104_0 <= KW_OUTPUTFORMAT)||(LA104_0 >= KW_OVERWRITE && LA104_0 <= KW_OWNER)||(LA104_0 >= KW_PARTITIONED && LA104_0 <= KW_PLUS)||(LA104_0 >= KW_PRETTY && LA104_0 <= KW_RECORDWRITER)||(LA104_0 >= KW_REGEXP && LA104_0 <= KW_SECOND)||(LA104_0 >= KW_SEMI && LA104_0 <= KW_TABLES)||(LA104_0 >= KW_TBLPROPERTIES && LA104_0 <= KW_TERMINATED)||(LA104_0 >= KW_TIMESTAMP && LA104_0 <= KW_TRANSACTIONS)||(LA104_0 >= KW_TRIGGER && LA104_0 <= KW_UNARCHIVE)||(LA104_0 >= KW_UNDO && LA104_0 <= KW_UNIONTYPE)||(LA104_0 >= KW_UNLOCK && LA104_0 <= KW_VALUE_TYPE)||LA104_0==KW_VIEW||LA104_0==KW_WHILE||(LA104_0 >= KW_WITH && LA104_0 <= KW_YEAR)) ) {
                alt104=1;
            }
            else if ( (LA104_0==KW_PARTITION) ) {
                int LA104_3 = input.LA(2);

                if ( (LA104_3==EOF||LA104_3==KW_EXTENDED||LA104_3==KW_PARTITION) ) {
                    alt104=1;
                }
            }
            switch (alt104) {
                case 1 :
                    // HiveParser.g:1353:8: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_tabTypeExpr6465);
                    identifier371=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier371.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tabTypeExpr"


    public static class partTypeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "partTypeExpr"
    // HiveParser.g:1356:1: partTypeExpr : tabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? ) ;
    public final HiveParser.partTypeExpr_return partTypeExpr() throws RecognitionException {
        HiveParser.partTypeExpr_return retval = new HiveParser.partTypeExpr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.tabTypeExpr_return tabTypeExpr372 =null;

        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec373 =null;


        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_tabTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule tabTypeExpr");
         pushMsg("specifying table partitions", state); 
        try {
            // HiveParser.g:1359:5: ( tabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? ) )
            // HiveParser.g:1359:8: tabTypeExpr ( partitionSpec )?
            {
            pushFollow(FOLLOW_tabTypeExpr_in_partTypeExpr6493);
            tabTypeExpr372=tabTypeExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tabTypeExpr.add(tabTypeExpr372.getTree());

            // HiveParser.g:1359:20: ( partitionSpec )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==KW_PARTITION) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // HiveParser.g:1359:20: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_partTypeExpr6495);
                    partitionSpec373=partitionSpec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec373.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: partitionSpec, tabTypeExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1359:35: -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? )
            {
                // HiveParser.g:1359:38: ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABTYPE, "TOK_TABTYPE")
                , root_1);

                adaptor.addChild(root_1, stream_tabTypeExpr.nextTree());

                // HiveParser.g:1359:64: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "partTypeExpr"


    public static class descStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "descStatement"
    // HiveParser.g:1362:1: descStatement : ( KW_DESCRIBE | KW_DESC ) ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) | ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_FORMATTED | KW_EXTENDED | KW_PRETTY )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY ) parttype= partTypeExpr ) -> ^( TOK_DESCTABLE $parttype $descOptions) |parttype= partTypeExpr -> ^( TOK_DESCTABLE $parttype) ) ;
    public final HiveParser.descStatement_return descStatement() throws RecognitionException {
        HiveParser.descStatement_return retval = new HiveParser.descStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token descOptions=null;
        Token KW_DESCRIBE374=null;
        Token KW_DESC375=null;
        Token KW_DATABASE376=null;
        Token KW_SCHEMA377=null;
        Token KW_EXTENDED378=null;
        Token KW_FUNCTION379=null;
        Token KW_EXTENDED380=null;
        HiveParser_IdentifiersParser.identifier_return dbName =null;

        HiveParser_IdentifiersParser.descFuncNames_return name =null;

        HiveParser.partTypeExpr_return parttype =null;


        CommonTree descOptions_tree=null;
        CommonTree KW_DESCRIBE374_tree=null;
        CommonTree KW_DESC375_tree=null;
        CommonTree KW_DATABASE376_tree=null;
        CommonTree KW_SCHEMA377_tree=null;
        CommonTree KW_EXTENDED378_tree=null;
        CommonTree KW_FUNCTION379_tree=null;
        CommonTree KW_EXTENDED380_tree=null;
        RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
        RewriteRuleTokenStream stream_KW_PRETTY=new RewriteRuleTokenStream(adaptor,"token KW_PRETTY");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
        RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
        RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
        RewriteRuleTokenStream stream_KW_FORMATTED=new RewriteRuleTokenStream(adaptor,"token KW_FORMATTED");
        RewriteRuleTokenStream stream_KW_DESCRIBE=new RewriteRuleTokenStream(adaptor,"token KW_DESCRIBE");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_partTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule partTypeExpr");
        RewriteRuleSubtreeStream stream_descFuncNames=new RewriteRuleSubtreeStream(adaptor,"rule descFuncNames");
         pushMsg("describe statement", state); 
        try {
            // HiveParser.g:1365:5: ( ( KW_DESCRIBE | KW_DESC ) ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) | ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_FORMATTED | KW_EXTENDED | KW_PRETTY )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY ) parttype= partTypeExpr ) -> ^( TOK_DESCTABLE $parttype $descOptions) |parttype= partTypeExpr -> ^( TOK_DESCTABLE $parttype) ) )
            // HiveParser.g:1366:5: ( KW_DESCRIBE | KW_DESC ) ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) | ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_FORMATTED | KW_EXTENDED | KW_PRETTY )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY ) parttype= partTypeExpr ) -> ^( TOK_DESCTABLE $parttype $descOptions) |parttype= partTypeExpr -> ^( TOK_DESCTABLE $parttype) )
            {
            // HiveParser.g:1366:5: ( KW_DESCRIBE | KW_DESC )
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==KW_DESCRIBE) ) {
                alt106=1;
            }
            else if ( (LA106_0==KW_DESC) ) {
                alt106=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);

                throw nvae;

            }
            switch (alt106) {
                case 1 :
                    // HiveParser.g:1366:6: KW_DESCRIBE
                    {
                    KW_DESCRIBE374=(Token)match(input,KW_DESCRIBE,FOLLOW_KW_DESCRIBE_in_descStatement6539); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DESCRIBE.add(KW_DESCRIBE374);


                    }
                    break;
                case 2 :
                    // HiveParser.g:1366:18: KW_DESC
                    {
                    KW_DESC375=(Token)match(input,KW_DESC,FOLLOW_KW_DESC_in_descStatement6541); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DESC.add(KW_DESC375);


                    }
                    break;

            }


            // HiveParser.g:1367:5: ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) | ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_FORMATTED | KW_EXTENDED | KW_PRETTY )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY ) parttype= partTypeExpr ) -> ^( TOK_DESCTABLE $parttype $descOptions) |parttype= partTypeExpr -> ^( TOK_DESCTABLE $parttype) )
            int alt111=4;
            alt111 = dfa111.predict(input);
            switch (alt111) {
                case 1 :
                    // HiveParser.g:1368:5: ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier )
                    {
                    // HiveParser.g:1368:32: ( KW_DATABASE | KW_SCHEMA )
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==KW_DATABASE) ) {
                        alt107=1;
                    }
                    else if ( (LA107_0==KW_SCHEMA) ) {
                        alt107=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 107, 0, input);

                        throw nvae;

                    }
                    switch (alt107) {
                        case 1 :
                            // HiveParser.g:1368:33: KW_DATABASE
                            {
                            KW_DATABASE376=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_descStatement6563); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE376);


                            }
                            break;
                        case 2 :
                            // HiveParser.g:1368:45: KW_SCHEMA
                            {
                            KW_SCHEMA377=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_descStatement6565); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA377);


                            }
                            break;

                    }


                    // HiveParser.g:1368:56: ( KW_EXTENDED )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==KW_EXTENDED) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // HiveParser.g:1368:56: KW_EXTENDED
                            {
                            KW_EXTENDED378=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement6568); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_EXTENDED.add(KW_EXTENDED378);


                            }
                            break;

                    }


                    // HiveParser.g:1368:69: (dbName= identifier )
                    // HiveParser.g:1368:70: dbName= identifier
                    {
                    pushFollow(FOLLOW_identifier_in_descStatement6574);
                    dbName=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(dbName.getTree());

                    }


                    // AST REWRITE
                    // elements: KW_EXTENDED, dbName
                    // token labels: 
                    // rule labels: dbName, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1368:89: -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? )
                    {
                        // HiveParser.g:1368:92: ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_DESCDATABASE, "TOK_DESCDATABASE")
                        , root_1);

                        adaptor.addChild(root_1, stream_dbName.nextTree());

                        // HiveParser.g:1368:119: ( KW_EXTENDED )?
                        if ( stream_KW_EXTENDED.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_KW_EXTENDED.nextNode()
                            );

                        }
                        stream_KW_EXTENDED.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1370:5: ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames )
                    {
                    KW_FUNCTION379=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_descStatement6605); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_FUNCTION.add(KW_FUNCTION379);


                    // HiveParser.g:1370:34: ( KW_EXTENDED )?
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==KW_EXTENDED) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            // HiveParser.g:1370:34: KW_EXTENDED
                            {
                            KW_EXTENDED380=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement6607); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_EXTENDED.add(KW_EXTENDED380);


                            }
                            break;

                    }


                    // HiveParser.g:1370:47: (name= descFuncNames )
                    // HiveParser.g:1370:48: name= descFuncNames
                    {
                    pushFollow(FOLLOW_descFuncNames_in_descStatement6613);
                    name=descFuncNames();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_descFuncNames.add(name.getTree());

                    }


                    // AST REWRITE
                    // elements: KW_EXTENDED, name
                    // token labels: 
                    // rule labels: name, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1370:68: -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? )
                    {
                        // HiveParser.g:1370:71: ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_DESCFUNCTION, "TOK_DESCFUNCTION")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        // HiveParser.g:1370:96: ( KW_EXTENDED )?
                        if ( stream_KW_EXTENDED.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_KW_EXTENDED.nextNode()
                            );

                        }
                        stream_KW_EXTENDED.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:1372:5: ( KW_FORMATTED | KW_EXTENDED | KW_PRETTY )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY ) parttype= partTypeExpr )
                    {
                    // HiveParser.g:1372:45: ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY ) parttype= partTypeExpr )
                    // HiveParser.g:1372:46: (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY ) parttype= partTypeExpr
                    {
                    // HiveParser.g:1372:46: (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY )
                    int alt110=3;
                    switch ( input.LA(1) ) {
                    case KW_FORMATTED:
                        {
                        alt110=1;
                        }
                        break;
                    case KW_EXTENDED:
                        {
                        alt110=2;
                        }
                        break;
                    case KW_PRETTY:
                        {
                        alt110=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 110, 0, input);

                        throw nvae;

                    }

                    switch (alt110) {
                        case 1 :
                            // HiveParser.g:1372:47: descOptions= KW_FORMATTED
                            {
                            descOptions=(Token)match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_descStatement6652); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_FORMATTED.add(descOptions);


                            }
                            break;
                        case 2 :
                            // HiveParser.g:1372:72: descOptions= KW_EXTENDED
                            {
                            descOptions=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement6656); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_EXTENDED.add(descOptions);


                            }
                            break;
                        case 3 :
                            // HiveParser.g:1372:96: descOptions= KW_PRETTY
                            {
                            descOptions=(Token)match(input,KW_PRETTY,FOLLOW_KW_PRETTY_in_descStatement6660); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_PRETTY.add(descOptions);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_partTypeExpr_in_descStatement6665);
                    parttype=partTypeExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_partTypeExpr.add(parttype.getTree());

                    }


                    // AST REWRITE
                    // elements: parttype, descOptions
                    // token labels: descOptions
                    // rule labels: parttype, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_descOptions=new RewriteRuleTokenStream(adaptor,"token descOptions",descOptions);
                    RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1372:142: -> ^( TOK_DESCTABLE $parttype $descOptions)
                    {
                        // HiveParser.g:1372:145: ^( TOK_DESCTABLE $parttype $descOptions)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_DESCTABLE, "TOK_DESCTABLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_parttype.nextTree());

                        adaptor.addChild(root_1, stream_descOptions.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // HiveParser.g:1374:5: parttype= partTypeExpr
                    {
                    pushFollow(FOLLOW_partTypeExpr_in_descStatement6692);
                    parttype=partTypeExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_partTypeExpr.add(parttype.getTree());

                    // AST REWRITE
                    // elements: parttype
                    // token labels: 
                    // rule labels: parttype, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1374:27: -> ^( TOK_DESCTABLE $parttype)
                    {
                        // HiveParser.g:1374:30: ^( TOK_DESCTABLE $parttype)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_DESCTABLE, "TOK_DESCTABLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_parttype.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "descStatement"


    public static class analyzeStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "analyzeStatement"
    // HiveParser.g:1378:1: analyzeStatement : KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | (partialscan= KW_PARTIALSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )? -> ^( TOK_ANALYZE $parttype ( $noscan)? ( $partialscan)? ( KW_COLUMNS )? ( $statsColumnName)? ) ;
    public final HiveParser.analyzeStatement_return analyzeStatement() throws RecognitionException {
        HiveParser.analyzeStatement_return retval = new HiveParser.analyzeStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token noscan=null;
        Token partialscan=null;
        Token KW_ANALYZE381=null;
        Token KW_TABLE382=null;
        Token KW_COMPUTE383=null;
        Token KW_STATISTICS384=null;
        Token KW_FOR385=null;
        Token KW_COLUMNS386=null;
        HiveParser_IdentifiersParser.tableOrPartition_return parttype =null;

        HiveParser.columnNameList_return statsColumnName =null;


        CommonTree noscan_tree=null;
        CommonTree partialscan_tree=null;
        CommonTree KW_ANALYZE381_tree=null;
        CommonTree KW_TABLE382_tree=null;
        CommonTree KW_COMPUTE383_tree=null;
        CommonTree KW_STATISTICS384_tree=null;
        CommonTree KW_FOR385_tree=null;
        CommonTree KW_COLUMNS386_tree=null;
        RewriteRuleTokenStream stream_KW_STATISTICS=new RewriteRuleTokenStream(adaptor,"token KW_STATISTICS");
        RewriteRuleTokenStream stream_KW_ANALYZE=new RewriteRuleTokenStream(adaptor,"token KW_ANALYZE");
        RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
        RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
        RewriteRuleTokenStream stream_KW_PARTIALSCAN=new RewriteRuleTokenStream(adaptor,"token KW_PARTIALSCAN");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_COMPUTE=new RewriteRuleTokenStream(adaptor,"token KW_COMPUTE");
        RewriteRuleTokenStream stream_KW_NOSCAN=new RewriteRuleTokenStream(adaptor,"token KW_NOSCAN");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
         pushMsg("analyze statement", state); 
        try {
            // HiveParser.g:1381:5: ( KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | (partialscan= KW_PARTIALSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )? -> ^( TOK_ANALYZE $parttype ( $noscan)? ( $partialscan)? ( KW_COLUMNS )? ( $statsColumnName)? ) )
            // HiveParser.g:1381:7: KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | (partialscan= KW_PARTIALSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )?
            {
            KW_ANALYZE381=(Token)match(input,KW_ANALYZE,FOLLOW_KW_ANALYZE_in_analyzeStatement6734); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ANALYZE.add(KW_ANALYZE381);


            KW_TABLE382=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_analyzeStatement6736); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE382);


            // HiveParser.g:1381:27: (parttype= tableOrPartition )
            // HiveParser.g:1381:28: parttype= tableOrPartition
            {
            pushFollow(FOLLOW_tableOrPartition_in_analyzeStatement6741);
            parttype=tableOrPartition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableOrPartition.add(parttype.getTree());

            }


            KW_COMPUTE383=(Token)match(input,KW_COMPUTE,FOLLOW_KW_COMPUTE_in_analyzeStatement6744); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_COMPUTE.add(KW_COMPUTE383);


            KW_STATISTICS384=(Token)match(input,KW_STATISTICS,FOLLOW_KW_STATISTICS_in_analyzeStatement6746); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_STATISTICS.add(KW_STATISTICS384);


            // HiveParser.g:1381:80: ( (noscan= KW_NOSCAN ) | (partialscan= KW_PARTIALSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )?
            int alt113=4;
            switch ( input.LA(1) ) {
                case KW_NOSCAN:
                    {
                    alt113=1;
                    }
                    break;
                case KW_PARTIALSCAN:
                    {
                    alt113=2;
                    }
                    break;
                case KW_FOR:
                    {
                    alt113=3;
                    }
                    break;
            }

            switch (alt113) {
                case 1 :
                    // HiveParser.g:1381:81: (noscan= KW_NOSCAN )
                    {
                    // HiveParser.g:1381:81: (noscan= KW_NOSCAN )
                    // HiveParser.g:1381:82: noscan= KW_NOSCAN
                    {
                    noscan=(Token)match(input,KW_NOSCAN,FOLLOW_KW_NOSCAN_in_analyzeStatement6752); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_NOSCAN.add(noscan);


                    }


                    }
                    break;
                case 2 :
                    // HiveParser.g:1381:102: (partialscan= KW_PARTIALSCAN )
                    {
                    // HiveParser.g:1381:102: (partialscan= KW_PARTIALSCAN )
                    // HiveParser.g:1381:103: partialscan= KW_PARTIALSCAN
                    {
                    partialscan=(Token)match(input,KW_PARTIALSCAN,FOLLOW_KW_PARTIALSCAN_in_analyzeStatement6760); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_PARTIALSCAN.add(partialscan);


                    }


                    }
                    break;
                case 3 :
                    // HiveParser.g:1382:57: ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? )
                    {
                    // HiveParser.g:1382:57: ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? )
                    // HiveParser.g:1382:58: KW_FOR KW_COLUMNS (statsColumnName= columnNameList )?
                    {
                    KW_FOR385=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_analyzeStatement6820); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR385);


                    KW_COLUMNS386=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_analyzeStatement6822); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_COLUMNS.add(KW_COLUMNS386);


                    // HiveParser.g:1382:76: (statsColumnName= columnNameList )?
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( ((LA112_0 >= Identifier && LA112_0 <= KW_ANALYZE)||(LA112_0 >= KW_ARCHIVE && LA112_0 <= KW_CASCADE)||LA112_0==KW_CHANGE||(LA112_0 >= KW_CLUSTER && LA112_0 <= KW_COLLECTION)||(LA112_0 >= KW_COLUMNS && LA112_0 <= KW_CONCATENATE)||(LA112_0 >= KW_CONTINUE && LA112_0 <= KW_CREATE)||LA112_0==KW_CUBE||(LA112_0 >= KW_CURRENT_DATE && LA112_0 <= KW_DATA)||(LA112_0 >= KW_DATABASES && LA112_0 <= KW_DISABLE)||(LA112_0 >= KW_DISTRIBUTE && LA112_0 <= KW_ELEM_TYPE)||LA112_0==KW_ENABLE||LA112_0==KW_ESCAPED||(LA112_0 >= KW_EXCLUSIVE && LA112_0 <= KW_EXPORT)||(LA112_0 >= KW_EXTERNAL && LA112_0 <= KW_FLOAT)||(LA112_0 >= KW_FOR && LA112_0 <= KW_FORMATTED)||LA112_0==KW_FULL||(LA112_0 >= KW_FUNCTIONS && LA112_0 <= KW_GROUPING)||(LA112_0 >= KW_HOLD_DDLTIME && LA112_0 <= KW_IDXPROPERTIES)||(LA112_0 >= KW_IGNORE && LA112_0 <= KW_INTERSECT)||(LA112_0 >= KW_INTO && LA112_0 <= KW_JAR)||(LA112_0 >= KW_KEYS && LA112_0 <= KW_LEFT)||(LA112_0 >= KW_LIKE && LA112_0 <= KW_LONG)||(LA112_0 >= KW_MAPJOIN && LA112_0 <= KW_MONTH)||(LA112_0 >= KW_MSCK && LA112_0 <= KW_NOSCAN)||(LA112_0 >= KW_NO_DROP && LA112_0 <= KW_OFFLINE)||LA112_0==KW_OPTION||(LA112_0 >= KW_ORDER && LA112_0 <= KW_OUTPUTFORMAT)||(LA112_0 >= KW_OVERWRITE && LA112_0 <= KW_OWNER)||(LA112_0 >= KW_PARTITION && LA112_0 <= KW_PLUS)||(LA112_0 >= KW_PRETTY && LA112_0 <= KW_RECORDWRITER)||(LA112_0 >= KW_REGEXP && LA112_0 <= KW_SECOND)||(LA112_0 >= KW_SEMI && LA112_0 <= KW_TABLES)||(LA112_0 >= KW_TBLPROPERTIES && LA112_0 <= KW_TERMINATED)||(LA112_0 >= KW_TIMESTAMP && LA112_0 <= KW_TRANSACTIONS)||(LA112_0 >= KW_TRIGGER && LA112_0 <= KW_UNARCHIVE)||(LA112_0 >= KW_UNDO && LA112_0 <= KW_UNIONTYPE)||(LA112_0 >= KW_UNLOCK && LA112_0 <= KW_VALUE_TYPE)||LA112_0==KW_VIEW||LA112_0==KW_WHILE||(LA112_0 >= KW_WITH && LA112_0 <= KW_YEAR)) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            // HiveParser.g:1382:77: statsColumnName= columnNameList
                            {
                            pushFollow(FOLLOW_columnNameList_in_analyzeStatement6827);
                            statsColumnName=columnNameList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_columnNameList.add(statsColumnName.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: parttype, noscan, KW_COLUMNS, partialscan, statsColumnName
            // token labels: partialscan, noscan
            // rule labels: statsColumnName, parttype, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_partialscan=new RewriteRuleTokenStream(adaptor,"token partialscan",partialscan);
            RewriteRuleTokenStream stream_noscan=new RewriteRuleTokenStream(adaptor,"token noscan",noscan);
            RewriteRuleSubtreeStream stream_statsColumnName=new RewriteRuleSubtreeStream(adaptor,"rule statsColumnName",statsColumnName!=null?statsColumnName.tree:null);
            RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1383:7: -> ^( TOK_ANALYZE $parttype ( $noscan)? ( $partialscan)? ( KW_COLUMNS )? ( $statsColumnName)? )
            {
                // HiveParser.g:1383:10: ^( TOK_ANALYZE $parttype ( $noscan)? ( $partialscan)? ( KW_COLUMNS )? ( $statsColumnName)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ANALYZE, "TOK_ANALYZE")
                , root_1);

                adaptor.addChild(root_1, stream_parttype.nextTree());

                // HiveParser.g:1383:35: ( $noscan)?
                if ( stream_noscan.hasNext() ) {
                    adaptor.addChild(root_1, stream_noscan.nextNode());

                }
                stream_noscan.reset();

                // HiveParser.g:1383:44: ( $partialscan)?
                if ( stream_partialscan.hasNext() ) {
                    adaptor.addChild(root_1, stream_partialscan.nextNode());

                }
                stream_partialscan.reset();

                // HiveParser.g:1383:57: ( KW_COLUMNS )?
                if ( stream_KW_COLUMNS.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_KW_COLUMNS.nextNode()
                    );

                }
                stream_KW_COLUMNS.reset();

                // HiveParser.g:1383:70: ( $statsColumnName)?
                if ( stream_statsColumnName.hasNext() ) {
                    adaptor.addChild(root_1, stream_statsColumnName.nextTree());

                }
                stream_statsColumnName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "analyzeStatement"


    public static class showStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "showStatement"
    // HiveParser.g:1386:1: showStatement : ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_COLUMNS ( KW_FROM | KW_IN ) tableName ( ( KW_FROM | KW_IN ) db_name= identifier )? -> ^( TOK_SHOWCOLUMNS tableName ( $db_name)? ) | KW_SHOW KW_FUNCTIONS ( KW_LIKE showFunctionIdentifier | showFunctionIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( KW_LIKE )? ( showFunctionIdentifier )? ) | KW_SHOW KW_PARTITIONS tabName= tableName ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS $tabName ( partitionSpec )? ) | KW_SHOW KW_CREATE KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) | KW_SHOW KW_TBLPROPERTIES tableName ( LPAREN prptyName= StringLiteral RPAREN )? -> ^( TOK_SHOW_TBLPROPERTIES tableName ( $prptyName)? ) | KW_SHOW KW_LOCKS ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? ) | (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) ) | KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= identifier )? -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? ) | KW_SHOW KW_COMPACTIONS -> ^( TOK_SHOW_COMPACTIONS ) | KW_SHOW KW_TRANSACTIONS -> ^( TOK_SHOW_TRANSACTIONS ) | KW_SHOW KW_CONF StringLiteral -> ^( TOK_SHOWCONF StringLiteral ) );
    public final HiveParser.showStatement_return showStatement() throws RecognitionException {
        HiveParser.showStatement_return retval = new HiveParser.showStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token prptyName=null;
        Token dbName=null;
        Token isExtended=null;
        Token showOptions=null;
        Token KW_SHOW387=null;
        Token KW_DATABASES388=null;
        Token KW_SCHEMAS389=null;
        Token KW_LIKE390=null;
        Token KW_SHOW392=null;
        Token KW_TABLES393=null;
        Token KW_FROM394=null;
        Token KW_IN395=null;
        Token KW_LIKE396=null;
        Token KW_SHOW399=null;
        Token KW_COLUMNS400=null;
        Token KW_FROM401=null;
        Token KW_IN402=null;
        Token KW_FROM404=null;
        Token KW_IN405=null;
        Token KW_SHOW406=null;
        Token KW_FUNCTIONS407=null;
        Token KW_LIKE408=null;
        Token KW_SHOW411=null;
        Token KW_PARTITIONS412=null;
        Token KW_SHOW414=null;
        Token KW_CREATE415=null;
        Token KW_TABLE416=null;
        Token KW_SHOW417=null;
        Token KW_TABLE418=null;
        Token KW_EXTENDED419=null;
        Token KW_FROM420=null;
        Token KW_IN421=null;
        Token KW_LIKE422=null;
        Token KW_SHOW425=null;
        Token KW_TBLPROPERTIES426=null;
        Token LPAREN428=null;
        Token RPAREN429=null;
        Token KW_SHOW430=null;
        Token KW_LOCKS431=null;
        Token KW_DATABASE432=null;
        Token KW_SCHEMA433=null;
        Token KW_SHOW434=null;
        Token KW_INDEX435=null;
        Token KW_INDEXES436=null;
        Token KW_ON437=null;
        Token KW_FROM439=null;
        Token KW_IN440=null;
        Token KW_SHOW441=null;
        Token KW_COMPACTIONS442=null;
        Token KW_SHOW443=null;
        Token KW_TRANSACTIONS444=null;
        Token KW_SHOW445=null;
        Token KW_CONF446=null;
        Token StringLiteral447=null;
        HiveParser_IdentifiersParser.identifier_return db_name =null;

        HiveParser_FromClauseParser.tableName_return tabName =null;

        HiveParser.partTypeExpr_return parttype =null;

        HiveParser.showStmtIdentifier_return showStmtIdentifier391 =null;

        HiveParser.showStmtIdentifier_return showStmtIdentifier397 =null;

        HiveParser.showStmtIdentifier_return showStmtIdentifier398 =null;

        HiveParser_FromClauseParser.tableName_return tableName403 =null;

        HiveParser.showFunctionIdentifier_return showFunctionIdentifier409 =null;

        HiveParser.showFunctionIdentifier_return showFunctionIdentifier410 =null;

        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec413 =null;

        HiveParser.showStmtIdentifier_return showStmtIdentifier423 =null;

        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec424 =null;

        HiveParser_FromClauseParser.tableName_return tableName427 =null;

        HiveParser.showStmtIdentifier_return showStmtIdentifier438 =null;


        CommonTree prptyName_tree=null;
        CommonTree dbName_tree=null;
        CommonTree isExtended_tree=null;
        CommonTree showOptions_tree=null;
        CommonTree KW_SHOW387_tree=null;
        CommonTree KW_DATABASES388_tree=null;
        CommonTree KW_SCHEMAS389_tree=null;
        CommonTree KW_LIKE390_tree=null;
        CommonTree KW_SHOW392_tree=null;
        CommonTree KW_TABLES393_tree=null;
        CommonTree KW_FROM394_tree=null;
        CommonTree KW_IN395_tree=null;
        CommonTree KW_LIKE396_tree=null;
        CommonTree KW_SHOW399_tree=null;
        CommonTree KW_COLUMNS400_tree=null;
        CommonTree KW_FROM401_tree=null;
        CommonTree KW_IN402_tree=null;
        CommonTree KW_FROM404_tree=null;
        CommonTree KW_IN405_tree=null;
        CommonTree KW_SHOW406_tree=null;
        CommonTree KW_FUNCTIONS407_tree=null;
        CommonTree KW_LIKE408_tree=null;
        CommonTree KW_SHOW411_tree=null;
        CommonTree KW_PARTITIONS412_tree=null;
        CommonTree KW_SHOW414_tree=null;
        CommonTree KW_CREATE415_tree=null;
        CommonTree KW_TABLE416_tree=null;
        CommonTree KW_SHOW417_tree=null;
        CommonTree KW_TABLE418_tree=null;
        CommonTree KW_EXTENDED419_tree=null;
        CommonTree KW_FROM420_tree=null;
        CommonTree KW_IN421_tree=null;
        CommonTree KW_LIKE422_tree=null;
        CommonTree KW_SHOW425_tree=null;
        CommonTree KW_TBLPROPERTIES426_tree=null;
        CommonTree LPAREN428_tree=null;
        CommonTree RPAREN429_tree=null;
        CommonTree KW_SHOW430_tree=null;
        CommonTree KW_LOCKS431_tree=null;
        CommonTree KW_DATABASE432_tree=null;
        CommonTree KW_SCHEMA433_tree=null;
        CommonTree KW_SHOW434_tree=null;
        CommonTree KW_INDEX435_tree=null;
        CommonTree KW_INDEXES436_tree=null;
        CommonTree KW_ON437_tree=null;
        CommonTree KW_FROM439_tree=null;
        CommonTree KW_IN440_tree=null;
        CommonTree KW_SHOW441_tree=null;
        CommonTree KW_COMPACTIONS442_tree=null;
        CommonTree KW_SHOW443_tree=null;
        CommonTree KW_TRANSACTIONS444_tree=null;
        CommonTree KW_SHOW445_tree=null;
        CommonTree KW_CONF446_tree=null;
        CommonTree StringLiteral447_tree=null;
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_LIKE=new RewriteRuleTokenStream(adaptor,"token KW_LIKE");
        RewriteRuleTokenStream stream_KW_PARTITIONS=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONS");
        RewriteRuleTokenStream stream_KW_IN=new RewriteRuleTokenStream(adaptor,"token KW_IN");
        RewriteRuleTokenStream stream_KW_LOCKS=new RewriteRuleTokenStream(adaptor,"token KW_LOCKS");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_TABLES=new RewriteRuleTokenStream(adaptor,"token KW_TABLES");
        RewriteRuleTokenStream stream_KW_FUNCTIONS=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTIONS");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
        RewriteRuleTokenStream stream_KW_CONF=new RewriteRuleTokenStream(adaptor,"token KW_CONF");
        RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
        RewriteRuleTokenStream stream_KW_TRANSACTIONS=new RewriteRuleTokenStream(adaptor,"token KW_TRANSACTIONS");
        RewriteRuleTokenStream stream_KW_SCHEMAS=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMAS");
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_KW_FORMATTED=new RewriteRuleTokenStream(adaptor,"token KW_FORMATTED");
        RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
        RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_COMPACTIONS=new RewriteRuleTokenStream(adaptor,"token KW_COMPACTIONS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_DATABASES=new RewriteRuleTokenStream(adaptor,"token KW_DATABASES");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_INDEXES=new RewriteRuleTokenStream(adaptor,"token KW_INDEXES");
        RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
        RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
        RewriteRuleSubtreeStream stream_showStmtIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule showStmtIdentifier");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_showFunctionIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule showFunctionIdentifier");
        RewriteRuleSubtreeStream stream_partTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule partTypeExpr");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         pushMsg("show statement", state); 
        try {
            // HiveParser.g:1389:5: ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_COLUMNS ( KW_FROM | KW_IN ) tableName ( ( KW_FROM | KW_IN ) db_name= identifier )? -> ^( TOK_SHOWCOLUMNS tableName ( $db_name)? ) | KW_SHOW KW_FUNCTIONS ( KW_LIKE showFunctionIdentifier | showFunctionIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( KW_LIKE )? ( showFunctionIdentifier )? ) | KW_SHOW KW_PARTITIONS tabName= tableName ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS $tabName ( partitionSpec )? ) | KW_SHOW KW_CREATE KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) | KW_SHOW KW_TBLPROPERTIES tableName ( LPAREN prptyName= StringLiteral RPAREN )? -> ^( TOK_SHOW_TBLPROPERTIES tableName ( $prptyName)? ) | KW_SHOW KW_LOCKS ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? ) | (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) ) | KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= identifier )? -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? ) | KW_SHOW KW_COMPACTIONS -> ^( TOK_SHOW_COMPACTIONS ) | KW_SHOW KW_TRANSACTIONS -> ^( TOK_SHOW_TRANSACTIONS ) | KW_SHOW KW_CONF StringLiteral -> ^( TOK_SHOWCONF StringLiteral ) )
            int alt137=13;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==KW_SHOW) ) {
                switch ( input.LA(2) ) {
                case KW_TABLES:
                    {
                    alt137=2;
                    }
                    break;
                case KW_COLUMNS:
                    {
                    alt137=3;
                    }
                    break;
                case KW_FUNCTIONS:
                    {
                    alt137=4;
                    }
                    break;
                case KW_PARTITIONS:
                    {
                    alt137=5;
                    }
                    break;
                case KW_CREATE:
                    {
                    alt137=6;
                    }
                    break;
                case KW_TABLE:
                    {
                    alt137=7;
                    }
                    break;
                case KW_TBLPROPERTIES:
                    {
                    alt137=8;
                    }
                    break;
                case KW_LOCKS:
                    {
                    alt137=9;
                    }
                    break;
                case KW_COMPACTIONS:
                    {
                    alt137=11;
                    }
                    break;
                case KW_TRANSACTIONS:
                    {
                    alt137=12;
                    }
                    break;
                case KW_CONF:
                    {
                    alt137=13;
                    }
                    break;
                case KW_DATABASES:
                case KW_SCHEMAS:
                    {
                    alt137=1;
                    }
                    break;
                case KW_FORMATTED:
                case KW_INDEX:
                case KW_INDEXES:
                    {
                    alt137=10;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 1, input);

                    throw nvae;

                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                throw nvae;

            }
            switch (alt137) {
                case 1 :
                    // HiveParser.g:1389:7: KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )?
                    {
                    KW_SHOW387=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6889); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW387);


                    // HiveParser.g:1389:15: ( KW_DATABASES | KW_SCHEMAS )
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==KW_DATABASES) ) {
                        alt114=1;
                    }
                    else if ( (LA114_0==KW_SCHEMAS) ) {
                        alt114=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 114, 0, input);

                        throw nvae;

                    }
                    switch (alt114) {
                        case 1 :
                            // HiveParser.g:1389:16: KW_DATABASES
                            {
                            KW_DATABASES388=(Token)match(input,KW_DATABASES,FOLLOW_KW_DATABASES_in_showStatement6892); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_DATABASES.add(KW_DATABASES388);


                            }
                            break;
                        case 2 :
                            // HiveParser.g:1389:29: KW_SCHEMAS
                            {
                            KW_SCHEMAS389=(Token)match(input,KW_SCHEMAS,FOLLOW_KW_SCHEMAS_in_showStatement6894); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_SCHEMAS.add(KW_SCHEMAS389);


                            }
                            break;

                    }


                    // HiveParser.g:1389:41: ( KW_LIKE showStmtIdentifier )?
                    int alt115=2;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==KW_LIKE) ) {
                        alt115=1;
                    }
                    switch (alt115) {
                        case 1 :
                            // HiveParser.g:1389:42: KW_LIKE showStmtIdentifier
                            {
                            KW_LIKE390=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement6898); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE390);


                            pushFollow(FOLLOW_showStmtIdentifier_in_showStatement6900);
                            showStmtIdentifier391=showStmtIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier391.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: showStmtIdentifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1389:71: -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? )
                    {
                        // HiveParser.g:1389:74: ^( TOK_SHOWDATABASES ( showStmtIdentifier )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SHOWDATABASES, "TOK_SHOWDATABASES")
                        , root_1);

                        // HiveParser.g:1389:94: ( showStmtIdentifier )?
                        if ( stream_showStmtIdentifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());

                        }
                        stream_showStmtIdentifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1390:7: KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
                    {
                    KW_SHOW392=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6919); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW392);


                    KW_TABLES393=(Token)match(input,KW_TABLES,FOLLOW_KW_TABLES_in_showStatement6921); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TABLES.add(KW_TABLES393);


                    // HiveParser.g:1390:25: ( ( KW_FROM | KW_IN ) db_name= identifier )?
                    int alt117=2;
                    int LA117_0 = input.LA(1);

                    if ( (LA117_0==KW_FROM) ) {
                        alt117=1;
                    }
                    else if ( (LA117_0==KW_IN) ) {
                        int LA117_2 = input.LA(2);

                        if ( ((LA117_2 >= Identifier && LA117_2 <= KW_ANALYZE)||(LA117_2 >= KW_ARCHIVE && LA117_2 <= KW_CASCADE)||LA117_2==KW_CHANGE||(LA117_2 >= KW_CLUSTER && LA117_2 <= KW_COLLECTION)||(LA117_2 >= KW_COLUMNS && LA117_2 <= KW_CONCATENATE)||(LA117_2 >= KW_CONTINUE && LA117_2 <= KW_CREATE)||LA117_2==KW_CUBE||(LA117_2 >= KW_CURRENT_DATE && LA117_2 <= KW_DATA)||(LA117_2 >= KW_DATABASES && LA117_2 <= KW_DISABLE)||(LA117_2 >= KW_DISTRIBUTE && LA117_2 <= KW_ELEM_TYPE)||LA117_2==KW_ENABLE||LA117_2==KW_ESCAPED||(LA117_2 >= KW_EXCLUSIVE && LA117_2 <= KW_EXPORT)||(LA117_2 >= KW_EXTERNAL && LA117_2 <= KW_FLOAT)||(LA117_2 >= KW_FOR && LA117_2 <= KW_FORMATTED)||LA117_2==KW_FULL||(LA117_2 >= KW_FUNCTIONS && LA117_2 <= KW_GROUPING)||(LA117_2 >= KW_HOLD_DDLTIME && LA117_2 <= KW_IDXPROPERTIES)||(LA117_2 >= KW_IGNORE && LA117_2 <= KW_INTERSECT)||(LA117_2 >= KW_INTO && LA117_2 <= KW_JAR)||(LA117_2 >= KW_KEYS && LA117_2 <= KW_LEFT)||(LA117_2 >= KW_LIKE && LA117_2 <= KW_LONG)||(LA117_2 >= KW_MAPJOIN && LA117_2 <= KW_MONTH)||(LA117_2 >= KW_MSCK && LA117_2 <= KW_NOSCAN)||(LA117_2 >= KW_NO_DROP && LA117_2 <= KW_OFFLINE)||LA117_2==KW_OPTION||(LA117_2 >= KW_ORDER && LA117_2 <= KW_OUTPUTFORMAT)||(LA117_2 >= KW_OVERWRITE && LA117_2 <= KW_OWNER)||(LA117_2 >= KW_PARTITION && LA117_2 <= KW_PLUS)||(LA117_2 >= KW_PRETTY && LA117_2 <= KW_RECORDWRITER)||(LA117_2 >= KW_REGEXP && LA117_2 <= KW_SECOND)||(LA117_2 >= KW_SEMI && LA117_2 <= KW_TABLES)||(LA117_2 >= KW_TBLPROPERTIES && LA117_2 <= KW_TERMINATED)||(LA117_2 >= KW_TIMESTAMP && LA117_2 <= KW_TRANSACTIONS)||(LA117_2 >= KW_TRIGGER && LA117_2 <= KW_UNARCHIVE)||(LA117_2 >= KW_UNDO && LA117_2 <= KW_UNIONTYPE)||(LA117_2 >= KW_UNLOCK && LA117_2 <= KW_VALUE_TYPE)||LA117_2==KW_VIEW||LA117_2==KW_WHILE||(LA117_2 >= KW_WITH && LA117_2 <= KW_YEAR)) ) {
                            alt117=1;
                        }
                    }
                    switch (alt117) {
                        case 1 :
                            // HiveParser.g:1390:26: ( KW_FROM | KW_IN ) db_name= identifier
                            {
                            // HiveParser.g:1390:26: ( KW_FROM | KW_IN )
                            int alt116=2;
                            int LA116_0 = input.LA(1);

                            if ( (LA116_0==KW_FROM) ) {
                                alt116=1;
                            }
                            else if ( (LA116_0==KW_IN) ) {
                                alt116=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 116, 0, input);

                                throw nvae;

                            }
                            switch (alt116) {
                                case 1 :
                                    // HiveParser.g:1390:27: KW_FROM
                                    {
                                    KW_FROM394=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement6925); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM394);


                                    }
                                    break;
                                case 2 :
                                    // HiveParser.g:1390:35: KW_IN
                                    {
                                    KW_IN395=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement6927); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN395);


                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_identifier_in_showStatement6932);
                            db_name=identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:1390:63: ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
                    int alt118=3;
                    int LA118_0 = input.LA(1);

                    if ( (LA118_0==KW_LIKE) ) {
                        int LA118_1 = input.LA(2);

                        if ( ((LA118_1 >= Identifier && LA118_1 <= KW_ANALYZE)||(LA118_1 >= KW_ARCHIVE && LA118_1 <= KW_CASCADE)||LA118_1==KW_CHANGE||(LA118_1 >= KW_CLUSTER && LA118_1 <= KW_COLLECTION)||(LA118_1 >= KW_COLUMNS && LA118_1 <= KW_CONCATENATE)||(LA118_1 >= KW_CONTINUE && LA118_1 <= KW_CREATE)||LA118_1==KW_CUBE||(LA118_1 >= KW_CURRENT_DATE && LA118_1 <= KW_DATA)||(LA118_1 >= KW_DATABASES && LA118_1 <= KW_DISABLE)||(LA118_1 >= KW_DISTRIBUTE && LA118_1 <= KW_ELEM_TYPE)||LA118_1==KW_ENABLE||LA118_1==KW_ESCAPED||(LA118_1 >= KW_EXCLUSIVE && LA118_1 <= KW_EXPORT)||(LA118_1 >= KW_EXTERNAL && LA118_1 <= KW_FLOAT)||(LA118_1 >= KW_FOR && LA118_1 <= KW_FORMATTED)||LA118_1==KW_FULL||(LA118_1 >= KW_FUNCTIONS && LA118_1 <= KW_GROUPING)||(LA118_1 >= KW_HOLD_DDLTIME && LA118_1 <= KW_IDXPROPERTIES)||(LA118_1 >= KW_IGNORE && LA118_1 <= KW_INTERSECT)||(LA118_1 >= KW_INTO && LA118_1 <= KW_JAR)||(LA118_1 >= KW_KEYS && LA118_1 <= KW_LEFT)||(LA118_1 >= KW_LIKE && LA118_1 <= KW_LONG)||(LA118_1 >= KW_MAPJOIN && LA118_1 <= KW_MONTH)||(LA118_1 >= KW_MSCK && LA118_1 <= KW_NOSCAN)||(LA118_1 >= KW_NO_DROP && LA118_1 <= KW_OFFLINE)||LA118_1==KW_OPTION||(LA118_1 >= KW_ORDER && LA118_1 <= KW_OUTPUTFORMAT)||(LA118_1 >= KW_OVERWRITE && LA118_1 <= KW_OWNER)||(LA118_1 >= KW_PARTITION && LA118_1 <= KW_PLUS)||(LA118_1 >= KW_PRETTY && LA118_1 <= KW_RECORDWRITER)||(LA118_1 >= KW_REGEXP && LA118_1 <= KW_SECOND)||(LA118_1 >= KW_SEMI && LA118_1 <= KW_TABLES)||(LA118_1 >= KW_TBLPROPERTIES && LA118_1 <= KW_TERMINATED)||(LA118_1 >= KW_TIMESTAMP && LA118_1 <= KW_TRANSACTIONS)||(LA118_1 >= KW_TRIGGER && LA118_1 <= KW_UNARCHIVE)||(LA118_1 >= KW_UNDO && LA118_1 <= KW_UNIONTYPE)||(LA118_1 >= KW_UNLOCK && LA118_1 <= KW_VALUE_TYPE)||LA118_1==KW_VIEW||LA118_1==KW_WHILE||(LA118_1 >= KW_WITH && LA118_1 <= KW_YEAR)||LA118_1==StringLiteral) ) {
                            alt118=1;
                        }
                        else if ( (LA118_1==EOF) ) {
                            alt118=2;
                        }
                    }
                    else if ( ((LA118_0 >= Identifier && LA118_0 <= KW_ANALYZE)||(LA118_0 >= KW_ARCHIVE && LA118_0 <= KW_CASCADE)||LA118_0==KW_CHANGE||(LA118_0 >= KW_CLUSTER && LA118_0 <= KW_COLLECTION)||(LA118_0 >= KW_COLUMNS && LA118_0 <= KW_CONCATENATE)||(LA118_0 >= KW_CONTINUE && LA118_0 <= KW_CREATE)||LA118_0==KW_CUBE||(LA118_0 >= KW_CURRENT_DATE && LA118_0 <= KW_DATA)||(LA118_0 >= KW_DATABASES && LA118_0 <= KW_DISABLE)||(LA118_0 >= KW_DISTRIBUTE && LA118_0 <= KW_ELEM_TYPE)||LA118_0==KW_ENABLE||LA118_0==KW_ESCAPED||(LA118_0 >= KW_EXCLUSIVE && LA118_0 <= KW_EXPORT)||(LA118_0 >= KW_EXTERNAL && LA118_0 <= KW_FLOAT)||(LA118_0 >= KW_FOR && LA118_0 <= KW_FORMATTED)||LA118_0==KW_FULL||(LA118_0 >= KW_FUNCTIONS && LA118_0 <= KW_GROUPING)||(LA118_0 >= KW_HOLD_DDLTIME && LA118_0 <= KW_IDXPROPERTIES)||(LA118_0 >= KW_IGNORE && LA118_0 <= KW_INTERSECT)||(LA118_0 >= KW_INTO && LA118_0 <= KW_JAR)||(LA118_0 >= KW_KEYS && LA118_0 <= KW_LEFT)||(LA118_0 >= KW_LIMIT && LA118_0 <= KW_LONG)||(LA118_0 >= KW_MAPJOIN && LA118_0 <= KW_MONTH)||(LA118_0 >= KW_MSCK && LA118_0 <= KW_NOSCAN)||(LA118_0 >= KW_NO_DROP && LA118_0 <= KW_OFFLINE)||LA118_0==KW_OPTION||(LA118_0 >= KW_ORDER && LA118_0 <= KW_OUTPUTFORMAT)||(LA118_0 >= KW_OVERWRITE && LA118_0 <= KW_OWNER)||(LA118_0 >= KW_PARTITION && LA118_0 <= KW_PLUS)||(LA118_0 >= KW_PRETTY && LA118_0 <= KW_RECORDWRITER)||(LA118_0 >= KW_REGEXP && LA118_0 <= KW_SECOND)||(LA118_0 >= KW_SEMI && LA118_0 <= KW_TABLES)||(LA118_0 >= KW_TBLPROPERTIES && LA118_0 <= KW_TERMINATED)||(LA118_0 >= KW_TIMESTAMP && LA118_0 <= KW_TRANSACTIONS)||(LA118_0 >= KW_TRIGGER && LA118_0 <= KW_UNARCHIVE)||(LA118_0 >= KW_UNDO && LA118_0 <= KW_UNIONTYPE)||(LA118_0 >= KW_UNLOCK && LA118_0 <= KW_VALUE_TYPE)||LA118_0==KW_VIEW||LA118_0==KW_WHILE||(LA118_0 >= KW_WITH && LA118_0 <= KW_YEAR)||LA118_0==StringLiteral) ) {
                        alt118=2;
                    }
                    switch (alt118) {
                        case 1 :
                            // HiveParser.g:1390:64: KW_LIKE showStmtIdentifier
                            {
                            KW_LIKE396=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement6937); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE396);


                            pushFollow(FOLLOW_showStmtIdentifier_in_showStatement6939);
                            showStmtIdentifier397=showStmtIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier397.getTree());

                            }
                            break;
                        case 2 :
                            // HiveParser.g:1390:91: showStmtIdentifier
                            {
                            pushFollow(FOLLOW_showStmtIdentifier_in_showStatement6941);
                            showStmtIdentifier398=showStmtIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier398.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: db_name, showStmtIdentifier
                    // token labels: 
                    // rule labels: db_name, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1390:113: -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
                    {
                        // HiveParser.g:1390:116: ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SHOWTABLES, "TOK_SHOWTABLES")
                        , root_1);

                        // HiveParser.g:1390:133: ( TOK_FROM $db_name)?
                        if ( stream_db_name.hasNext() ) {
                            adaptor.addChild(root_1, 
                            (CommonTree)adaptor.create(TOK_FROM, "TOK_FROM")
                            );

                            adaptor.addChild(root_1, stream_db_name.nextTree());

                        }
                        stream_db_name.reset();

                        // HiveParser.g:1390:154: ( showStmtIdentifier )?
                        if ( stream_showStmtIdentifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());

                        }
                        stream_showStmtIdentifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:1391:7: KW_SHOW KW_COLUMNS ( KW_FROM | KW_IN ) tableName ( ( KW_FROM | KW_IN ) db_name= identifier )?
                    {
                    KW_SHOW399=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6969); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW399);


                    KW_COLUMNS400=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_showStatement6971); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_COLUMNS.add(KW_COLUMNS400);


                    // HiveParser.g:1391:26: ( KW_FROM | KW_IN )
                    int alt119=2;
                    int LA119_0 = input.LA(1);

                    if ( (LA119_0==KW_FROM) ) {
                        alt119=1;
                    }
                    else if ( (LA119_0==KW_IN) ) {
                        alt119=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 119, 0, input);

                        throw nvae;

                    }
                    switch (alt119) {
                        case 1 :
                            // HiveParser.g:1391:27: KW_FROM
                            {
                            KW_FROM401=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement6974); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM401);


                            }
                            break;
                        case 2 :
                            // HiveParser.g:1391:35: KW_IN
                            {
                            KW_IN402=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement6976); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN402);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_tableName_in_showStatement6979);
                    tableName403=tableName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableName.add(tableName403.getTree());

                    // HiveParser.g:1391:52: ( ( KW_FROM | KW_IN ) db_name= identifier )?
                    int alt121=2;
                    int LA121_0 = input.LA(1);

                    if ( (LA121_0==KW_FROM||LA121_0==KW_IN) ) {
                        alt121=1;
                    }
                    switch (alt121) {
                        case 1 :
                            // HiveParser.g:1391:53: ( KW_FROM | KW_IN ) db_name= identifier
                            {
                            // HiveParser.g:1391:53: ( KW_FROM | KW_IN )
                            int alt120=2;
                            int LA120_0 = input.LA(1);

                            if ( (LA120_0==KW_FROM) ) {
                                alt120=1;
                            }
                            else if ( (LA120_0==KW_IN) ) {
                                alt120=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 120, 0, input);

                                throw nvae;

                            }
                            switch (alt120) {
                                case 1 :
                                    // HiveParser.g:1391:54: KW_FROM
                                    {
                                    KW_FROM404=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement6983); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM404);


                                    }
                                    break;
                                case 2 :
                                    // HiveParser.g:1391:62: KW_IN
                                    {
                                    KW_IN405=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement6985); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN405);


                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_identifier_in_showStatement6990);
                            db_name=identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: tableName, db_name
                    // token labels: 
                    // rule labels: db_name, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1392:5: -> ^( TOK_SHOWCOLUMNS tableName ( $db_name)? )
                    {
                        // HiveParser.g:1392:8: ^( TOK_SHOWCOLUMNS tableName ( $db_name)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SHOWCOLUMNS, "TOK_SHOWCOLUMNS")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableName.nextTree());

                        // HiveParser.g:1392:37: ( $db_name)?
                        if ( stream_db_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_db_name.nextTree());

                        }
                        stream_db_name.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // HiveParser.g:1393:7: KW_SHOW KW_FUNCTIONS ( KW_LIKE showFunctionIdentifier | showFunctionIdentifier )?
                    {
                    KW_SHOW406=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7016); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW406);


                    KW_FUNCTIONS407=(Token)match(input,KW_FUNCTIONS,FOLLOW_KW_FUNCTIONS_in_showStatement7018); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_FUNCTIONS.add(KW_FUNCTIONS407);


                    // HiveParser.g:1393:28: ( KW_LIKE showFunctionIdentifier | showFunctionIdentifier )?
                    int alt122=3;
                    int LA122_0 = input.LA(1);

                    if ( (LA122_0==KW_LIKE) ) {
                        int LA122_1 = input.LA(2);

                        if ( ((LA122_1 >= Identifier && LA122_1 <= KW_ANALYZE)||(LA122_1 >= KW_ARCHIVE && LA122_1 <= KW_CASCADE)||LA122_1==KW_CHANGE||(LA122_1 >= KW_CLUSTER && LA122_1 <= KW_COLLECTION)||(LA122_1 >= KW_COLUMNS && LA122_1 <= KW_CONCATENATE)||(LA122_1 >= KW_CONTINUE && LA122_1 <= KW_CREATE)||LA122_1==KW_CUBE||(LA122_1 >= KW_CURRENT_DATE && LA122_1 <= KW_DATA)||(LA122_1 >= KW_DATABASES && LA122_1 <= KW_DISABLE)||(LA122_1 >= KW_DISTRIBUTE && LA122_1 <= KW_ELEM_TYPE)||LA122_1==KW_ENABLE||LA122_1==KW_ESCAPED||(LA122_1 >= KW_EXCLUSIVE && LA122_1 <= KW_EXPORT)||(LA122_1 >= KW_EXTERNAL && LA122_1 <= KW_FLOAT)||(LA122_1 >= KW_FOR && LA122_1 <= KW_FORMATTED)||LA122_1==KW_FULL||(LA122_1 >= KW_FUNCTIONS && LA122_1 <= KW_GROUPING)||(LA122_1 >= KW_HOLD_DDLTIME && LA122_1 <= KW_IDXPROPERTIES)||(LA122_1 >= KW_IGNORE && LA122_1 <= KW_INTERSECT)||(LA122_1 >= KW_INTO && LA122_1 <= KW_JAR)||(LA122_1 >= KW_KEYS && LA122_1 <= KW_LEFT)||(LA122_1 >= KW_LIKE && LA122_1 <= KW_LONG)||(LA122_1 >= KW_MAPJOIN && LA122_1 <= KW_MONTH)||(LA122_1 >= KW_MSCK && LA122_1 <= KW_NOSCAN)||(LA122_1 >= KW_NO_DROP && LA122_1 <= KW_OFFLINE)||LA122_1==KW_OPTION||(LA122_1 >= KW_ORDER && LA122_1 <= KW_OUTPUTFORMAT)||(LA122_1 >= KW_OVERWRITE && LA122_1 <= KW_OWNER)||(LA122_1 >= KW_PARTITION && LA122_1 <= KW_PLUS)||(LA122_1 >= KW_PRETTY && LA122_1 <= KW_RECORDWRITER)||(LA122_1 >= KW_REGEXP && LA122_1 <= KW_SECOND)||(LA122_1 >= KW_SEMI && LA122_1 <= KW_TABLES)||(LA122_1 >= KW_TBLPROPERTIES && LA122_1 <= KW_TERMINATED)||(LA122_1 >= KW_TIMESTAMP && LA122_1 <= KW_TRANSACTIONS)||(LA122_1 >= KW_TRIGGER && LA122_1 <= KW_UNARCHIVE)||(LA122_1 >= KW_UNDO && LA122_1 <= KW_UNIONTYPE)||(LA122_1 >= KW_UNLOCK && LA122_1 <= KW_VALUE_TYPE)||LA122_1==KW_VIEW||LA122_1==KW_WHILE||(LA122_1 >= KW_WITH && LA122_1 <= KW_YEAR)||LA122_1==StringLiteral) ) {
                            alt122=1;
                        }
                        else if ( (LA122_1==EOF||LA122_1==DOT) ) {
                            alt122=2;
                        }
                    }
                    else if ( ((LA122_0 >= Identifier && LA122_0 <= KW_ANALYZE)||(LA122_0 >= KW_ARCHIVE && LA122_0 <= KW_CASCADE)||LA122_0==KW_CHANGE||(LA122_0 >= KW_CLUSTER && LA122_0 <= KW_COLLECTION)||(LA122_0 >= KW_COLUMNS && LA122_0 <= KW_CONCATENATE)||(LA122_0 >= KW_CONTINUE && LA122_0 <= KW_CREATE)||LA122_0==KW_CUBE||(LA122_0 >= KW_CURRENT_DATE && LA122_0 <= KW_DATA)||(LA122_0 >= KW_DATABASES && LA122_0 <= KW_DISABLE)||(LA122_0 >= KW_DISTRIBUTE && LA122_0 <= KW_ELEM_TYPE)||LA122_0==KW_ENABLE||LA122_0==KW_ESCAPED||(LA122_0 >= KW_EXCLUSIVE && LA122_0 <= KW_EXPORT)||(LA122_0 >= KW_EXTERNAL && LA122_0 <= KW_FLOAT)||(LA122_0 >= KW_FOR && LA122_0 <= KW_FORMATTED)||LA122_0==KW_FULL||(LA122_0 >= KW_FUNCTIONS && LA122_0 <= KW_GROUPING)||(LA122_0 >= KW_HOLD_DDLTIME && LA122_0 <= KW_IDXPROPERTIES)||(LA122_0 >= KW_IGNORE && LA122_0 <= KW_INTERSECT)||(LA122_0 >= KW_INTO && LA122_0 <= KW_JAR)||(LA122_0 >= KW_KEYS && LA122_0 <= KW_LEFT)||(LA122_0 >= KW_LIMIT && LA122_0 <= KW_LONG)||(LA122_0 >= KW_MAPJOIN && LA122_0 <= KW_MONTH)||(LA122_0 >= KW_MSCK && LA122_0 <= KW_NOSCAN)||(LA122_0 >= KW_NO_DROP && LA122_0 <= KW_OFFLINE)||LA122_0==KW_OPTION||(LA122_0 >= KW_ORDER && LA122_0 <= KW_OUTPUTFORMAT)||(LA122_0 >= KW_OVERWRITE && LA122_0 <= KW_OWNER)||(LA122_0 >= KW_PARTITION && LA122_0 <= KW_PLUS)||(LA122_0 >= KW_PRETTY && LA122_0 <= KW_RECORDWRITER)||(LA122_0 >= KW_REGEXP && LA122_0 <= KW_SECOND)||(LA122_0 >= KW_SEMI && LA122_0 <= KW_TABLES)||(LA122_0 >= KW_TBLPROPERTIES && LA122_0 <= KW_TERMINATED)||(LA122_0 >= KW_TIMESTAMP && LA122_0 <= KW_TRANSACTIONS)||(LA122_0 >= KW_TRIGGER && LA122_0 <= KW_UNARCHIVE)||(LA122_0 >= KW_UNDO && LA122_0 <= KW_UNIONTYPE)||(LA122_0 >= KW_UNLOCK && LA122_0 <= KW_VALUE_TYPE)||LA122_0==KW_VIEW||LA122_0==KW_WHILE||(LA122_0 >= KW_WITH && LA122_0 <= KW_YEAR)||LA122_0==StringLiteral) ) {
                        alt122=2;
                    }
                    switch (alt122) {
                        case 1 :
                            // HiveParser.g:1393:29: KW_LIKE showFunctionIdentifier
                            {
                            KW_LIKE408=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement7021); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE408);


                            pushFollow(FOLLOW_showFunctionIdentifier_in_showStatement7023);
                            showFunctionIdentifier409=showFunctionIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_showFunctionIdentifier.add(showFunctionIdentifier409.getTree());

                            }
                            break;
                        case 2 :
                            // HiveParser.g:1393:60: showFunctionIdentifier
                            {
                            pushFollow(FOLLOW_showFunctionIdentifier_in_showStatement7025);
                            showFunctionIdentifier410=showFunctionIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_showFunctionIdentifier.add(showFunctionIdentifier410.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: showFunctionIdentifier, KW_LIKE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1393:86: -> ^( TOK_SHOWFUNCTIONS ( KW_LIKE )? ( showFunctionIdentifier )? )
                    {
                        // HiveParser.g:1393:89: ^( TOK_SHOWFUNCTIONS ( KW_LIKE )? ( showFunctionIdentifier )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SHOWFUNCTIONS, "TOK_SHOWFUNCTIONS")
                        , root_1);

                        // HiveParser.g:1393:109: ( KW_LIKE )?
                        if ( stream_KW_LIKE.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_KW_LIKE.nextNode()
                            );

                        }
                        stream_KW_LIKE.reset();

                        // HiveParser.g:1393:118: ( showFunctionIdentifier )?
                        if ( stream_showFunctionIdentifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_showFunctionIdentifier.nextTree());

                        }
                        stream_showFunctionIdentifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // HiveParser.g:1394:7: KW_SHOW KW_PARTITIONS tabName= tableName ( partitionSpec )?
                    {
                    KW_SHOW411=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7048); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW411);


                    KW_PARTITIONS412=(Token)match(input,KW_PARTITIONS,FOLLOW_KW_PARTITIONS_in_showStatement7050); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_PARTITIONS.add(KW_PARTITIONS412);


                    pushFollow(FOLLOW_tableName_in_showStatement7054);
                    tabName=tableName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableName.add(tabName.getTree());

                    // HiveParser.g:1394:47: ( partitionSpec )?
                    int alt123=2;
                    int LA123_0 = input.LA(1);

                    if ( (LA123_0==KW_PARTITION) ) {
                        alt123=1;
                    }
                    switch (alt123) {
                        case 1 :
                            // HiveParser.g:1394:47: partitionSpec
                            {
                            pushFollow(FOLLOW_partitionSpec_in_showStatement7056);
                            partitionSpec413=partitionSpec();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec413.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: tabName, partitionSpec
                    // token labels: 
                    // rule labels: tabName, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName",tabName!=null?tabName.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1394:62: -> ^( TOK_SHOWPARTITIONS $tabName ( partitionSpec )? )
                    {
                        // HiveParser.g:1394:65: ^( TOK_SHOWPARTITIONS $tabName ( partitionSpec )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SHOWPARTITIONS, "TOK_SHOWPARTITIONS")
                        , root_1);

                        adaptor.addChild(root_1, stream_tabName.nextTree());

                        // HiveParser.g:1394:95: ( partitionSpec )?
                        if ( stream_partitionSpec.hasNext() ) {
                            adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                        }
                        stream_partitionSpec.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // HiveParser.g:1395:7: KW_SHOW KW_CREATE KW_TABLE tabName= tableName
                    {
                    KW_SHOW414=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7077); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW414);


                    KW_CREATE415=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_showStatement7079); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE415);


                    KW_TABLE416=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_showStatement7081); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE416);


                    pushFollow(FOLLOW_tableName_in_showStatement7085);
                    tabName=tableName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableName.add(tabName.getTree());

                    // AST REWRITE
                    // elements: tabName
                    // token labels: 
                    // rule labels: tabName, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName",tabName!=null?tabName.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1395:52: -> ^( TOK_SHOW_CREATETABLE $tabName)
                    {
                        // HiveParser.g:1395:55: ^( TOK_SHOW_CREATETABLE $tabName)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SHOW_CREATETABLE, "TOK_SHOW_CREATETABLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_tabName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // HiveParser.g:1396:7: KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )?
                    {
                    KW_SHOW417=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7102); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW417);


                    KW_TABLE418=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_showStatement7104); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE418);


                    KW_EXTENDED419=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement7106); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_EXTENDED.add(KW_EXTENDED419);


                    // HiveParser.g:1396:36: ( ( KW_FROM | KW_IN ) db_name= identifier )?
                    int alt125=2;
                    int LA125_0 = input.LA(1);

                    if ( (LA125_0==KW_FROM||LA125_0==KW_IN) ) {
                        alt125=1;
                    }
                    switch (alt125) {
                        case 1 :
                            // HiveParser.g:1396:37: ( KW_FROM | KW_IN ) db_name= identifier
                            {
                            // HiveParser.g:1396:37: ( KW_FROM | KW_IN )
                            int alt124=2;
                            int LA124_0 = input.LA(1);

                            if ( (LA124_0==KW_FROM) ) {
                                alt124=1;
                            }
                            else if ( (LA124_0==KW_IN) ) {
                                alt124=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 124, 0, input);

                                throw nvae;

                            }
                            switch (alt124) {
                                case 1 :
                                    // HiveParser.g:1396:38: KW_FROM
                                    {
                                    KW_FROM420=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement7110); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM420);


                                    }
                                    break;
                                case 2 :
                                    // HiveParser.g:1396:46: KW_IN
                                    {
                                    KW_IN421=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement7112); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN421);


                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_identifier_in_showStatement7117);
                            db_name=identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());

                            }
                            break;

                    }


                    KW_LIKE422=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement7121); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE422);


                    pushFollow(FOLLOW_showStmtIdentifier_in_showStatement7123);
                    showStmtIdentifier423=showStmtIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier423.getTree());

                    // HiveParser.g:1396:101: ( partitionSpec )?
                    int alt126=2;
                    int LA126_0 = input.LA(1);

                    if ( (LA126_0==KW_PARTITION) ) {
                        alt126=1;
                    }
                    switch (alt126) {
                        case 1 :
                            // HiveParser.g:1396:101: partitionSpec
                            {
                            pushFollow(FOLLOW_partitionSpec_in_showStatement7125);
                            partitionSpec424=partitionSpec();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec424.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: partitionSpec, db_name, showStmtIdentifier
                    // token labels: 
                    // rule labels: db_name, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1397:5: -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? )
                    {
                        // HiveParser.g:1397:8: ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SHOW_TABLESTATUS, "TOK_SHOW_TABLESTATUS")
                        , root_1);

                        adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());

                        // HiveParser.g:1397:51: ( $db_name)?
                        if ( stream_db_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_db_name.nextTree());

                        }
                        stream_db_name.reset();

                        // HiveParser.g:1397:60: ( partitionSpec )?
                        if ( stream_partitionSpec.hasNext() ) {
                            adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                        }
                        stream_partitionSpec.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // HiveParser.g:1398:7: KW_SHOW KW_TBLPROPERTIES tableName ( LPAREN prptyName= StringLiteral RPAREN )?
                    {
                    KW_SHOW425=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7153); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW425);


                    KW_TBLPROPERTIES426=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_showStatement7155); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES426);


                    pushFollow(FOLLOW_tableName_in_showStatement7157);
                    tableName427=tableName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableName.add(tableName427.getTree());

                    // HiveParser.g:1398:42: ( LPAREN prptyName= StringLiteral RPAREN )?
                    int alt127=2;
                    int LA127_0 = input.LA(1);

                    if ( (LA127_0==LPAREN) ) {
                        alt127=1;
                    }
                    switch (alt127) {
                        case 1 :
                            // HiveParser.g:1398:43: LPAREN prptyName= StringLiteral RPAREN
                            {
                            LPAREN428=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_showStatement7160); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN428);


                            prptyName=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_showStatement7164); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_StringLiteral.add(prptyName);


                            RPAREN429=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_showStatement7166); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN429);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: prptyName, tableName
                    // token labels: prptyName
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_prptyName=new RewriteRuleTokenStream(adaptor,"token prptyName",prptyName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1398:83: -> ^( TOK_SHOW_TBLPROPERTIES tableName ( $prptyName)? )
                    {
                        // HiveParser.g:1398:86: ^( TOK_SHOW_TBLPROPERTIES tableName ( $prptyName)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SHOW_TBLPROPERTIES, "TOK_SHOW_TBLPROPERTIES")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableName.nextTree());

                        // HiveParser.g:1398:122: ( $prptyName)?
                        if ( stream_prptyName.hasNext() ) {
                            adaptor.addChild(root_1, stream_prptyName.nextNode());

                        }
                        stream_prptyName.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 9 :
                    // HiveParser.g:1399:7: KW_SHOW KW_LOCKS ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? ) | (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) )
                    {
                    KW_SHOW430=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7188); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW430);


                    KW_LOCKS431=(Token)match(input,KW_LOCKS,FOLLOW_KW_LOCKS_in_showStatement7190); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_LOCKS.add(KW_LOCKS431);


                    // HiveParser.g:1400:7: ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? ) | (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) )
                    int alt132=2;
                    int LA132_0 = input.LA(1);

                    if ( (LA132_0==KW_DATABASE) && (synpred10_HiveParser())) {
                        alt132=1;
                    }
                    else if ( (LA132_0==KW_SCHEMA) ) {
                        int LA132_2 = input.LA(2);

                        if ( (LA132_2==Identifier) ) {
                            int LA132_8 = input.LA(3);

                            if ( (synpred10_HiveParser()) ) {
                                alt132=1;
                            }
                            else if ( (true) ) {
                                alt132=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 132, 8, input);

                                throw nvae;

                            }
                        }
                        else if ( (LA132_2==EOF||LA132_2==DOT||(LA132_2 >= KW_ADD && LA132_2 <= KW_ANALYZE)||(LA132_2 >= KW_ARCHIVE && LA132_2 <= KW_CASCADE)||LA132_2==KW_CHANGE||(LA132_2 >= KW_CLUSTER && LA132_2 <= KW_COLLECTION)||(LA132_2 >= KW_COLUMNS && LA132_2 <= KW_CONCATENATE)||(LA132_2 >= KW_CONTINUE && LA132_2 <= KW_CREATE)||LA132_2==KW_CUBE||(LA132_2 >= KW_CURRENT_DATE && LA132_2 <= KW_DATA)||(LA132_2 >= KW_DATABASES && LA132_2 <= KW_DISABLE)||(LA132_2 >= KW_DISTRIBUTE && LA132_2 <= KW_ELEM_TYPE)||LA132_2==KW_ENABLE||LA132_2==KW_ESCAPED||(LA132_2 >= KW_EXCLUSIVE && LA132_2 <= KW_FLOAT)||(LA132_2 >= KW_FOR && LA132_2 <= KW_FORMATTED)||LA132_2==KW_FULL||(LA132_2 >= KW_FUNCTIONS && LA132_2 <= KW_GROUPING)||(LA132_2 >= KW_HOLD_DDLTIME && LA132_2 <= KW_IDXPROPERTIES)||(LA132_2 >= KW_IGNORE && LA132_2 <= KW_INTERSECT)||(LA132_2 >= KW_INTO && LA132_2 <= KW_JAR)||(LA132_2 >= KW_KEYS && LA132_2 <= KW_LEFT)||(LA132_2 >= KW_LIKE && LA132_2 <= KW_LONG)||(LA132_2 >= KW_MAPJOIN && LA132_2 <= KW_MONTH)||(LA132_2 >= KW_MSCK && LA132_2 <= KW_NOSCAN)||(LA132_2 >= KW_NO_DROP && LA132_2 <= KW_OFFLINE)||LA132_2==KW_OPTION||(LA132_2 >= KW_ORDER && LA132_2 <= KW_OUTPUTFORMAT)||(LA132_2 >= KW_OVERWRITE && LA132_2 <= KW_OWNER)||(LA132_2 >= KW_PARTITION && LA132_2 <= KW_PLUS)||(LA132_2 >= KW_PRETTY && LA132_2 <= KW_RECORDWRITER)||(LA132_2 >= KW_REGEXP && LA132_2 <= KW_SECOND)||(LA132_2 >= KW_SEMI && LA132_2 <= KW_TABLES)||(LA132_2 >= KW_TBLPROPERTIES && LA132_2 <= KW_TERMINATED)||(LA132_2 >= KW_TIMESTAMP && LA132_2 <= KW_TRANSACTIONS)||(LA132_2 >= KW_TRIGGER && LA132_2 <= KW_UNARCHIVE)||(LA132_2 >= KW_UNDO && LA132_2 <= KW_UNIONTYPE)||(LA132_2 >= KW_UNLOCK && LA132_2 <= KW_VALUE_TYPE)||LA132_2==KW_VIEW||LA132_2==KW_WHILE||(LA132_2 >= KW_WITH && LA132_2 <= KW_YEAR)) ) {
                            alt132=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 132, 2, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA132_0==EOF||(LA132_0 >= Identifier && LA132_0 <= KW_ANALYZE)||(LA132_0 >= KW_ARCHIVE && LA132_0 <= KW_CASCADE)||LA132_0==KW_CHANGE||(LA132_0 >= KW_CLUSTER && LA132_0 <= KW_COLLECTION)||(LA132_0 >= KW_COLUMNS && LA132_0 <= KW_CONCATENATE)||(LA132_0 >= KW_CONTINUE && LA132_0 <= KW_CREATE)||LA132_0==KW_CUBE||(LA132_0 >= KW_CURRENT_DATE && LA132_0 <= KW_DATA)||(LA132_0 >= KW_DATABASES && LA132_0 <= KW_DISABLE)||(LA132_0 >= KW_DISTRIBUTE && LA132_0 <= KW_ELEM_TYPE)||LA132_0==KW_ENABLE||LA132_0==KW_ESCAPED||(LA132_0 >= KW_EXCLUSIVE && LA132_0 <= KW_FLOAT)||(LA132_0 >= KW_FOR && LA132_0 <= KW_FORMATTED)||LA132_0==KW_FULL||(LA132_0 >= KW_FUNCTIONS && LA132_0 <= KW_GROUPING)||(LA132_0 >= KW_HOLD_DDLTIME && LA132_0 <= KW_IDXPROPERTIES)||(LA132_0 >= KW_IGNORE && LA132_0 <= KW_INTERSECT)||(LA132_0 >= KW_INTO && LA132_0 <= KW_JAR)||(LA132_0 >= KW_KEYS && LA132_0 <= KW_LEFT)||(LA132_0 >= KW_LIKE && LA132_0 <= KW_LONG)||(LA132_0 >= KW_MAPJOIN && LA132_0 <= KW_MONTH)||(LA132_0 >= KW_MSCK && LA132_0 <= KW_NOSCAN)||(LA132_0 >= KW_NO_DROP && LA132_0 <= KW_OFFLINE)||LA132_0==KW_OPTION||(LA132_0 >= KW_ORDER && LA132_0 <= KW_OUTPUTFORMAT)||(LA132_0 >= KW_OVERWRITE && LA132_0 <= KW_OWNER)||(LA132_0 >= KW_PARTITION && LA132_0 <= KW_PLUS)||(LA132_0 >= KW_PRETTY && LA132_0 <= KW_RECORDWRITER)||(LA132_0 >= KW_REGEXP && LA132_0 <= KW_ROWS)||(LA132_0 >= KW_SCHEMAS && LA132_0 <= KW_SECOND)||(LA132_0 >= KW_SEMI && LA132_0 <= KW_TABLES)||(LA132_0 >= KW_TBLPROPERTIES && LA132_0 <= KW_TERMINATED)||(LA132_0 >= KW_TIMESTAMP && LA132_0 <= KW_TRANSACTIONS)||(LA132_0 >= KW_TRIGGER && LA132_0 <= KW_UNARCHIVE)||(LA132_0 >= KW_UNDO && LA132_0 <= KW_UNIONTYPE)||(LA132_0 >= KW_UNLOCK && LA132_0 <= KW_VALUE_TYPE)||LA132_0==KW_VIEW||LA132_0==KW_WHILE||(LA132_0 >= KW_WITH && LA132_0 <= KW_YEAR)) ) {
                        alt132=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 132, 0, input);

                        throw nvae;

                    }
                    switch (alt132) {
                        case 1 :
                            // HiveParser.g:1401:7: ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) (isExtended= KW_EXTENDED )?
                            {
                            // HiveParser.g:1401:34: ( KW_DATABASE | KW_SCHEMA )
                            int alt128=2;
                            int LA128_0 = input.LA(1);

                            if ( (LA128_0==KW_DATABASE) ) {
                                alt128=1;
                            }
                            else if ( (LA128_0==KW_SCHEMA) ) {
                                alt128=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 128, 0, input);

                                throw nvae;

                            }
                            switch (alt128) {
                                case 1 :
                                    // HiveParser.g:1401:35: KW_DATABASE
                                    {
                                    KW_DATABASE432=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_showStatement7215); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE432);


                                    }
                                    break;
                                case 2 :
                                    // HiveParser.g:1401:47: KW_SCHEMA
                                    {
                                    KW_SCHEMA433=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_showStatement7217); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA433);


                                    }
                                    break;

                            }


                            // HiveParser.g:1401:58: (dbName= Identifier )
                            // HiveParser.g:1401:59: dbName= Identifier
                            {
                            dbName=(Token)match(input,Identifier,FOLLOW_Identifier_in_showStatement7223); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(dbName);


                            }


                            // HiveParser.g:1401:78: (isExtended= KW_EXTENDED )?
                            int alt129=2;
                            int LA129_0 = input.LA(1);

                            if ( (LA129_0==KW_EXTENDED) ) {
                                alt129=1;
                            }
                            switch (alt129) {
                                case 1 :
                                    // HiveParser.g:1401:79: isExtended= KW_EXTENDED
                                    {
                                    isExtended=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement7229); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_EXTENDED.add(isExtended);


                                    }
                                    break;

                            }


                            // AST REWRITE
                            // elements: isExtended, dbName
                            // token labels: dbName, isExtended
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_dbName=new RewriteRuleTokenStream(adaptor,"token dbName",dbName);
                            RewriteRuleTokenStream stream_isExtended=new RewriteRuleTokenStream(adaptor,"token isExtended",isExtended);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1401:104: -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? )
                            {
                                // HiveParser.g:1401:107: ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(
                                (CommonTree)adaptor.create(TOK_SHOWDBLOCKS, "TOK_SHOWDBLOCKS")
                                , root_1);

                                adaptor.addChild(root_1, stream_dbName.nextNode());

                                // HiveParser.g:1401:134: ( $isExtended)?
                                if ( stream_isExtended.hasNext() ) {
                                    adaptor.addChild(root_1, stream_isExtended.nextNode());

                                }
                                stream_isExtended.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;
                        case 2 :
                            // HiveParser.g:1403:7: (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )?
                            {
                            // HiveParser.g:1403:7: (parttype= partTypeExpr )?
                            int alt130=2;
                            int LA130_0 = input.LA(1);

                            if ( ((LA130_0 >= Identifier && LA130_0 <= KW_ANALYZE)||(LA130_0 >= KW_ARCHIVE && LA130_0 <= KW_CASCADE)||LA130_0==KW_CHANGE||(LA130_0 >= KW_CLUSTER && LA130_0 <= KW_COLLECTION)||(LA130_0 >= KW_COLUMNS && LA130_0 <= KW_CONCATENATE)||(LA130_0 >= KW_CONTINUE && LA130_0 <= KW_CREATE)||LA130_0==KW_CUBE||(LA130_0 >= KW_CURRENT_DATE && LA130_0 <= KW_DATA)||(LA130_0 >= KW_DATABASES && LA130_0 <= KW_DISABLE)||(LA130_0 >= KW_DISTRIBUTE && LA130_0 <= KW_ELEM_TYPE)||LA130_0==KW_ENABLE||LA130_0==KW_ESCAPED||(LA130_0 >= KW_EXCLUSIVE && LA130_0 <= KW_EXPORT)||(LA130_0 >= KW_EXTERNAL && LA130_0 <= KW_FLOAT)||(LA130_0 >= KW_FOR && LA130_0 <= KW_FORMATTED)||LA130_0==KW_FULL||(LA130_0 >= KW_FUNCTIONS && LA130_0 <= KW_GROUPING)||(LA130_0 >= KW_HOLD_DDLTIME && LA130_0 <= KW_IDXPROPERTIES)||(LA130_0 >= KW_IGNORE && LA130_0 <= KW_INTERSECT)||(LA130_0 >= KW_INTO && LA130_0 <= KW_JAR)||(LA130_0 >= KW_KEYS && LA130_0 <= KW_LEFT)||(LA130_0 >= KW_LIKE && LA130_0 <= KW_LONG)||(LA130_0 >= KW_MAPJOIN && LA130_0 <= KW_MONTH)||(LA130_0 >= KW_MSCK && LA130_0 <= KW_NOSCAN)||(LA130_0 >= KW_NO_DROP && LA130_0 <= KW_OFFLINE)||LA130_0==KW_OPTION||(LA130_0 >= KW_ORDER && LA130_0 <= KW_OUTPUTFORMAT)||(LA130_0 >= KW_OVERWRITE && LA130_0 <= KW_OWNER)||(LA130_0 >= KW_PARTITION && LA130_0 <= KW_PLUS)||(LA130_0 >= KW_PRETTY && LA130_0 <= KW_RECORDWRITER)||(LA130_0 >= KW_REGEXP && LA130_0 <= KW_SECOND)||(LA130_0 >= KW_SEMI && LA130_0 <= KW_TABLES)||(LA130_0 >= KW_TBLPROPERTIES && LA130_0 <= KW_TERMINATED)||(LA130_0 >= KW_TIMESTAMP && LA130_0 <= KW_TRANSACTIONS)||(LA130_0 >= KW_TRIGGER && LA130_0 <= KW_UNARCHIVE)||(LA130_0 >= KW_UNDO && LA130_0 <= KW_UNIONTYPE)||(LA130_0 >= KW_UNLOCK && LA130_0 <= KW_VALUE_TYPE)||LA130_0==KW_VIEW||LA130_0==KW_WHILE||(LA130_0 >= KW_WITH && LA130_0 <= KW_YEAR)) ) {
                                alt130=1;
                            }
                            switch (alt130) {
                                case 1 :
                                    // HiveParser.g:1403:8: parttype= partTypeExpr
                                    {
                                    pushFollow(FOLLOW_partTypeExpr_in_showStatement7263);
                                    parttype=partTypeExpr();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_partTypeExpr.add(parttype.getTree());

                                    }
                                    break;

                            }


                            // HiveParser.g:1403:32: (isExtended= KW_EXTENDED )?
                            int alt131=2;
                            int LA131_0 = input.LA(1);

                            if ( (LA131_0==KW_EXTENDED) ) {
                                alt131=1;
                            }
                            switch (alt131) {
                                case 1 :
                                    // HiveParser.g:1403:33: isExtended= KW_EXTENDED
                                    {
                                    isExtended=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement7270); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_EXTENDED.add(isExtended);


                                    }
                                    break;

                            }


                            // AST REWRITE
                            // elements: isExtended, parttype
                            // token labels: isExtended
                            // rule labels: parttype, retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_isExtended=new RewriteRuleTokenStream(adaptor,"token isExtended",isExtended);
                            RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.tree:null);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1403:58: -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? )
                            {
                                // HiveParser.g:1403:61: ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(
                                (CommonTree)adaptor.create(TOK_SHOWLOCKS, "TOK_SHOWLOCKS")
                                , root_1);

                                // HiveParser.g:1403:78: ( $parttype)?
                                if ( stream_parttype.hasNext() ) {
                                    adaptor.addChild(root_1, stream_parttype.nextTree());

                                }
                                stream_parttype.reset();

                                // HiveParser.g:1403:89: ( $isExtended)?
                                if ( stream_isExtended.hasNext() ) {
                                    adaptor.addChild(root_1, stream_isExtended.nextNode());

                                }
                                stream_isExtended.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 10 :
                    // HiveParser.g:1405:7: KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= identifier )?
                    {
                    KW_SHOW434=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7302); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW434);


                    // HiveParser.g:1405:15: (showOptions= KW_FORMATTED )?
                    int alt133=2;
                    int LA133_0 = input.LA(1);

                    if ( (LA133_0==KW_FORMATTED) ) {
                        alt133=1;
                    }
                    switch (alt133) {
                        case 1 :
                            // HiveParser.g:1405:16: showOptions= KW_FORMATTED
                            {
                            showOptions=(Token)match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_showStatement7307); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_FORMATTED.add(showOptions);


                            }
                            break;

                    }


                    // HiveParser.g:1405:43: ( KW_INDEX | KW_INDEXES )
                    int alt134=2;
                    int LA134_0 = input.LA(1);

                    if ( (LA134_0==KW_INDEX) ) {
                        alt134=1;
                    }
                    else if ( (LA134_0==KW_INDEXES) ) {
                        alt134=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 134, 0, input);

                        throw nvae;

                    }
                    switch (alt134) {
                        case 1 :
                            // HiveParser.g:1405:44: KW_INDEX
                            {
                            KW_INDEX435=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_showStatement7312); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_INDEX.add(KW_INDEX435);


                            }
                            break;
                        case 2 :
                            // HiveParser.g:1405:53: KW_INDEXES
                            {
                            KW_INDEXES436=(Token)match(input,KW_INDEXES,FOLLOW_KW_INDEXES_in_showStatement7314); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_INDEXES.add(KW_INDEXES436);


                            }
                            break;

                    }


                    KW_ON437=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_showStatement7317); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON437);


                    pushFollow(FOLLOW_showStmtIdentifier_in_showStatement7319);
                    showStmtIdentifier438=showStmtIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier438.getTree());

                    // HiveParser.g:1405:90: ( ( KW_FROM | KW_IN ) db_name= identifier )?
                    int alt136=2;
                    int LA136_0 = input.LA(1);

                    if ( (LA136_0==KW_FROM||LA136_0==KW_IN) ) {
                        alt136=1;
                    }
                    switch (alt136) {
                        case 1 :
                            // HiveParser.g:1405:91: ( KW_FROM | KW_IN ) db_name= identifier
                            {
                            // HiveParser.g:1405:91: ( KW_FROM | KW_IN )
                            int alt135=2;
                            int LA135_0 = input.LA(1);

                            if ( (LA135_0==KW_FROM) ) {
                                alt135=1;
                            }
                            else if ( (LA135_0==KW_IN) ) {
                                alt135=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 135, 0, input);

                                throw nvae;

                            }
                            switch (alt135) {
                                case 1 :
                                    // HiveParser.g:1405:92: KW_FROM
                                    {
                                    KW_FROM439=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement7323); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM439);


                                    }
                                    break;
                                case 2 :
                                    // HiveParser.g:1405:100: KW_IN
                                    {
                                    KW_IN440=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement7325); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN440);


                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_identifier_in_showStatement7330);
                            db_name=identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: db_name, showStmtIdentifier, showOptions
                    // token labels: showOptions
                    // rule labels: db_name, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_showOptions=new RewriteRuleTokenStream(adaptor,"token showOptions",showOptions);
                    RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1406:5: -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? )
                    {
                        // HiveParser.g:1406:8: ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SHOWINDEXES, "TOK_SHOWINDEXES")
                        , root_1);

                        adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());

                        // HiveParser.g:1406:46: ( $showOptions)?
                        if ( stream_showOptions.hasNext() ) {
                            adaptor.addChild(root_1, stream_showOptions.nextNode());

                        }
                        stream_showOptions.reset();

                        // HiveParser.g:1406:60: ( $db_name)?
                        if ( stream_db_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_db_name.nextTree());

                        }
                        stream_db_name.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 11 :
                    // HiveParser.g:1407:7: KW_SHOW KW_COMPACTIONS
                    {
                    KW_SHOW441=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7360); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW441);


                    KW_COMPACTIONS442=(Token)match(input,KW_COMPACTIONS,FOLLOW_KW_COMPACTIONS_in_showStatement7362); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_COMPACTIONS.add(KW_COMPACTIONS442);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1407:30: -> ^( TOK_SHOW_COMPACTIONS )
                    {
                        // HiveParser.g:1407:33: ^( TOK_SHOW_COMPACTIONS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SHOW_COMPACTIONS, "TOK_SHOW_COMPACTIONS")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 12 :
                    // HiveParser.g:1408:7: KW_SHOW KW_TRANSACTIONS
                    {
                    KW_SHOW443=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7376); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW443);


                    KW_TRANSACTIONS444=(Token)match(input,KW_TRANSACTIONS,FOLLOW_KW_TRANSACTIONS_in_showStatement7378); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TRANSACTIONS.add(KW_TRANSACTIONS444);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1408:31: -> ^( TOK_SHOW_TRANSACTIONS )
                    {
                        // HiveParser.g:1408:34: ^( TOK_SHOW_TRANSACTIONS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SHOW_TRANSACTIONS, "TOK_SHOW_TRANSACTIONS")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 13 :
                    // HiveParser.g:1409:7: KW_SHOW KW_CONF StringLiteral
                    {
                    KW_SHOW445=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7392); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW445);


                    KW_CONF446=(Token)match(input,KW_CONF,FOLLOW_KW_CONF_in_showStatement7394); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_CONF.add(KW_CONF446);


                    StringLiteral447=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_showStatement7396); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral447);


                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1409:37: -> ^( TOK_SHOWCONF StringLiteral )
                    {
                        // HiveParser.g:1409:40: ^( TOK_SHOWCONF StringLiteral )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SHOWCONF, "TOK_SHOWCONF")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_StringLiteral.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "showStatement"


    public static class lockStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lockStatement"
    // HiveParser.g:1412:1: lockStatement : KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? ) ;
    public final HiveParser.lockStatement_return lockStatement() throws RecognitionException {
        HiveParser.lockStatement_return retval = new HiveParser.lockStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_LOCK448=null;
        Token KW_TABLE449=null;
        HiveParser_FromClauseParser.tableName_return tableName450 =null;

        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec451 =null;

        HiveParser.lockMode_return lockMode452 =null;


        CommonTree KW_LOCK448_tree=null;
        CommonTree KW_TABLE449_tree=null;
        RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleSubtreeStream stream_lockMode=new RewriteRuleSubtreeStream(adaptor,"rule lockMode");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         pushMsg("lock statement", state); 
        try {
            // HiveParser.g:1415:5: ( KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? ) )
            // HiveParser.g:1415:7: KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode
            {
            KW_LOCK448=(Token)match(input,KW_LOCK,FOLLOW_KW_LOCK_in_lockStatement7431); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_LOCK.add(KW_LOCK448);


            KW_TABLE449=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_lockStatement7433); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE449);


            pushFollow(FOLLOW_tableName_in_lockStatement7435);
            tableName450=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(tableName450.getTree());

            // HiveParser.g:1415:34: ( partitionSpec )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==KW_PARTITION) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // HiveParser.g:1415:34: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_lockStatement7437);
                    partitionSpec451=partitionSpec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec451.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_lockMode_in_lockStatement7440);
            lockMode452=lockMode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lockMode.add(lockMode452.getTree());

            // AST REWRITE
            // elements: partitionSpec, tableName, lockMode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1415:58: -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? )
            {
                // HiveParser.g:1415:61: ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_LOCKTABLE, "TOK_LOCKTABLE")
                , root_1);

                adaptor.addChild(root_1, stream_tableName.nextTree());

                adaptor.addChild(root_1, stream_lockMode.nextTree());

                // HiveParser.g:1415:96: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lockStatement"


    public static class lockDatabase_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lockDatabase"
    // HiveParser.g:1418:1: lockDatabase : KW_LOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) lockMode -> ^( TOK_LOCKDB $dbName lockMode ) ;
    public final HiveParser.lockDatabase_return lockDatabase() throws RecognitionException {
        HiveParser.lockDatabase_return retval = new HiveParser.lockDatabase_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token dbName=null;
        Token KW_LOCK453=null;
        Token KW_DATABASE454=null;
        Token KW_SCHEMA455=null;
        HiveParser.lockMode_return lockMode456 =null;


        CommonTree dbName_tree=null;
        CommonTree KW_LOCK453_tree=null;
        CommonTree KW_DATABASE454_tree=null;
        CommonTree KW_SCHEMA455_tree=null;
        RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");
        RewriteRuleSubtreeStream stream_lockMode=new RewriteRuleSubtreeStream(adaptor,"rule lockMode");
         pushMsg("lock database statement", state); 
        try {
            // HiveParser.g:1421:5: ( KW_LOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) lockMode -> ^( TOK_LOCKDB $dbName lockMode ) )
            // HiveParser.g:1421:7: KW_LOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) lockMode
            {
            KW_LOCK453=(Token)match(input,KW_LOCK,FOLLOW_KW_LOCK_in_lockDatabase7480); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_LOCK.add(KW_LOCK453);


            // HiveParser.g:1421:15: ( KW_DATABASE | KW_SCHEMA )
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==KW_DATABASE) ) {
                alt139=1;
            }
            else if ( (LA139_0==KW_SCHEMA) ) {
                alt139=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;

            }
            switch (alt139) {
                case 1 :
                    // HiveParser.g:1421:16: KW_DATABASE
                    {
                    KW_DATABASE454=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_lockDatabase7483); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE454);


                    }
                    break;
                case 2 :
                    // HiveParser.g:1421:28: KW_SCHEMA
                    {
                    KW_SCHEMA455=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_lockDatabase7485); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA455);


                    }
                    break;

            }


            // HiveParser.g:1421:39: (dbName= Identifier )
            // HiveParser.g:1421:40: dbName= Identifier
            {
            dbName=(Token)match(input,Identifier,FOLLOW_Identifier_in_lockDatabase7491); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(dbName);


            }


            pushFollow(FOLLOW_lockMode_in_lockDatabase7494);
            lockMode456=lockMode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lockMode.add(lockMode456.getTree());

            // AST REWRITE
            // elements: lockMode, dbName
            // token labels: dbName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_dbName=new RewriteRuleTokenStream(adaptor,"token dbName",dbName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1421:68: -> ^( TOK_LOCKDB $dbName lockMode )
            {
                // HiveParser.g:1421:71: ^( TOK_LOCKDB $dbName lockMode )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_LOCKDB, "TOK_LOCKDB")
                , root_1);

                adaptor.addChild(root_1, stream_dbName.nextNode());

                adaptor.addChild(root_1, stream_lockMode.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lockDatabase"


    public static class lockMode_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lockMode"
    // HiveParser.g:1424:1: lockMode : ( KW_SHARED | KW_EXCLUSIVE );
    public final HiveParser.lockMode_return lockMode() throws RecognitionException {
        HiveParser.lockMode_return retval = new HiveParser.lockMode_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token set457=null;

        CommonTree set457_tree=null;

         pushMsg("lock mode", state); 
        try {
            // HiveParser.g:1427:5: ( KW_SHARED | KW_EXCLUSIVE )
            // HiveParser.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            set457=(Token)input.LT(1);

            if ( input.LA(1)==KW_EXCLUSIVE||input.LA(1)==KW_SHARED ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (CommonTree)adaptor.create(set457)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lockMode"


    public static class unlockStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unlockStatement"
    // HiveParser.g:1430:1: unlockStatement : KW_UNLOCK KW_TABLE tableName ( partitionSpec )? -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? ) ;
    public final HiveParser.unlockStatement_return unlockStatement() throws RecognitionException {
        HiveParser.unlockStatement_return retval = new HiveParser.unlockStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_UNLOCK458=null;
        Token KW_TABLE459=null;
        HiveParser_FromClauseParser.tableName_return tableName460 =null;

        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec461 =null;


        CommonTree KW_UNLOCK458_tree=null;
        CommonTree KW_TABLE459_tree=null;
        RewriteRuleTokenStream stream_KW_UNLOCK=new RewriteRuleTokenStream(adaptor,"token KW_UNLOCK");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         pushMsg("unlock statement", state); 
        try {
            // HiveParser.g:1433:5: ( KW_UNLOCK KW_TABLE tableName ( partitionSpec )? -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? ) )
            // HiveParser.g:1433:7: KW_UNLOCK KW_TABLE tableName ( partitionSpec )?
            {
            KW_UNLOCK458=(Token)match(input,KW_UNLOCK,FOLLOW_KW_UNLOCK_in_unlockStatement7563); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_UNLOCK.add(KW_UNLOCK458);


            KW_TABLE459=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_unlockStatement7565); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE459);


            pushFollow(FOLLOW_tableName_in_unlockStatement7567);
            tableName460=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(tableName460.getTree());

            // HiveParser.g:1433:36: ( partitionSpec )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==KW_PARTITION) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // HiveParser.g:1433:36: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_unlockStatement7569);
                    partitionSpec461=partitionSpec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec461.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tableName, partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1433:52: -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? )
            {
                // HiveParser.g:1433:55: ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_UNLOCKTABLE, "TOK_UNLOCKTABLE")
                , root_1);

                adaptor.addChild(root_1, stream_tableName.nextTree());

                // HiveParser.g:1433:83: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unlockStatement"


    public static class unlockDatabase_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unlockDatabase"
    // HiveParser.g:1436:1: unlockDatabase : KW_UNLOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) -> ^( TOK_UNLOCKDB $dbName) ;
    public final HiveParser.unlockDatabase_return unlockDatabase() throws RecognitionException {
        HiveParser.unlockDatabase_return retval = new HiveParser.unlockDatabase_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token dbName=null;
        Token KW_UNLOCK462=null;
        Token KW_DATABASE463=null;
        Token KW_SCHEMA464=null;

        CommonTree dbName_tree=null;
        CommonTree KW_UNLOCK462_tree=null;
        CommonTree KW_DATABASE463_tree=null;
        CommonTree KW_SCHEMA464_tree=null;
        RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_KW_UNLOCK=new RewriteRuleTokenStream(adaptor,"token KW_UNLOCK");

         pushMsg("unlock database statement", state); 
        try {
            // HiveParser.g:1439:5: ( KW_UNLOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) -> ^( TOK_UNLOCKDB $dbName) )
            // HiveParser.g:1439:7: KW_UNLOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier )
            {
            KW_UNLOCK462=(Token)match(input,KW_UNLOCK,FOLLOW_KW_UNLOCK_in_unlockDatabase7609); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_UNLOCK.add(KW_UNLOCK462);


            // HiveParser.g:1439:17: ( KW_DATABASE | KW_SCHEMA )
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==KW_DATABASE) ) {
                alt141=1;
            }
            else if ( (LA141_0==KW_SCHEMA) ) {
                alt141=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;

            }
            switch (alt141) {
                case 1 :
                    // HiveParser.g:1439:18: KW_DATABASE
                    {
                    KW_DATABASE463=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_unlockDatabase7612); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE463);


                    }
                    break;
                case 2 :
                    // HiveParser.g:1439:30: KW_SCHEMA
                    {
                    KW_SCHEMA464=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_unlockDatabase7614); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA464);


                    }
                    break;

            }


            // HiveParser.g:1439:41: (dbName= Identifier )
            // HiveParser.g:1439:42: dbName= Identifier
            {
            dbName=(Token)match(input,Identifier,FOLLOW_Identifier_in_unlockDatabase7620); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(dbName);


            }


            // AST REWRITE
            // elements: dbName
            // token labels: dbName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_dbName=new RewriteRuleTokenStream(adaptor,"token dbName",dbName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1439:61: -> ^( TOK_UNLOCKDB $dbName)
            {
                // HiveParser.g:1439:64: ^( TOK_UNLOCKDB $dbName)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_UNLOCKDB, "TOK_UNLOCKDB")
                , root_1);

                adaptor.addChild(root_1, stream_dbName.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unlockDatabase"


    public static class createRoleStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "createRoleStatement"
    // HiveParser.g:1442:1: createRoleStatement : KW_CREATE KW_ROLE roleName= identifier -> ^( TOK_CREATEROLE $roleName) ;
    public final HiveParser.createRoleStatement_return createRoleStatement() throws RecognitionException {
        HiveParser.createRoleStatement_return retval = new HiveParser.createRoleStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_CREATE465=null;
        Token KW_ROLE466=null;
        HiveParser_IdentifiersParser.identifier_return roleName =null;


        CommonTree KW_CREATE465_tree=null;
        CommonTree KW_ROLE466_tree=null;
        RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
         pushMsg("create role", state); 
        try {
            // HiveParser.g:1445:5: ( KW_CREATE KW_ROLE roleName= identifier -> ^( TOK_CREATEROLE $roleName) )
            // HiveParser.g:1445:7: KW_CREATE KW_ROLE roleName= identifier
            {
            KW_CREATE465=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createRoleStatement7657); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE465);


            KW_ROLE466=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_createRoleStatement7659); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE466);


            pushFollow(FOLLOW_identifier_in_createRoleStatement7663);
            roleName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(roleName.getTree());

            // AST REWRITE
            // elements: roleName
            // token labels: 
            // rule labels: roleName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_roleName=new RewriteRuleSubtreeStream(adaptor,"rule roleName",roleName!=null?roleName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1446:5: -> ^( TOK_CREATEROLE $roleName)
            {
                // HiveParser.g:1446:8: ^( TOK_CREATEROLE $roleName)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_CREATEROLE, "TOK_CREATEROLE")
                , root_1);

                adaptor.addChild(root_1, stream_roleName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "createRoleStatement"


    public static class dropRoleStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dropRoleStatement"
    // HiveParser.g:1449:1: dropRoleStatement : KW_DROP KW_ROLE roleName= identifier -> ^( TOK_DROPROLE $roleName) ;
    public final HiveParser.dropRoleStatement_return dropRoleStatement() throws RecognitionException {
        HiveParser.dropRoleStatement_return retval = new HiveParser.dropRoleStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_DROP467=null;
        Token KW_ROLE468=null;
        HiveParser_IdentifiersParser.identifier_return roleName =null;


        CommonTree KW_DROP467_tree=null;
        CommonTree KW_ROLE468_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        pushMsg("drop role", state);
        try {
            // HiveParser.g:1452:5: ( KW_DROP KW_ROLE roleName= identifier -> ^( TOK_DROPROLE $roleName) )
            // HiveParser.g:1452:7: KW_DROP KW_ROLE roleName= identifier
            {
            KW_DROP467=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropRoleStatement7703); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP467);


            KW_ROLE468=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_dropRoleStatement7705); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE468);


            pushFollow(FOLLOW_identifier_in_dropRoleStatement7709);
            roleName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(roleName.getTree());

            // AST REWRITE
            // elements: roleName
            // token labels: 
            // rule labels: roleName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_roleName=new RewriteRuleSubtreeStream(adaptor,"rule roleName",roleName!=null?roleName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1453:5: -> ^( TOK_DROPROLE $roleName)
            {
                // HiveParser.g:1453:8: ^( TOK_DROPROLE $roleName)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DROPROLE, "TOK_DROPROLE")
                , root_1);

                adaptor.addChild(root_1, stream_roleName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dropRoleStatement"


    public static class grantPrivileges_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "grantPrivileges"
    // HiveParser.g:1456:1: grantPrivileges : KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( withGrantOption )? -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withGrantOption )? ) ;
    public final HiveParser.grantPrivileges_return grantPrivileges() throws RecognitionException {
        HiveParser.grantPrivileges_return retval = new HiveParser.grantPrivileges_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_GRANT469=null;
        Token KW_TO471=null;
        HiveParser.privilegeList_return privList =null;

        HiveParser.privilegeObject_return privilegeObject470 =null;

        HiveParser.principalSpecification_return principalSpecification472 =null;

        HiveParser.withGrantOption_return withGrantOption473 =null;


        CommonTree KW_GRANT469_tree=null;
        CommonTree KW_TO471_tree=null;
        RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleSubtreeStream stream_withGrantOption=new RewriteRuleSubtreeStream(adaptor,"rule withGrantOption");
        RewriteRuleSubtreeStream stream_privilegeList=new RewriteRuleSubtreeStream(adaptor,"rule privilegeList");
        RewriteRuleSubtreeStream stream_privilegeObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeObject");
        RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");
        pushMsg("grant privileges", state);
        try {
            // HiveParser.g:1459:5: ( KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( withGrantOption )? -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withGrantOption )? ) )
            // HiveParser.g:1459:7: KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( withGrantOption )?
            {
            KW_GRANT469=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantPrivileges7749); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT469);


            pushFollow(FOLLOW_privilegeList_in_grantPrivileges7753);
            privList=privilegeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_privilegeList.add(privList.getTree());

            // HiveParser.g:1460:7: ( privilegeObject )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==KW_ON) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // HiveParser.g:1460:7: privilegeObject
                    {
                    pushFollow(FOLLOW_privilegeObject_in_grantPrivileges7761);
                    privilegeObject470=privilegeObject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_privilegeObject.add(privilegeObject470.getTree());

                    }
                    break;

            }


            KW_TO471=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_grantPrivileges7770); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TO.add(KW_TO471);


            pushFollow(FOLLOW_principalSpecification_in_grantPrivileges7772);
            principalSpecification472=principalSpecification();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_principalSpecification.add(principalSpecification472.getTree());

            // HiveParser.g:1462:7: ( withGrantOption )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==KW_WITH) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // HiveParser.g:1462:7: withGrantOption
                    {
                    pushFollow(FOLLOW_withGrantOption_in_grantPrivileges7780);
                    withGrantOption473=withGrantOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_withGrantOption.add(withGrantOption473.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: principalSpecification, withGrantOption, privilegeObject, privList
            // token labels: 
            // rule labels: privList, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_privList=new RewriteRuleSubtreeStream(adaptor,"rule privList",privList!=null?privList.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1463:5: -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withGrantOption )? )
            {
                // HiveParser.g:1463:8: ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withGrantOption )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_GRANT, "TOK_GRANT")
                , root_1);

                adaptor.addChild(root_1, stream_privList.nextTree());

                adaptor.addChild(root_1, stream_principalSpecification.nextTree());

                // HiveParser.g:1463:53: ( privilegeObject )?
                if ( stream_privilegeObject.hasNext() ) {
                    adaptor.addChild(root_1, stream_privilegeObject.nextTree());

                }
                stream_privilegeObject.reset();

                // HiveParser.g:1463:70: ( withGrantOption )?
                if ( stream_withGrantOption.hasNext() ) {
                    adaptor.addChild(root_1, stream_withGrantOption.nextTree());

                }
                stream_withGrantOption.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "grantPrivileges"


    public static class revokePrivileges_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "revokePrivileges"
    // HiveParser.g:1466:1: revokePrivileges : KW_REVOKE ( grantOptionFor )? privilegeList ( privilegeObject )? KW_FROM principalSpecification -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ( grantOptionFor )? ) ;
    public final HiveParser.revokePrivileges_return revokePrivileges() throws RecognitionException {
        HiveParser.revokePrivileges_return retval = new HiveParser.revokePrivileges_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_REVOKE474=null;
        Token KW_FROM478=null;
        HiveParser.grantOptionFor_return grantOptionFor475 =null;

        HiveParser.privilegeList_return privilegeList476 =null;

        HiveParser.privilegeObject_return privilegeObject477 =null;

        HiveParser.principalSpecification_return principalSpecification479 =null;


        CommonTree KW_REVOKE474_tree=null;
        CommonTree KW_FROM478_tree=null;
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleTokenStream stream_KW_REVOKE=new RewriteRuleTokenStream(adaptor,"token KW_REVOKE");
        RewriteRuleSubtreeStream stream_grantOptionFor=new RewriteRuleSubtreeStream(adaptor,"rule grantOptionFor");
        RewriteRuleSubtreeStream stream_privilegeList=new RewriteRuleSubtreeStream(adaptor,"rule privilegeList");
        RewriteRuleSubtreeStream stream_privilegeObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeObject");
        RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");
        pushMsg("revoke privileges", state);
        try {
            // HiveParser.g:1469:5: ( KW_REVOKE ( grantOptionFor )? privilegeList ( privilegeObject )? KW_FROM principalSpecification -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ( grantOptionFor )? ) )
            // HiveParser.g:1469:7: KW_REVOKE ( grantOptionFor )? privilegeList ( privilegeObject )? KW_FROM principalSpecification
            {
            KW_REVOKE474=(Token)match(input,KW_REVOKE,FOLLOW_KW_REVOKE_in_revokePrivileges7829); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_REVOKE.add(KW_REVOKE474);


            // HiveParser.g:1469:17: ( grantOptionFor )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==KW_GRANT) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // HiveParser.g:1469:17: grantOptionFor
                    {
                    pushFollow(FOLLOW_grantOptionFor_in_revokePrivileges7831);
                    grantOptionFor475=grantOptionFor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_grantOptionFor.add(grantOptionFor475.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_privilegeList_in_revokePrivileges7834);
            privilegeList476=privilegeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_privilegeList.add(privilegeList476.getTree());

            // HiveParser.g:1469:47: ( privilegeObject )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==KW_ON) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // HiveParser.g:1469:47: privilegeObject
                    {
                    pushFollow(FOLLOW_privilegeObject_in_revokePrivileges7836);
                    privilegeObject477=privilegeObject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_privilegeObject.add(privilegeObject477.getTree());

                    }
                    break;

            }


            KW_FROM478=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_revokePrivileges7839); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM478);


            pushFollow(FOLLOW_principalSpecification_in_revokePrivileges7841);
            principalSpecification479=principalSpecification();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_principalSpecification.add(principalSpecification479.getTree());

            // AST REWRITE
            // elements: privilegeList, principalSpecification, privilegeObject, grantOptionFor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1470:5: -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ( grantOptionFor )? )
            {
                // HiveParser.g:1470:8: ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ( grantOptionFor )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_REVOKE, "TOK_REVOKE")
                , root_1);

                adaptor.addChild(root_1, stream_privilegeList.nextTree());

                adaptor.addChild(root_1, stream_principalSpecification.nextTree());

                // HiveParser.g:1470:58: ( privilegeObject )?
                if ( stream_privilegeObject.hasNext() ) {
                    adaptor.addChild(root_1, stream_privilegeObject.nextTree());

                }
                stream_privilegeObject.reset();

                // HiveParser.g:1470:75: ( grantOptionFor )?
                if ( stream_grantOptionFor.hasNext() ) {
                    adaptor.addChild(root_1, stream_grantOptionFor.nextTree());

                }
                stream_grantOptionFor.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "revokePrivileges"


    public static class grantRole_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "grantRole"
    // HiveParser.g:1473:1: grantRole : KW_GRANT ( KW_ROLE )? identifier ( COMMA identifier )* KW_TO principalSpecification ( withAdminOption )? -> ^( TOK_GRANT_ROLE principalSpecification ( withAdminOption )? ( identifier )+ ) ;
    public final HiveParser.grantRole_return grantRole() throws RecognitionException {
        HiveParser.grantRole_return retval = new HiveParser.grantRole_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_GRANT480=null;
        Token KW_ROLE481=null;
        Token COMMA483=null;
        Token KW_TO485=null;
        HiveParser_IdentifiersParser.identifier_return identifier482 =null;

        HiveParser_IdentifiersParser.identifier_return identifier484 =null;

        HiveParser.principalSpecification_return principalSpecification486 =null;

        HiveParser.withAdminOption_return withAdminOption487 =null;


        CommonTree KW_GRANT480_tree=null;
        CommonTree KW_ROLE481_tree=null;
        CommonTree COMMA483_tree=null;
        CommonTree KW_TO485_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
        RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_withAdminOption=new RewriteRuleSubtreeStream(adaptor,"rule withAdminOption");
        RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");
        pushMsg("grant role", state);
        try {
            // HiveParser.g:1476:5: ( KW_GRANT ( KW_ROLE )? identifier ( COMMA identifier )* KW_TO principalSpecification ( withAdminOption )? -> ^( TOK_GRANT_ROLE principalSpecification ( withAdminOption )? ( identifier )+ ) )
            // HiveParser.g:1476:7: KW_GRANT ( KW_ROLE )? identifier ( COMMA identifier )* KW_TO principalSpecification ( withAdminOption )?
            {
            KW_GRANT480=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantRole7888); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT480);


            // HiveParser.g:1476:16: ( KW_ROLE )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==KW_ROLE) ) {
                int LA146_1 = input.LA(2);

                if ( ((LA146_1 >= Identifier && LA146_1 <= KW_ANALYZE)||(LA146_1 >= KW_ARCHIVE && LA146_1 <= KW_CASCADE)||LA146_1==KW_CHANGE||(LA146_1 >= KW_CLUSTER && LA146_1 <= KW_COLLECTION)||(LA146_1 >= KW_COLUMNS && LA146_1 <= KW_CONCATENATE)||(LA146_1 >= KW_CONTINUE && LA146_1 <= KW_CREATE)||LA146_1==KW_CUBE||(LA146_1 >= KW_CURRENT_DATE && LA146_1 <= KW_DATA)||(LA146_1 >= KW_DATABASES && LA146_1 <= KW_DISABLE)||(LA146_1 >= KW_DISTRIBUTE && LA146_1 <= KW_ELEM_TYPE)||LA146_1==KW_ENABLE||LA146_1==KW_ESCAPED||(LA146_1 >= KW_EXCLUSIVE && LA146_1 <= KW_EXPORT)||(LA146_1 >= KW_EXTERNAL && LA146_1 <= KW_FLOAT)||(LA146_1 >= KW_FOR && LA146_1 <= KW_FORMATTED)||LA146_1==KW_FULL||(LA146_1 >= KW_FUNCTIONS && LA146_1 <= KW_GROUPING)||(LA146_1 >= KW_HOLD_DDLTIME && LA146_1 <= KW_IDXPROPERTIES)||(LA146_1 >= KW_IGNORE && LA146_1 <= KW_INTERSECT)||(LA146_1 >= KW_INTO && LA146_1 <= KW_JAR)||(LA146_1 >= KW_KEYS && LA146_1 <= KW_LEFT)||(LA146_1 >= KW_LIKE && LA146_1 <= KW_LONG)||(LA146_1 >= KW_MAPJOIN && LA146_1 <= KW_MONTH)||(LA146_1 >= KW_MSCK && LA146_1 <= KW_NOSCAN)||(LA146_1 >= KW_NO_DROP && LA146_1 <= KW_OFFLINE)||LA146_1==KW_OPTION||(LA146_1 >= KW_ORDER && LA146_1 <= KW_OUTPUTFORMAT)||(LA146_1 >= KW_OVERWRITE && LA146_1 <= KW_OWNER)||(LA146_1 >= KW_PARTITION && LA146_1 <= KW_PLUS)||(LA146_1 >= KW_PRETTY && LA146_1 <= KW_RECORDWRITER)||(LA146_1 >= KW_REGEXP && LA146_1 <= KW_SECOND)||(LA146_1 >= KW_SEMI && LA146_1 <= KW_TABLES)||(LA146_1 >= KW_TBLPROPERTIES && LA146_1 <= KW_TERMINATED)||(LA146_1 >= KW_TIMESTAMP && LA146_1 <= KW_TINYINT)||(LA146_1 >= KW_TOUCH && LA146_1 <= KW_TRANSACTIONS)||(LA146_1 >= KW_TRIGGER && LA146_1 <= KW_UNARCHIVE)||(LA146_1 >= KW_UNDO && LA146_1 <= KW_UNIONTYPE)||(LA146_1 >= KW_UNLOCK && LA146_1 <= KW_VALUE_TYPE)||LA146_1==KW_VIEW||LA146_1==KW_WHILE||(LA146_1 >= KW_WITH && LA146_1 <= KW_YEAR)) ) {
                    alt146=1;
                }
                else if ( (LA146_1==KW_TO) ) {
                    int LA146_7 = input.LA(3);

                    if ( (LA146_7==COMMA||LA146_7==KW_TO) ) {
                        alt146=1;
                    }
                }
            }
            switch (alt146) {
                case 1 :
                    // HiveParser.g:1476:16: KW_ROLE
                    {
                    KW_ROLE481=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_grantRole7890); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE481);


                    }
                    break;

            }


            pushFollow(FOLLOW_identifier_in_grantRole7893);
            identifier482=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(identifier482.getTree());

            // HiveParser.g:1476:36: ( COMMA identifier )*
            loop147:
            do {
                int alt147=2;
                int LA147_0 = input.LA(1);

                if ( (LA147_0==COMMA) ) {
                    alt147=1;
                }


                switch (alt147) {
            	case 1 :
            	    // HiveParser.g:1476:37: COMMA identifier
            	    {
            	    COMMA483=(Token)match(input,COMMA,FOLLOW_COMMA_in_grantRole7896); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA483);


            	    pushFollow(FOLLOW_identifier_in_grantRole7898);
            	    identifier484=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_identifier.add(identifier484.getTree());

            	    }
            	    break;

            	default :
            	    break loop147;
                }
            } while (true);


            KW_TO485=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_grantRole7902); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TO.add(KW_TO485);


            pushFollow(FOLLOW_principalSpecification_in_grantRole7904);
            principalSpecification486=principalSpecification();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_principalSpecification.add(principalSpecification486.getTree());

            // HiveParser.g:1476:85: ( withAdminOption )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==KW_WITH) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // HiveParser.g:1476:85: withAdminOption
                    {
                    pushFollow(FOLLOW_withAdminOption_in_grantRole7906);
                    withAdminOption487=withAdminOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_withAdminOption.add(withAdminOption487.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: withAdminOption, identifier, principalSpecification
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1477:5: -> ^( TOK_GRANT_ROLE principalSpecification ( withAdminOption )? ( identifier )+ )
            {
                // HiveParser.g:1477:8: ^( TOK_GRANT_ROLE principalSpecification ( withAdminOption )? ( identifier )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_GRANT_ROLE, "TOK_GRANT_ROLE")
                , root_1);

                adaptor.addChild(root_1, stream_principalSpecification.nextTree());

                // HiveParser.g:1477:48: ( withAdminOption )?
                if ( stream_withAdminOption.hasNext() ) {
                    adaptor.addChild(root_1, stream_withAdminOption.nextTree());

                }
                stream_withAdminOption.reset();

                if ( !(stream_identifier.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_identifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifier.nextTree());

                }
                stream_identifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "grantRole"


    public static class revokeRole_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "revokeRole"
    // HiveParser.g:1480:1: revokeRole : KW_REVOKE ( adminOptionFor )? ( KW_ROLE )? identifier ( COMMA identifier )* KW_FROM principalSpecification -> ^( TOK_REVOKE_ROLE principalSpecification ( adminOptionFor )? ( identifier )+ ) ;
    public final HiveParser.revokeRole_return revokeRole() throws RecognitionException {
        HiveParser.revokeRole_return retval = new HiveParser.revokeRole_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_REVOKE488=null;
        Token KW_ROLE490=null;
        Token COMMA492=null;
        Token KW_FROM494=null;
        HiveParser.adminOptionFor_return adminOptionFor489 =null;

        HiveParser_IdentifiersParser.identifier_return identifier491 =null;

        HiveParser_IdentifiersParser.identifier_return identifier493 =null;

        HiveParser.principalSpecification_return principalSpecification495 =null;


        CommonTree KW_REVOKE488_tree=null;
        CommonTree KW_ROLE490_tree=null;
        CommonTree COMMA492_tree=null;
        CommonTree KW_FROM494_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleTokenStream stream_KW_REVOKE=new RewriteRuleTokenStream(adaptor,"token KW_REVOKE");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_adminOptionFor=new RewriteRuleSubtreeStream(adaptor,"rule adminOptionFor");
        RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");
        pushMsg("revoke role", state);
        try {
            // HiveParser.g:1483:5: ( KW_REVOKE ( adminOptionFor )? ( KW_ROLE )? identifier ( COMMA identifier )* KW_FROM principalSpecification -> ^( TOK_REVOKE_ROLE principalSpecification ( adminOptionFor )? ( identifier )+ ) )
            // HiveParser.g:1483:7: KW_REVOKE ( adminOptionFor )? ( KW_ROLE )? identifier ( COMMA identifier )* KW_FROM principalSpecification
            {
            KW_REVOKE488=(Token)match(input,KW_REVOKE,FOLLOW_KW_REVOKE_in_revokeRole7952); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_REVOKE.add(KW_REVOKE488);


            // HiveParser.g:1483:17: ( adminOptionFor )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==KW_ADMIN) ) {
                int LA149_1 = input.LA(2);

                if ( (LA149_1==KW_OPTION) ) {
                    alt149=1;
                }
            }
            switch (alt149) {
                case 1 :
                    // HiveParser.g:1483:17: adminOptionFor
                    {
                    pushFollow(FOLLOW_adminOptionFor_in_revokeRole7954);
                    adminOptionFor489=adminOptionFor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adminOptionFor.add(adminOptionFor489.getTree());

                    }
                    break;

            }


            // HiveParser.g:1483:33: ( KW_ROLE )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==KW_ROLE) ) {
                int LA150_1 = input.LA(2);

                if ( ((LA150_1 >= Identifier && LA150_1 <= KW_ANALYZE)||(LA150_1 >= KW_ARCHIVE && LA150_1 <= KW_CASCADE)||LA150_1==KW_CHANGE||(LA150_1 >= KW_CLUSTER && LA150_1 <= KW_COLLECTION)||(LA150_1 >= KW_COLUMNS && LA150_1 <= KW_CONCATENATE)||(LA150_1 >= KW_CONTINUE && LA150_1 <= KW_CREATE)||LA150_1==KW_CUBE||(LA150_1 >= KW_CURRENT_DATE && LA150_1 <= KW_DATA)||(LA150_1 >= KW_DATABASES && LA150_1 <= KW_DISABLE)||(LA150_1 >= KW_DISTRIBUTE && LA150_1 <= KW_ELEM_TYPE)||LA150_1==KW_ENABLE||LA150_1==KW_ESCAPED||(LA150_1 >= KW_EXCLUSIVE && LA150_1 <= KW_EXPORT)||(LA150_1 >= KW_EXTERNAL && LA150_1 <= KW_FLOAT)||(LA150_1 >= KW_FOR && LA150_1 <= KW_FORMATTED)||LA150_1==KW_FULL||(LA150_1 >= KW_FUNCTIONS && LA150_1 <= KW_GROUPING)||(LA150_1 >= KW_HOLD_DDLTIME && LA150_1 <= KW_IDXPROPERTIES)||(LA150_1 >= KW_IGNORE && LA150_1 <= KW_INTERSECT)||(LA150_1 >= KW_INTO && LA150_1 <= KW_JAR)||(LA150_1 >= KW_KEYS && LA150_1 <= KW_LEFT)||(LA150_1 >= KW_LIKE && LA150_1 <= KW_LONG)||(LA150_1 >= KW_MAPJOIN && LA150_1 <= KW_MONTH)||(LA150_1 >= KW_MSCK && LA150_1 <= KW_NOSCAN)||(LA150_1 >= KW_NO_DROP && LA150_1 <= KW_OFFLINE)||LA150_1==KW_OPTION||(LA150_1 >= KW_ORDER && LA150_1 <= KW_OUTPUTFORMAT)||(LA150_1 >= KW_OVERWRITE && LA150_1 <= KW_OWNER)||(LA150_1 >= KW_PARTITION && LA150_1 <= KW_PLUS)||(LA150_1 >= KW_PRETTY && LA150_1 <= KW_RECORDWRITER)||(LA150_1 >= KW_REGEXP && LA150_1 <= KW_SECOND)||(LA150_1 >= KW_SEMI && LA150_1 <= KW_TABLES)||(LA150_1 >= KW_TBLPROPERTIES && LA150_1 <= KW_TERMINATED)||(LA150_1 >= KW_TIMESTAMP && LA150_1 <= KW_TRANSACTIONS)||(LA150_1 >= KW_TRIGGER && LA150_1 <= KW_UNARCHIVE)||(LA150_1 >= KW_UNDO && LA150_1 <= KW_UNIONTYPE)||(LA150_1 >= KW_UNLOCK && LA150_1 <= KW_VALUE_TYPE)||LA150_1==KW_VIEW||LA150_1==KW_WHILE||(LA150_1 >= KW_WITH && LA150_1 <= KW_YEAR)) ) {
                    alt150=1;
                }
            }
            switch (alt150) {
                case 1 :
                    // HiveParser.g:1483:33: KW_ROLE
                    {
                    KW_ROLE490=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_revokeRole7957); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE490);


                    }
                    break;

            }


            pushFollow(FOLLOW_identifier_in_revokeRole7960);
            identifier491=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(identifier491.getTree());

            // HiveParser.g:1483:53: ( COMMA identifier )*
            loop151:
            do {
                int alt151=2;
                int LA151_0 = input.LA(1);

                if ( (LA151_0==COMMA) ) {
                    alt151=1;
                }


                switch (alt151) {
            	case 1 :
            	    // HiveParser.g:1483:54: COMMA identifier
            	    {
            	    COMMA492=(Token)match(input,COMMA,FOLLOW_COMMA_in_revokeRole7963); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA492);


            	    pushFollow(FOLLOW_identifier_in_revokeRole7965);
            	    identifier493=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_identifier.add(identifier493.getTree());

            	    }
            	    break;

            	default :
            	    break loop151;
                }
            } while (true);


            KW_FROM494=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_revokeRole7969); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM494);


            pushFollow(FOLLOW_principalSpecification_in_revokeRole7971);
            principalSpecification495=principalSpecification();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_principalSpecification.add(principalSpecification495.getTree());

            // AST REWRITE
            // elements: principalSpecification, identifier, adminOptionFor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1484:5: -> ^( TOK_REVOKE_ROLE principalSpecification ( adminOptionFor )? ( identifier )+ )
            {
                // HiveParser.g:1484:8: ^( TOK_REVOKE_ROLE principalSpecification ( adminOptionFor )? ( identifier )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_REVOKE_ROLE, "TOK_REVOKE_ROLE")
                , root_1);

                adaptor.addChild(root_1, stream_principalSpecification.nextTree());

                // HiveParser.g:1484:49: ( adminOptionFor )?
                if ( stream_adminOptionFor.hasNext() ) {
                    adaptor.addChild(root_1, stream_adminOptionFor.nextTree());

                }
                stream_adminOptionFor.reset();

                if ( !(stream_identifier.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_identifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifier.nextTree());

                }
                stream_identifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "revokeRole"


    public static class showRoleGrants_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "showRoleGrants"
    // HiveParser.g:1487:1: showRoleGrants : KW_SHOW KW_ROLE KW_GRANT principalName -> ^( TOK_SHOW_ROLE_GRANT principalName ) ;
    public final HiveParser.showRoleGrants_return showRoleGrants() throws RecognitionException {
        HiveParser.showRoleGrants_return retval = new HiveParser.showRoleGrants_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_SHOW496=null;
        Token KW_ROLE497=null;
        Token KW_GRANT498=null;
        HiveParser.principalName_return principalName499 =null;


        CommonTree KW_SHOW496_tree=null;
        CommonTree KW_ROLE497_tree=null;
        CommonTree KW_GRANT498_tree=null;
        RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
        RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");
        pushMsg("show role grants", state);
        try {
            // HiveParser.g:1490:5: ( KW_SHOW KW_ROLE KW_GRANT principalName -> ^( TOK_SHOW_ROLE_GRANT principalName ) )
            // HiveParser.g:1490:7: KW_SHOW KW_ROLE KW_GRANT principalName
            {
            KW_SHOW496=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showRoleGrants8016); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW496);


            KW_ROLE497=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_showRoleGrants8018); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE497);


            KW_GRANT498=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_showRoleGrants8020); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT498);


            pushFollow(FOLLOW_principalName_in_showRoleGrants8022);
            principalName499=principalName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_principalName.add(principalName499.getTree());

            // AST REWRITE
            // elements: principalName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1491:5: -> ^( TOK_SHOW_ROLE_GRANT principalName )
            {
                // HiveParser.g:1491:8: ^( TOK_SHOW_ROLE_GRANT principalName )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SHOW_ROLE_GRANT, "TOK_SHOW_ROLE_GRANT")
                , root_1);

                adaptor.addChild(root_1, stream_principalName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "showRoleGrants"


    public static class showRoles_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "showRoles"
    // HiveParser.g:1495:1: showRoles : KW_SHOW KW_ROLES -> ^( TOK_SHOW_ROLES ) ;
    public final HiveParser.showRoles_return showRoles() throws RecognitionException {
        HiveParser.showRoles_return retval = new HiveParser.showRoles_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_SHOW500=null;
        Token KW_ROLES501=null;

        CommonTree KW_SHOW500_tree=null;
        CommonTree KW_ROLES501_tree=null;
        RewriteRuleTokenStream stream_KW_ROLES=new RewriteRuleTokenStream(adaptor,"token KW_ROLES");
        RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");

        pushMsg("show roles", state);
        try {
            // HiveParser.g:1498:5: ( KW_SHOW KW_ROLES -> ^( TOK_SHOW_ROLES ) )
            // HiveParser.g:1498:7: KW_SHOW KW_ROLES
            {
            KW_SHOW500=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showRoles8062); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW500);


            KW_ROLES501=(Token)match(input,KW_ROLES,FOLLOW_KW_ROLES_in_showRoles8064); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ROLES.add(KW_ROLES501);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1499:5: -> ^( TOK_SHOW_ROLES )
            {
                // HiveParser.g:1499:8: ^( TOK_SHOW_ROLES )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SHOW_ROLES, "TOK_SHOW_ROLES")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "showRoles"


    public static class showCurrentRole_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "showCurrentRole"
    // HiveParser.g:1502:1: showCurrentRole : KW_SHOW KW_CURRENT KW_ROLES -> ^( TOK_SHOW_SET_ROLE ) ;
    public final HiveParser.showCurrentRole_return showCurrentRole() throws RecognitionException {
        HiveParser.showCurrentRole_return retval = new HiveParser.showCurrentRole_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_SHOW502=null;
        Token KW_CURRENT503=null;
        Token KW_ROLES504=null;

        CommonTree KW_SHOW502_tree=null;
        CommonTree KW_CURRENT503_tree=null;
        CommonTree KW_ROLES504_tree=null;
        RewriteRuleTokenStream stream_KW_ROLES=new RewriteRuleTokenStream(adaptor,"token KW_ROLES");
        RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
        RewriteRuleTokenStream stream_KW_CURRENT=new RewriteRuleTokenStream(adaptor,"token KW_CURRENT");

        pushMsg("show current role", state);
        try {
            // HiveParser.g:1505:5: ( KW_SHOW KW_CURRENT KW_ROLES -> ^( TOK_SHOW_SET_ROLE ) )
            // HiveParser.g:1505:7: KW_SHOW KW_CURRENT KW_ROLES
            {
            KW_SHOW502=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showCurrentRole8101); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW502);


            KW_CURRENT503=(Token)match(input,KW_CURRENT,FOLLOW_KW_CURRENT_in_showCurrentRole8103); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_CURRENT.add(KW_CURRENT503);


            KW_ROLES504=(Token)match(input,KW_ROLES,FOLLOW_KW_ROLES_in_showCurrentRole8105); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ROLES.add(KW_ROLES504);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1506:5: -> ^( TOK_SHOW_SET_ROLE )
            {
                // HiveParser.g:1506:8: ^( TOK_SHOW_SET_ROLE )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SHOW_SET_ROLE, "TOK_SHOW_SET_ROLE")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "showCurrentRole"


    public static class setRole_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "setRole"
    // HiveParser.g:1509:1: setRole : KW_SET KW_ROLE ( ( KW_ALL )=> (all= KW_ALL ) -> ^( TOK_SHOW_SET_ROLE Identifier[$all.text] ) | identifier -> ^( TOK_SHOW_SET_ROLE identifier ) ) ;
    public final HiveParser.setRole_return setRole() throws RecognitionException {
        HiveParser.setRole_return retval = new HiveParser.setRole_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token all=null;
        Token KW_SET505=null;
        Token KW_ROLE506=null;
        HiveParser_IdentifiersParser.identifier_return identifier507 =null;


        CommonTree all_tree=null;
        CommonTree KW_SET505_tree=null;
        CommonTree KW_ROLE506_tree=null;
        RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        pushMsg("set role", state);
        try {
            // HiveParser.g:1512:5: ( KW_SET KW_ROLE ( ( KW_ALL )=> (all= KW_ALL ) -> ^( TOK_SHOW_SET_ROLE Identifier[$all.text] ) | identifier -> ^( TOK_SHOW_SET_ROLE identifier ) ) )
            // HiveParser.g:1512:7: KW_SET KW_ROLE ( ( KW_ALL )=> (all= KW_ALL ) -> ^( TOK_SHOW_SET_ROLE Identifier[$all.text] ) | identifier -> ^( TOK_SHOW_SET_ROLE identifier ) )
            {
            KW_SET505=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_setRole8142); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET505);


            KW_ROLE506=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_setRole8144); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE506);


            // HiveParser.g:1513:5: ( ( KW_ALL )=> (all= KW_ALL ) -> ^( TOK_SHOW_SET_ROLE Identifier[$all.text] ) | identifier -> ^( TOK_SHOW_SET_ROLE identifier ) )
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==KW_ALL) ) {
                int LA152_1 = input.LA(2);

                if ( (synpred11_HiveParser()) ) {
                    alt152=1;
                }
                else if ( ((useSQL11ReservedKeywordsForIdentifier())) ) {
                    alt152=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 152, 1, input);

                    throw nvae;

                }
            }
            else if ( ((LA152_0 >= Identifier && LA152_0 <= KW_AFTER)||(LA152_0 >= KW_ALTER && LA152_0 <= KW_ANALYZE)||(LA152_0 >= KW_ARCHIVE && LA152_0 <= KW_CASCADE)||LA152_0==KW_CHANGE||(LA152_0 >= KW_CLUSTER && LA152_0 <= KW_COLLECTION)||(LA152_0 >= KW_COLUMNS && LA152_0 <= KW_CONCATENATE)||(LA152_0 >= KW_CONTINUE && LA152_0 <= KW_CREATE)||LA152_0==KW_CUBE||(LA152_0 >= KW_CURRENT_DATE && LA152_0 <= KW_DATA)||(LA152_0 >= KW_DATABASES && LA152_0 <= KW_DISABLE)||(LA152_0 >= KW_DISTRIBUTE && LA152_0 <= KW_ELEM_TYPE)||LA152_0==KW_ENABLE||LA152_0==KW_ESCAPED||(LA152_0 >= KW_EXCLUSIVE && LA152_0 <= KW_EXPORT)||(LA152_0 >= KW_EXTERNAL && LA152_0 <= KW_FLOAT)||(LA152_0 >= KW_FOR && LA152_0 <= KW_FORMATTED)||LA152_0==KW_FULL||(LA152_0 >= KW_FUNCTIONS && LA152_0 <= KW_GROUPING)||(LA152_0 >= KW_HOLD_DDLTIME && LA152_0 <= KW_IDXPROPERTIES)||(LA152_0 >= KW_IGNORE && LA152_0 <= KW_INTERSECT)||(LA152_0 >= KW_INTO && LA152_0 <= KW_JAR)||(LA152_0 >= KW_KEYS && LA152_0 <= KW_LEFT)||(LA152_0 >= KW_LIKE && LA152_0 <= KW_LONG)||(LA152_0 >= KW_MAPJOIN && LA152_0 <= KW_MONTH)||(LA152_0 >= KW_MSCK && LA152_0 <= KW_NOSCAN)||(LA152_0 >= KW_NO_DROP && LA152_0 <= KW_OFFLINE)||LA152_0==KW_OPTION||(LA152_0 >= KW_ORDER && LA152_0 <= KW_OUTPUTFORMAT)||(LA152_0 >= KW_OVERWRITE && LA152_0 <= KW_OWNER)||(LA152_0 >= KW_PARTITION && LA152_0 <= KW_PLUS)||(LA152_0 >= KW_PRETTY && LA152_0 <= KW_RECORDWRITER)||(LA152_0 >= KW_REGEXP && LA152_0 <= KW_SECOND)||(LA152_0 >= KW_SEMI && LA152_0 <= KW_TABLES)||(LA152_0 >= KW_TBLPROPERTIES && LA152_0 <= KW_TERMINATED)||(LA152_0 >= KW_TIMESTAMP && LA152_0 <= KW_TRANSACTIONS)||(LA152_0 >= KW_TRIGGER && LA152_0 <= KW_UNARCHIVE)||(LA152_0 >= KW_UNDO && LA152_0 <= KW_UNIONTYPE)||(LA152_0 >= KW_UNLOCK && LA152_0 <= KW_VALUE_TYPE)||LA152_0==KW_VIEW||LA152_0==KW_WHILE||(LA152_0 >= KW_WITH && LA152_0 <= KW_YEAR)) ) {
                alt152=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;

            }
            switch (alt152) {
                case 1 :
                    // HiveParser.g:1514:5: ( KW_ALL )=> (all= KW_ALL )
                    {
                    // HiveParser.g:1514:17: (all= KW_ALL )
                    // HiveParser.g:1514:18: all= KW_ALL
                    {
                    all=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_setRole8165); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ALL.add(all);


                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1514:30: -> ^( TOK_SHOW_SET_ROLE Identifier[$all.text] )
                    {
                        // HiveParser.g:1514:33: ^( TOK_SHOW_SET_ROLE Identifier[$all.text] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SHOW_SET_ROLE, "TOK_SHOW_SET_ROLE")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (CommonTree)adaptor.create(Identifier, (all!=null?all.getText():null))
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1516:5: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_setRole8187);
                    identifier507=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier507.getTree());

                    // AST REWRITE
                    // elements: identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1516:16: -> ^( TOK_SHOW_SET_ROLE identifier )
                    {
                        // HiveParser.g:1516:19: ^( TOK_SHOW_SET_ROLE identifier )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SHOW_SET_ROLE, "TOK_SHOW_SET_ROLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "setRole"


    public static class showGrants_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "showGrants"
    // HiveParser.g:1520:1: showGrants : KW_SHOW KW_GRANT ( principalName )? ( KW_ON privilegeIncludeColObject )? -> ^( TOK_SHOW_GRANT ( principalName )? ( privilegeIncludeColObject )? ) ;
    public final HiveParser.showGrants_return showGrants() throws RecognitionException {
        HiveParser.showGrants_return retval = new HiveParser.showGrants_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_SHOW508=null;
        Token KW_GRANT509=null;
        Token KW_ON511=null;
        HiveParser.principalName_return principalName510 =null;

        HiveParser.privilegeIncludeColObject_return privilegeIncludeColObject512 =null;


        CommonTree KW_SHOW508_tree=null;
        CommonTree KW_GRANT509_tree=null;
        CommonTree KW_ON511_tree=null;
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleSubtreeStream stream_privilegeIncludeColObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeIncludeColObject");
        RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");
        pushMsg("show grants", state);
        try {
            // HiveParser.g:1523:5: ( KW_SHOW KW_GRANT ( principalName )? ( KW_ON privilegeIncludeColObject )? -> ^( TOK_SHOW_GRANT ( principalName )? ( privilegeIncludeColObject )? ) )
            // HiveParser.g:1523:7: KW_SHOW KW_GRANT ( principalName )? ( KW_ON privilegeIncludeColObject )?
            {
            KW_SHOW508=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showGrants8228); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW508);


            KW_GRANT509=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_showGrants8230); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT509);


            // HiveParser.g:1523:24: ( principalName )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==KW_GROUP||LA153_0==KW_ROLE||LA153_0==KW_USER) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // HiveParser.g:1523:24: principalName
                    {
                    pushFollow(FOLLOW_principalName_in_showGrants8232);
                    principalName510=principalName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_principalName.add(principalName510.getTree());

                    }
                    break;

            }


            // HiveParser.g:1523:39: ( KW_ON privilegeIncludeColObject )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==KW_ON) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // HiveParser.g:1523:40: KW_ON privilegeIncludeColObject
                    {
                    KW_ON511=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_showGrants8236); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON511);


                    pushFollow(FOLLOW_privilegeIncludeColObject_in_showGrants8238);
                    privilegeIncludeColObject512=privilegeIncludeColObject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_privilegeIncludeColObject.add(privilegeIncludeColObject512.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: privilegeIncludeColObject, principalName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1524:5: -> ^( TOK_SHOW_GRANT ( principalName )? ( privilegeIncludeColObject )? )
            {
                // HiveParser.g:1524:8: ^( TOK_SHOW_GRANT ( principalName )? ( privilegeIncludeColObject )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SHOW_GRANT, "TOK_SHOW_GRANT")
                , root_1);

                // HiveParser.g:1524:25: ( principalName )?
                if ( stream_principalName.hasNext() ) {
                    adaptor.addChild(root_1, stream_principalName.nextTree());

                }
                stream_principalName.reset();

                // HiveParser.g:1524:40: ( privilegeIncludeColObject )?
                if ( stream_privilegeIncludeColObject.hasNext() ) {
                    adaptor.addChild(root_1, stream_privilegeIncludeColObject.nextTree());

                }
                stream_privilegeIncludeColObject.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "showGrants"


    public static class showRolePrincipals_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "showRolePrincipals"
    // HiveParser.g:1527:1: showRolePrincipals : KW_SHOW KW_PRINCIPALS roleName= identifier -> ^( TOK_SHOW_ROLE_PRINCIPALS $roleName) ;
    public final HiveParser.showRolePrincipals_return showRolePrincipals() throws RecognitionException {
        HiveParser.showRolePrincipals_return retval = new HiveParser.showRolePrincipals_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_SHOW513=null;
        Token KW_PRINCIPALS514=null;
        HiveParser_IdentifiersParser.identifier_return roleName =null;


        CommonTree KW_SHOW513_tree=null;
        CommonTree KW_PRINCIPALS514_tree=null;
        RewriteRuleTokenStream stream_KW_PRINCIPALS=new RewriteRuleTokenStream(adaptor,"token KW_PRINCIPALS");
        RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        pushMsg("show role principals", state);
        try {
            // HiveParser.g:1530:5: ( KW_SHOW KW_PRINCIPALS roleName= identifier -> ^( TOK_SHOW_ROLE_PRINCIPALS $roleName) )
            // HiveParser.g:1530:7: KW_SHOW KW_PRINCIPALS roleName= identifier
            {
            KW_SHOW513=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showRolePrincipals8283); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW513);


            KW_PRINCIPALS514=(Token)match(input,KW_PRINCIPALS,FOLLOW_KW_PRINCIPALS_in_showRolePrincipals8285); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_PRINCIPALS.add(KW_PRINCIPALS514);


            pushFollow(FOLLOW_identifier_in_showRolePrincipals8289);
            roleName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(roleName.getTree());

            // AST REWRITE
            // elements: roleName
            // token labels: 
            // rule labels: roleName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_roleName=new RewriteRuleSubtreeStream(adaptor,"rule roleName",roleName!=null?roleName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1531:5: -> ^( TOK_SHOW_ROLE_PRINCIPALS $roleName)
            {
                // HiveParser.g:1531:8: ^( TOK_SHOW_ROLE_PRINCIPALS $roleName)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SHOW_ROLE_PRINCIPALS, "TOK_SHOW_ROLE_PRINCIPALS")
                , root_1);

                adaptor.addChild(root_1, stream_roleName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "showRolePrincipals"


    public static class privilegeIncludeColObject_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "privilegeIncludeColObject"
    // HiveParser.g:1535:1: privilegeIncludeColObject : ( ( KW_ALL )=> KW_ALL -> ^( TOK_RESOURCE_ALL ) | privObjectCols -> ^( TOK_PRIV_OBJECT_COL privObjectCols ) );
    public final HiveParser.privilegeIncludeColObject_return privilegeIncludeColObject() throws RecognitionException {
        HiveParser.privilegeIncludeColObject_return retval = new HiveParser.privilegeIncludeColObject_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_ALL515=null;
        HiveParser.privObjectCols_return privObjectCols516 =null;


        CommonTree KW_ALL515_tree=null;
        RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
        RewriteRuleSubtreeStream stream_privObjectCols=new RewriteRuleSubtreeStream(adaptor,"rule privObjectCols");
        pushMsg("privilege object including columns", state);
        try {
            // HiveParser.g:1538:5: ( ( KW_ALL )=> KW_ALL -> ^( TOK_RESOURCE_ALL ) | privObjectCols -> ^( TOK_PRIV_OBJECT_COL privObjectCols ) )
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==KW_ALL) ) {
                int LA155_1 = input.LA(2);

                if ( (synpred12_HiveParser()) ) {
                    alt155=1;
                }
                else if ( ((useSQL11ReservedKeywordsForIdentifier())) ) {
                    alt155=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 1, input);

                    throw nvae;

                }
            }
            else if ( ((LA155_0 >= Identifier && LA155_0 <= KW_AFTER)||(LA155_0 >= KW_ALTER && LA155_0 <= KW_ANALYZE)||(LA155_0 >= KW_ARCHIVE && LA155_0 <= KW_CASCADE)||LA155_0==KW_CHANGE||(LA155_0 >= KW_CLUSTER && LA155_0 <= KW_COLLECTION)||(LA155_0 >= KW_COLUMNS && LA155_0 <= KW_CONCATENATE)||(LA155_0 >= KW_CONTINUE && LA155_0 <= KW_CREATE)||LA155_0==KW_CUBE||(LA155_0 >= KW_CURRENT_DATE && LA155_0 <= KW_DISABLE)||(LA155_0 >= KW_DISTRIBUTE && LA155_0 <= KW_ELEM_TYPE)||LA155_0==KW_ENABLE||LA155_0==KW_ESCAPED||(LA155_0 >= KW_EXCLUSIVE && LA155_0 <= KW_EXPORT)||(LA155_0 >= KW_EXTERNAL && LA155_0 <= KW_FLOAT)||(LA155_0 >= KW_FOR && LA155_0 <= KW_FORMATTED)||LA155_0==KW_FULL||(LA155_0 >= KW_FUNCTIONS && LA155_0 <= KW_GROUPING)||(LA155_0 >= KW_HOLD_DDLTIME && LA155_0 <= KW_IDXPROPERTIES)||(LA155_0 >= KW_IGNORE && LA155_0 <= KW_INTERSECT)||(LA155_0 >= KW_INTO && LA155_0 <= KW_JAR)||(LA155_0 >= KW_KEYS && LA155_0 <= KW_LEFT)||(LA155_0 >= KW_LIKE && LA155_0 <= KW_LONG)||(LA155_0 >= KW_MAPJOIN && LA155_0 <= KW_MONTH)||(LA155_0 >= KW_MSCK && LA155_0 <= KW_NOSCAN)||(LA155_0 >= KW_NO_DROP && LA155_0 <= KW_OFFLINE)||LA155_0==KW_OPTION||(LA155_0 >= KW_ORDER && LA155_0 <= KW_OUTPUTFORMAT)||(LA155_0 >= KW_OVERWRITE && LA155_0 <= KW_OWNER)||(LA155_0 >= KW_PARTITION && LA155_0 <= KW_PLUS)||(LA155_0 >= KW_PRETTY && LA155_0 <= KW_RECORDWRITER)||(LA155_0 >= KW_REGEXP && LA155_0 <= KW_SECOND)||(LA155_0 >= KW_SEMI && LA155_0 <= KW_TABLES)||(LA155_0 >= KW_TBLPROPERTIES && LA155_0 <= KW_TERMINATED)||(LA155_0 >= KW_TIMESTAMP && LA155_0 <= KW_TRANSACTIONS)||(LA155_0 >= KW_TRIGGER && LA155_0 <= KW_UNARCHIVE)||(LA155_0 >= KW_UNDO && LA155_0 <= KW_UNIONTYPE)||(LA155_0 >= KW_UNLOCK && LA155_0 <= KW_VALUE_TYPE)||LA155_0==KW_VIEW||LA155_0==KW_WHILE||(LA155_0 >= KW_WITH && LA155_0 <= KW_YEAR)) ) {
                alt155=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;

            }
            switch (alt155) {
                case 1 :
                    // HiveParser.g:1538:7: ( KW_ALL )=> KW_ALL
                    {
                    KW_ALL515=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_privilegeIncludeColObject8336); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ALL.add(KW_ALL515);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1538:26: -> ^( TOK_RESOURCE_ALL )
                    {
                        // HiveParser.g:1538:29: ^( TOK_RESOURCE_ALL )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_RESOURCE_ALL, "TOK_RESOURCE_ALL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1539:7: privObjectCols
                    {
                    pushFollow(FOLLOW_privObjectCols_in_privilegeIncludeColObject8350);
                    privObjectCols516=privObjectCols();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_privObjectCols.add(privObjectCols516.getTree());

                    // AST REWRITE
                    // elements: privObjectCols
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1539:22: -> ^( TOK_PRIV_OBJECT_COL privObjectCols )
                    {
                        // HiveParser.g:1539:25: ^( TOK_PRIV_OBJECT_COL privObjectCols )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_PRIV_OBJECT_COL, "TOK_PRIV_OBJECT_COL")
                        , root_1);

                        adaptor.addChild(root_1, stream_privObjectCols.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "privilegeIncludeColObject"


    public static class privilegeObject_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "privilegeObject"
    // HiveParser.g:1542:1: privilegeObject : KW_ON privObject -> ^( TOK_PRIV_OBJECT privObject ) ;
    public final HiveParser.privilegeObject_return privilegeObject() throws RecognitionException {
        HiveParser.privilegeObject_return retval = new HiveParser.privilegeObject_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_ON517=null;
        HiveParser.privObject_return privObject518 =null;


        CommonTree KW_ON517_tree=null;
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleSubtreeStream stream_privObject=new RewriteRuleSubtreeStream(adaptor,"rule privObject");
        pushMsg("privilege object", state);
        try {
            // HiveParser.g:1545:5: ( KW_ON privObject -> ^( TOK_PRIV_OBJECT privObject ) )
            // HiveParser.g:1545:7: KW_ON privObject
            {
            KW_ON517=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_privilegeObject8385); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON517);


            pushFollow(FOLLOW_privObject_in_privilegeObject8387);
            privObject518=privObject();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_privObject.add(privObject518.getTree());

            // AST REWRITE
            // elements: privObject
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1545:24: -> ^( TOK_PRIV_OBJECT privObject )
            {
                // HiveParser.g:1545:27: ^( TOK_PRIV_OBJECT privObject )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_PRIV_OBJECT, "TOK_PRIV_OBJECT")
                , root_1);

                adaptor.addChild(root_1, stream_privObject.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "privilegeObject"


    public static class privObject_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "privObject"
    // HiveParser.g:1549:1: privObject : ( ( KW_DATABASE | KW_SCHEMA ) identifier -> ^( TOK_DB_TYPE identifier ) | ( KW_TABLE )? tableName ( partitionSpec )? -> ^( TOK_TABLE_TYPE tableName ( partitionSpec )? ) | KW_URI (path= StringLiteral ) -> ^( TOK_URI_TYPE $path) | KW_SERVER identifier -> ^( TOK_SERVER_TYPE identifier ) );
    public final HiveParser.privObject_return privObject() throws RecognitionException {
        HiveParser.privObject_return retval = new HiveParser.privObject_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token path=null;
        Token KW_DATABASE519=null;
        Token KW_SCHEMA520=null;
        Token KW_TABLE522=null;
        Token KW_URI525=null;
        Token KW_SERVER526=null;
        HiveParser_IdentifiersParser.identifier_return identifier521 =null;

        HiveParser_FromClauseParser.tableName_return tableName523 =null;

        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec524 =null;

        HiveParser_IdentifiersParser.identifier_return identifier527 =null;


        CommonTree path_tree=null;
        CommonTree KW_DATABASE519_tree=null;
        CommonTree KW_SCHEMA520_tree=null;
        CommonTree KW_TABLE522_tree=null;
        CommonTree KW_URI525_tree=null;
        CommonTree KW_SERVER526_tree=null;
        RewriteRuleTokenStream stream_KW_SERVER=new RewriteRuleTokenStream(adaptor,"token KW_SERVER");
        RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_URI=new RewriteRuleTokenStream(adaptor,"token KW_URI");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        try {
            // HiveParser.g:1550:5: ( ( KW_DATABASE | KW_SCHEMA ) identifier -> ^( TOK_DB_TYPE identifier ) | ( KW_TABLE )? tableName ( partitionSpec )? -> ^( TOK_TABLE_TYPE tableName ( partitionSpec )? ) | KW_URI (path= StringLiteral ) -> ^( TOK_URI_TYPE $path) | KW_SERVER identifier -> ^( TOK_SERVER_TYPE identifier ) )
            int alt159=4;
            switch ( input.LA(1) ) {
            case KW_DATABASE:
                {
                alt159=1;
                }
                break;
            case KW_SCHEMA:
                {
                switch ( input.LA(2) ) {
                case Identifier:
                case KW_ADD:
                case KW_ADMIN:
                case KW_AFTER:
                case KW_ALL:
                case KW_ALTER:
                case KW_ANALYZE:
                case KW_ARCHIVE:
                case KW_ARRAY:
                case KW_AS:
                case KW_ASC:
                case KW_AUTHORIZATION:
                case KW_BEFORE:
                case KW_BETWEEN:
                case KW_BIGINT:
                case KW_BINARY:
                case KW_BOOLEAN:
                case KW_BOTH:
                case KW_BUCKET:
                case KW_BUCKETS:
                case KW_BY:
                case KW_CASCADE:
                case KW_CHANGE:
                case KW_CLUSTER:
                case KW_CLUSTERED:
                case KW_CLUSTERSTATUS:
                case KW_COLLECTION:
                case KW_COLUMNS:
                case KW_COMMENT:
                case KW_COMPACT:
                case KW_COMPACTIONS:
                case KW_COMPUTE:
                case KW_CONCATENATE:
                case KW_CONTINUE:
                case KW_CREATE:
                case KW_CUBE:
                case KW_CURRENT_DATE:
                case KW_CURRENT_TIMESTAMP:
                case KW_CURSOR:
                case KW_DATA:
                case KW_DATABASES:
                case KW_DATE:
                case KW_DATETIME:
                case KW_DAY:
                case KW_DBPROPERTIES:
                case KW_DECIMAL:
                case KW_DEFERRED:
                case KW_DEFINED:
                case KW_DELETE:
                case KW_DELIMITED:
                case KW_DEPENDENCY:
                case KW_DESC:
                case KW_DESCRIBE:
                case KW_DIRECTORIES:
                case KW_DIRECTORY:
                case KW_DISABLE:
                case KW_DISTRIBUTE:
                case KW_DOUBLE:
                case KW_DROP:
                case KW_ELEM_TYPE:
                case KW_ENABLE:
                case KW_ESCAPED:
                case KW_EXCLUSIVE:
                case KW_EXISTS:
                case KW_EXPLAIN:
                case KW_EXPORT:
                case KW_EXTERNAL:
                case KW_FALSE:
                case KW_FETCH:
                case KW_FIELDS:
                case KW_FILE:
                case KW_FILEFORMAT:
                case KW_FIRST:
                case KW_FLOAT:
                case KW_FOR:
                case KW_FORMAT:
                case KW_FORMATTED:
                case KW_FULL:
                case KW_FUNCTIONS:
                case KW_GRANT:
                case KW_GROUP:
                case KW_GROUPING:
                case KW_HOLD_DDLTIME:
                case KW_HOUR:
                case KW_IDXPROPERTIES:
                case KW_IGNORE:
                case KW_IMPORT:
                case KW_IN:
                case KW_INDEX:
                case KW_INDEXES:
                case KW_INNER:
                case KW_INPATH:
                case KW_INPUTDRIVER:
                case KW_INPUTFORMAT:
                case KW_INSERT:
                case KW_INT:
                case KW_INTERSECT:
                case KW_INTO:
                case KW_IS:
                case KW_ITEMS:
                case KW_JAR:
                case KW_KEYS:
                case KW_KEY_TYPE:
                case KW_LATERAL:
                case KW_LEFT:
                case KW_LIKE:
                case KW_LIMIT:
                case KW_LINES:
                case KW_LOAD:
                case KW_LOCAL:
                case KW_LOCATION:
                case KW_LOCK:
                case KW_LOCKS:
                case KW_LOGICAL:
                case KW_LONG:
                case KW_MAPJOIN:
                case KW_MATERIALIZED:
                case KW_METADATA:
                case KW_MINUS:
                case KW_MINUTE:
                case KW_MONTH:
                case KW_MSCK:
                case KW_NONE:
                case KW_NOSCAN:
                case KW_NO_DROP:
                case KW_NULL:
                case KW_OF:
                case KW_OFFLINE:
                case KW_OPTION:
                case KW_ORDER:
                case KW_OUT:
                case KW_OUTER:
                case KW_OUTPUTDRIVER:
                case KW_OUTPUTFORMAT:
                case KW_OVERWRITE:
                case KW_OWNER:
                case KW_PARTITIONED:
                case KW_PARTITIONS:
                case KW_PERCENT:
                case KW_PLUS:
                case KW_PRETTY:
                case KW_PRINCIPALS:
                case KW_PROCEDURE:
                case KW_PROTECTION:
                case KW_PURGE:
                case KW_RANGE:
                case KW_READ:
                case KW_READONLY:
                case KW_READS:
                case KW_REBUILD:
                case KW_RECORDREADER:
                case KW_RECORDWRITER:
                case KW_REGEXP:
                case KW_RELOAD:
                case KW_RENAME:
                case KW_REPAIR:
                case KW_REPLACE:
                case KW_REPLICATION:
                case KW_RESTRICT:
                case KW_REVOKE:
                case KW_REWRITE:
                case KW_RIGHT:
                case KW_RLIKE:
                case KW_ROLE:
                case KW_ROLES:
                case KW_ROLLUP:
                case KW_ROW:
                case KW_ROWS:
                case KW_SCHEMA:
                case KW_SCHEMAS:
                case KW_SECOND:
                case KW_SEMI:
                case KW_SERDE:
                case KW_SERDEPROPERTIES:
                case KW_SERVER:
                case KW_SET:
                case KW_SETS:
                case KW_SHARED:
                case KW_SHOW:
                case KW_SHOW_DATABASE:
                case KW_SKEWED:
                case KW_SMALLINT:
                case KW_SORT:
                case KW_SORTED:
                case KW_SSL:
                case KW_STATISTICS:
                case KW_STORED:
                case KW_STREAMTABLE:
                case KW_STRING:
                case KW_STRUCT:
                case KW_TABLE:
                case KW_TABLES:
                case KW_TBLPROPERTIES:
                case KW_TEMPORARY:
                case KW_TERMINATED:
                case KW_TIMESTAMP:
                case KW_TINYINT:
                case KW_TOUCH:
                case KW_TRANSACTIONS:
                case KW_TRIGGER:
                case KW_TRUE:
                case KW_TRUNCATE:
                case KW_UNARCHIVE:
                case KW_UNDO:
                case KW_UNION:
                case KW_UNIONTYPE:
                case KW_UNLOCK:
                case KW_UNSET:
                case KW_UNSIGNED:
                case KW_UPDATE:
                case KW_URI:
                case KW_USE:
                case KW_USER:
                case KW_USING:
                case KW_UTC:
                case KW_UTCTIMESTAMP:
                case KW_VALUES:
                case KW_VALUE_TYPE:
                case KW_VIEW:
                case KW_WHILE:
                case KW_WITH:
                case KW_YEAR:
                    {
                    alt159=1;
                    }
                    break;
                case KW_PARTITION:
                    {
                    int LA159_11 = input.LA(3);

                    if ( (LA159_11==LPAREN) ) {
                        alt159=2;
                    }
                    else if ( (LA159_11==KW_FROM||LA159_11==KW_TO) ) {
                        alt159=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 159, 11, input);

                        throw nvae;

                    }
                    }
                    break;
                case DOT:
                case KW_FROM:
                    {
                    alt159=2;
                    }
                    break;
                case KW_TO:
                    {
                    int LA159_13 = input.LA(3);

                    if ( (LA159_13==KW_FROM||LA159_13==KW_TO) ) {
                        alt159=1;
                    }
                    else if ( (LA159_13==KW_GROUP||LA159_13==KW_ROLE||LA159_13==KW_USER) ) {
                        alt159=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 159, 13, input);

                        throw nvae;

                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 159, 2, input);

                    throw nvae;

                }

                }
                break;
            case Identifier:
            case KW_ADD:
            case KW_ADMIN:
            case KW_AFTER:
            case KW_ALL:
            case KW_ALTER:
            case KW_ANALYZE:
            case KW_ARCHIVE:
            case KW_ARRAY:
            case KW_AS:
            case KW_ASC:
            case KW_AUTHORIZATION:
            case KW_BEFORE:
            case KW_BETWEEN:
            case KW_BIGINT:
            case KW_BINARY:
            case KW_BOOLEAN:
            case KW_BOTH:
            case KW_BUCKET:
            case KW_BUCKETS:
            case KW_BY:
            case KW_CASCADE:
            case KW_CHANGE:
            case KW_CLUSTER:
            case KW_CLUSTERED:
            case KW_CLUSTERSTATUS:
            case KW_COLLECTION:
            case KW_COLUMNS:
            case KW_COMMENT:
            case KW_COMPACT:
            case KW_COMPACTIONS:
            case KW_COMPUTE:
            case KW_CONCATENATE:
            case KW_CONTINUE:
            case KW_CREATE:
            case KW_CUBE:
            case KW_CURRENT_DATE:
            case KW_CURRENT_TIMESTAMP:
            case KW_CURSOR:
            case KW_DATA:
            case KW_DATABASES:
            case KW_DATE:
            case KW_DATETIME:
            case KW_DAY:
            case KW_DBPROPERTIES:
            case KW_DECIMAL:
            case KW_DEFERRED:
            case KW_DEFINED:
            case KW_DELETE:
            case KW_DELIMITED:
            case KW_DEPENDENCY:
            case KW_DESC:
            case KW_DESCRIBE:
            case KW_DIRECTORIES:
            case KW_DIRECTORY:
            case KW_DISABLE:
            case KW_DISTRIBUTE:
            case KW_DOUBLE:
            case KW_DROP:
            case KW_ELEM_TYPE:
            case KW_ENABLE:
            case KW_ESCAPED:
            case KW_EXCLUSIVE:
            case KW_EXISTS:
            case KW_EXPLAIN:
            case KW_EXPORT:
            case KW_EXTERNAL:
            case KW_FALSE:
            case KW_FETCH:
            case KW_FIELDS:
            case KW_FILE:
            case KW_FILEFORMAT:
            case KW_FIRST:
            case KW_FLOAT:
            case KW_FOR:
            case KW_FORMAT:
            case KW_FORMATTED:
            case KW_FULL:
            case KW_FUNCTIONS:
            case KW_GRANT:
            case KW_GROUP:
            case KW_GROUPING:
            case KW_HOLD_DDLTIME:
            case KW_HOUR:
            case KW_IDXPROPERTIES:
            case KW_IGNORE:
            case KW_IMPORT:
            case KW_IN:
            case KW_INDEX:
            case KW_INDEXES:
            case KW_INNER:
            case KW_INPATH:
            case KW_INPUTDRIVER:
            case KW_INPUTFORMAT:
            case KW_INSERT:
            case KW_INT:
            case KW_INTERSECT:
            case KW_INTO:
            case KW_IS:
            case KW_ITEMS:
            case KW_JAR:
            case KW_KEYS:
            case KW_KEY_TYPE:
            case KW_LATERAL:
            case KW_LEFT:
            case KW_LIKE:
            case KW_LIMIT:
            case KW_LINES:
            case KW_LOAD:
            case KW_LOCAL:
            case KW_LOCATION:
            case KW_LOCK:
            case KW_LOCKS:
            case KW_LOGICAL:
            case KW_LONG:
            case KW_MAPJOIN:
            case KW_MATERIALIZED:
            case KW_METADATA:
            case KW_MINUS:
            case KW_MINUTE:
            case KW_MONTH:
            case KW_MSCK:
            case KW_NONE:
            case KW_NOSCAN:
            case KW_NO_DROP:
            case KW_NULL:
            case KW_OF:
            case KW_OFFLINE:
            case KW_OPTION:
            case KW_ORDER:
            case KW_OUT:
            case KW_OUTER:
            case KW_OUTPUTDRIVER:
            case KW_OUTPUTFORMAT:
            case KW_OVERWRITE:
            case KW_OWNER:
            case KW_PARTITION:
            case KW_PARTITIONED:
            case KW_PARTITIONS:
            case KW_PERCENT:
            case KW_PLUS:
            case KW_PRETTY:
            case KW_PRINCIPALS:
            case KW_PROCEDURE:
            case KW_PROTECTION:
            case KW_PURGE:
            case KW_RANGE:
            case KW_READ:
            case KW_READONLY:
            case KW_READS:
            case KW_REBUILD:
            case KW_RECORDREADER:
            case KW_RECORDWRITER:
            case KW_REGEXP:
            case KW_RELOAD:
            case KW_RENAME:
            case KW_REPAIR:
            case KW_REPLACE:
            case KW_REPLICATION:
            case KW_RESTRICT:
            case KW_REVOKE:
            case KW_REWRITE:
            case KW_RIGHT:
            case KW_RLIKE:
            case KW_ROLE:
            case KW_ROLES:
            case KW_ROLLUP:
            case KW_ROW:
            case KW_ROWS:
            case KW_SCHEMAS:
            case KW_SECOND:
            case KW_SEMI:
            case KW_SERDE:
            case KW_SERDEPROPERTIES:
            case KW_SET:
            case KW_SETS:
            case KW_SHARED:
            case KW_SHOW:
            case KW_SHOW_DATABASE:
            case KW_SKEWED:
            case KW_SMALLINT:
            case KW_SORT:
            case KW_SORTED:
            case KW_SSL:
            case KW_STATISTICS:
            case KW_STORED:
            case KW_STREAMTABLE:
            case KW_STRING:
            case KW_STRUCT:
            case KW_TABLE:
            case KW_TABLES:
            case KW_TBLPROPERTIES:
            case KW_TEMPORARY:
            case KW_TERMINATED:
            case KW_TIMESTAMP:
            case KW_TINYINT:
            case KW_TO:
            case KW_TOUCH:
            case KW_TRANSACTIONS:
            case KW_TRIGGER:
            case KW_TRUE:
            case KW_TRUNCATE:
            case KW_UNARCHIVE:
            case KW_UNDO:
            case KW_UNION:
            case KW_UNIONTYPE:
            case KW_UNLOCK:
            case KW_UNSET:
            case KW_UNSIGNED:
            case KW_UPDATE:
            case KW_USE:
            case KW_USER:
            case KW_USING:
            case KW_UTC:
            case KW_UTCTIMESTAMP:
            case KW_VALUES:
            case KW_VALUE_TYPE:
            case KW_VIEW:
            case KW_WHILE:
            case KW_WITH:
            case KW_YEAR:
                {
                alt159=2;
                }
                break;
            case KW_URI:
                {
                int LA159_5 = input.LA(2);

                if ( (LA159_5==DOT||LA159_5==KW_FROM||LA159_5==KW_PARTITION||LA159_5==KW_TO) ) {
                    alt159=2;
                }
                else if ( (LA159_5==StringLiteral) ) {
                    alt159=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 159, 5, input);

                    throw nvae;

                }
                }
                break;
            case KW_SERVER:
                {
                switch ( input.LA(2) ) {
                case DOT:
                case KW_FROM:
                    {
                    alt159=2;
                    }
                    break;
                case KW_PARTITION:
                    {
                    int LA159_22 = input.LA(3);

                    if ( (LA159_22==LPAREN) ) {
                        alt159=2;
                    }
                    else if ( (LA159_22==KW_FROM||LA159_22==KW_TO) ) {
                        alt159=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 159, 22, input);

                        throw nvae;

                    }
                    }
                    break;
                case KW_TO:
                    {
                    int LA159_23 = input.LA(3);

                    if ( (LA159_23==KW_GROUP||LA159_23==KW_ROLE||LA159_23==KW_USER) ) {
                        alt159=2;
                    }
                    else if ( (LA159_23==KW_FROM||LA159_23==KW_TO) ) {
                        alt159=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 159, 23, input);

                        throw nvae;

                    }
                    }
                    break;
                case Identifier:
                case KW_ADD:
                case KW_ADMIN:
                case KW_AFTER:
                case KW_ALL:
                case KW_ALTER:
                case KW_ANALYZE:
                case KW_ARCHIVE:
                case KW_ARRAY:
                case KW_AS:
                case KW_ASC:
                case KW_AUTHORIZATION:
                case KW_BEFORE:
                case KW_BETWEEN:
                case KW_BIGINT:
                case KW_BINARY:
                case KW_BOOLEAN:
                case KW_BOTH:
                case KW_BUCKET:
                case KW_BUCKETS:
                case KW_BY:
                case KW_CASCADE:
                case KW_CHANGE:
                case KW_CLUSTER:
                case KW_CLUSTERED:
                case KW_CLUSTERSTATUS:
                case KW_COLLECTION:
                case KW_COLUMNS:
                case KW_COMMENT:
                case KW_COMPACT:
                case KW_COMPACTIONS:
                case KW_COMPUTE:
                case KW_CONCATENATE:
                case KW_CONTINUE:
                case KW_CREATE:
                case KW_CUBE:
                case KW_CURRENT_DATE:
                case KW_CURRENT_TIMESTAMP:
                case KW_CURSOR:
                case KW_DATA:
                case KW_DATABASES:
                case KW_DATE:
                case KW_DATETIME:
                case KW_DAY:
                case KW_DBPROPERTIES:
                case KW_DECIMAL:
                case KW_DEFERRED:
                case KW_DEFINED:
                case KW_DELETE:
                case KW_DELIMITED:
                case KW_DEPENDENCY:
                case KW_DESC:
                case KW_DESCRIBE:
                case KW_DIRECTORIES:
                case KW_DIRECTORY:
                case KW_DISABLE:
                case KW_DISTRIBUTE:
                case KW_DOUBLE:
                case KW_DROP:
                case KW_ELEM_TYPE:
                case KW_ENABLE:
                case KW_ESCAPED:
                case KW_EXCLUSIVE:
                case KW_EXISTS:
                case KW_EXPLAIN:
                case KW_EXPORT:
                case KW_EXTERNAL:
                case KW_FALSE:
                case KW_FETCH:
                case KW_FIELDS:
                case KW_FILE:
                case KW_FILEFORMAT:
                case KW_FIRST:
                case KW_FLOAT:
                case KW_FOR:
                case KW_FORMAT:
                case KW_FORMATTED:
                case KW_FULL:
                case KW_FUNCTIONS:
                case KW_GRANT:
                case KW_GROUP:
                case KW_GROUPING:
                case KW_HOLD_DDLTIME:
                case KW_HOUR:
                case KW_IDXPROPERTIES:
                case KW_IGNORE:
                case KW_IMPORT:
                case KW_IN:
                case KW_INDEX:
                case KW_INDEXES:
                case KW_INNER:
                case KW_INPATH:
                case KW_INPUTDRIVER:
                case KW_INPUTFORMAT:
                case KW_INSERT:
                case KW_INT:
                case KW_INTERSECT:
                case KW_INTO:
                case KW_IS:
                case KW_ITEMS:
                case KW_JAR:
                case KW_KEYS:
                case KW_KEY_TYPE:
                case KW_LATERAL:
                case KW_LEFT:
                case KW_LIKE:
                case KW_LIMIT:
                case KW_LINES:
                case KW_LOAD:
                case KW_LOCAL:
                case KW_LOCATION:
                case KW_LOCK:
                case KW_LOCKS:
                case KW_LOGICAL:
                case KW_LONG:
                case KW_MAPJOIN:
                case KW_MATERIALIZED:
                case KW_METADATA:
                case KW_MINUS:
                case KW_MINUTE:
                case KW_MONTH:
                case KW_MSCK:
                case KW_NONE:
                case KW_NOSCAN:
                case KW_NO_DROP:
                case KW_NULL:
                case KW_OF:
                case KW_OFFLINE:
                case KW_OPTION:
                case KW_ORDER:
                case KW_OUT:
                case KW_OUTER:
                case KW_OUTPUTDRIVER:
                case KW_OUTPUTFORMAT:
                case KW_OVERWRITE:
                case KW_OWNER:
                case KW_PARTITIONED:
                case KW_PARTITIONS:
                case KW_PERCENT:
                case KW_PLUS:
                case KW_PRETTY:
                case KW_PRINCIPALS:
                case KW_PROCEDURE:
                case KW_PROTECTION:
                case KW_PURGE:
                case KW_RANGE:
                case KW_READ:
                case KW_READONLY:
                case KW_READS:
                case KW_REBUILD:
                case KW_RECORDREADER:
                case KW_RECORDWRITER:
                case KW_REGEXP:
                case KW_RELOAD:
                case KW_RENAME:
                case KW_REPAIR:
                case KW_REPLACE:
                case KW_REPLICATION:
                case KW_RESTRICT:
                case KW_REVOKE:
                case KW_REWRITE:
                case KW_RIGHT:
                case KW_RLIKE:
                case KW_ROLE:
                case KW_ROLES:
                case KW_ROLLUP:
                case KW_ROW:
                case KW_ROWS:
                case KW_SCHEMA:
                case KW_SCHEMAS:
                case KW_SECOND:
                case KW_SEMI:
                case KW_SERDE:
                case KW_SERDEPROPERTIES:
                case KW_SERVER:
                case KW_SET:
                case KW_SETS:
                case KW_SHARED:
                case KW_SHOW:
                case KW_SHOW_DATABASE:
                case KW_SKEWED:
                case KW_SMALLINT:
                case KW_SORT:
                case KW_SORTED:
                case KW_SSL:
                case KW_STATISTICS:
                case KW_STORED:
                case KW_STREAMTABLE:
                case KW_STRING:
                case KW_STRUCT:
                case KW_TABLE:
                case KW_TABLES:
                case KW_TBLPROPERTIES:
                case KW_TEMPORARY:
                case KW_TERMINATED:
                case KW_TIMESTAMP:
                case KW_TINYINT:
                case KW_TOUCH:
                case KW_TRANSACTIONS:
                case KW_TRIGGER:
                case KW_TRUE:
                case KW_TRUNCATE:
                case KW_UNARCHIVE:
                case KW_UNDO:
                case KW_UNION:
                case KW_UNIONTYPE:
                case KW_UNLOCK:
                case KW_UNSET:
                case KW_UNSIGNED:
                case KW_UPDATE:
                case KW_URI:
                case KW_USE:
                case KW_USER:
                case KW_USING:
                case KW_UTC:
                case KW_UTCTIMESTAMP:
                case KW_VALUES:
                case KW_VALUE_TYPE:
                case KW_VIEW:
                case KW_WHILE:
                case KW_WITH:
                case KW_YEAR:
                    {
                    alt159=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 159, 7, input);

                    throw nvae;

                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;

            }

            switch (alt159) {
                case 1 :
                    // HiveParser.g:1550:7: ( KW_DATABASE | KW_SCHEMA ) identifier
                    {
                    // HiveParser.g:1550:7: ( KW_DATABASE | KW_SCHEMA )
                    int alt156=2;
                    int LA156_0 = input.LA(1);

                    if ( (LA156_0==KW_DATABASE) ) {
                        alt156=1;
                    }
                    else if ( (LA156_0==KW_SCHEMA) ) {
                        alt156=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 156, 0, input);

                        throw nvae;

                    }
                    switch (alt156) {
                        case 1 :
                            // HiveParser.g:1550:8: KW_DATABASE
                            {
                            KW_DATABASE519=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_privObject8414); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE519);


                            }
                            break;
                        case 2 :
                            // HiveParser.g:1550:20: KW_SCHEMA
                            {
                            KW_SCHEMA520=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_privObject8416); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA520);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_identifier_in_privObject8419);
                    identifier521=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier521.getTree());

                    // AST REWRITE
                    // elements: identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1550:42: -> ^( TOK_DB_TYPE identifier )
                    {
                        // HiveParser.g:1550:45: ^( TOK_DB_TYPE identifier )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_DB_TYPE, "TOK_DB_TYPE")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1551:7: ( KW_TABLE )? tableName ( partitionSpec )?
                    {
                    // HiveParser.g:1551:7: ( KW_TABLE )?
                    int alt157=2;
                    int LA157_0 = input.LA(1);

                    if ( (LA157_0==KW_TABLE) ) {
                        switch ( input.LA(2) ) {
                            case Identifier:
                            case KW_ADD:
                            case KW_ADMIN:
                            case KW_AFTER:
                            case KW_ALL:
                            case KW_ALTER:
                            case KW_ANALYZE:
                            case KW_ARCHIVE:
                            case KW_ARRAY:
                            case KW_AS:
                            case KW_ASC:
                            case KW_AUTHORIZATION:
                            case KW_BEFORE:
                            case KW_BETWEEN:
                            case KW_BIGINT:
                            case KW_BINARY:
                            case KW_BOOLEAN:
                            case KW_BOTH:
                            case KW_BUCKET:
                            case KW_BUCKETS:
                            case KW_BY:
                            case KW_CASCADE:
                            case KW_CHANGE:
                            case KW_CLUSTER:
                            case KW_CLUSTERED:
                            case KW_CLUSTERSTATUS:
                            case KW_COLLECTION:
                            case KW_COLUMNS:
                            case KW_COMMENT:
                            case KW_COMPACT:
                            case KW_COMPACTIONS:
                            case KW_COMPUTE:
                            case KW_CONCATENATE:
                            case KW_CONTINUE:
                            case KW_CREATE:
                            case KW_CUBE:
                            case KW_CURRENT_DATE:
                            case KW_CURRENT_TIMESTAMP:
                            case KW_CURSOR:
                            case KW_DATA:
                            case KW_DATABASES:
                            case KW_DATE:
                            case KW_DATETIME:
                            case KW_DAY:
                            case KW_DBPROPERTIES:
                            case KW_DECIMAL:
                            case KW_DEFERRED:
                            case KW_DEFINED:
                            case KW_DELETE:
                            case KW_DELIMITED:
                            case KW_DEPENDENCY:
                            case KW_DESC:
                            case KW_DESCRIBE:
                            case KW_DIRECTORIES:
                            case KW_DIRECTORY:
                            case KW_DISABLE:
                            case KW_DISTRIBUTE:
                            case KW_DOUBLE:
                            case KW_DROP:
                            case KW_ELEM_TYPE:
                            case KW_ENABLE:
                            case KW_ESCAPED:
                            case KW_EXCLUSIVE:
                            case KW_EXISTS:
                            case KW_EXPLAIN:
                            case KW_EXPORT:
                            case KW_EXTERNAL:
                            case KW_FALSE:
                            case KW_FETCH:
                            case KW_FIELDS:
                            case KW_FILE:
                            case KW_FILEFORMAT:
                            case KW_FIRST:
                            case KW_FLOAT:
                            case KW_FOR:
                            case KW_FORMAT:
                            case KW_FORMATTED:
                            case KW_FULL:
                            case KW_FUNCTIONS:
                            case KW_GRANT:
                            case KW_GROUP:
                            case KW_GROUPING:
                            case KW_HOLD_DDLTIME:
                            case KW_HOUR:
                            case KW_IDXPROPERTIES:
                            case KW_IGNORE:
                            case KW_IMPORT:
                            case KW_IN:
                            case KW_INDEX:
                            case KW_INDEXES:
                            case KW_INNER:
                            case KW_INPATH:
                            case KW_INPUTDRIVER:
                            case KW_INPUTFORMAT:
                            case KW_INSERT:
                            case KW_INT:
                            case KW_INTERSECT:
                            case KW_INTO:
                            case KW_IS:
                            case KW_ITEMS:
                            case KW_JAR:
                            case KW_KEYS:
                            case KW_KEY_TYPE:
                            case KW_LATERAL:
                            case KW_LEFT:
                            case KW_LIKE:
                            case KW_LIMIT:
                            case KW_LINES:
                            case KW_LOAD:
                            case KW_LOCAL:
                            case KW_LOCATION:
                            case KW_LOCK:
                            case KW_LOCKS:
                            case KW_LOGICAL:
                            case KW_LONG:
                            case KW_MAPJOIN:
                            case KW_MATERIALIZED:
                            case KW_METADATA:
                            case KW_MINUS:
                            case KW_MINUTE:
                            case KW_MONTH:
                            case KW_MSCK:
                            case KW_NONE:
                            case KW_NOSCAN:
                            case KW_NO_DROP:
                            case KW_NULL:
                            case KW_OF:
                            case KW_OFFLINE:
                            case KW_OPTION:
                            case KW_ORDER:
                            case KW_OUT:
                            case KW_OUTER:
                            case KW_OUTPUTDRIVER:
                            case KW_OUTPUTFORMAT:
                            case KW_OVERWRITE:
                            case KW_OWNER:
                            case KW_PARTITIONED:
                            case KW_PARTITIONS:
                            case KW_PERCENT:
                            case KW_PLUS:
                            case KW_PRETTY:
                            case KW_PRINCIPALS:
                            case KW_PROCEDURE:
                            case KW_PROTECTION:
                            case KW_PURGE:
                            case KW_RANGE:
                            case KW_READ:
                            case KW_READONLY:
                            case KW_READS:
                            case KW_REBUILD:
                            case KW_RECORDREADER:
                            case KW_RECORDWRITER:
                            case KW_REGEXP:
                            case KW_RELOAD:
                            case KW_RENAME:
                            case KW_REPAIR:
                            case KW_REPLACE:
                            case KW_REPLICATION:
                            case KW_RESTRICT:
                            case KW_REVOKE:
                            case KW_REWRITE:
                            case KW_RIGHT:
                            case KW_RLIKE:
                            case KW_ROLE:
                            case KW_ROLES:
                            case KW_ROLLUP:
                            case KW_ROW:
                            case KW_ROWS:
                            case KW_SCHEMA:
                            case KW_SCHEMAS:
                            case KW_SECOND:
                            case KW_SEMI:
                            case KW_SERDE:
                            case KW_SERDEPROPERTIES:
                            case KW_SERVER:
                            case KW_SET:
                            case KW_SETS:
                            case KW_SHARED:
                            case KW_SHOW:
                            case KW_SHOW_DATABASE:
                            case KW_SKEWED:
                            case KW_SMALLINT:
                            case KW_SORT:
                            case KW_SORTED:
                            case KW_SSL:
                            case KW_STATISTICS:
                            case KW_STORED:
                            case KW_STREAMTABLE:
                            case KW_STRING:
                            case KW_STRUCT:
                            case KW_TABLE:
                            case KW_TABLES:
                            case KW_TBLPROPERTIES:
                            case KW_TEMPORARY:
                            case KW_TERMINATED:
                            case KW_TIMESTAMP:
                            case KW_TINYINT:
                            case KW_TOUCH:
                            case KW_TRANSACTIONS:
                            case KW_TRIGGER:
                            case KW_TRUE:
                            case KW_TRUNCATE:
                            case KW_UNARCHIVE:
                            case KW_UNDO:
                            case KW_UNION:
                            case KW_UNIONTYPE:
                            case KW_UNLOCK:
                            case KW_UNSET:
                            case KW_UNSIGNED:
                            case KW_UPDATE:
                            case KW_URI:
                            case KW_USE:
                            case KW_USER:
                            case KW_USING:
                            case KW_UTC:
                            case KW_UTCTIMESTAMP:
                            case KW_VALUES:
                            case KW_VALUE_TYPE:
                            case KW_VIEW:
                            case KW_WHILE:
                            case KW_WITH:
                            case KW_YEAR:
                                {
                                alt157=1;
                                }
                                break;
                            case KW_PARTITION:
                                {
                                int LA157_7 = input.LA(3);

                                if ( (LA157_7==DOT||LA157_7==KW_FROM||LA157_7==KW_PARTITION||LA157_7==KW_TO) ) {
                                    alt157=1;
                                }
                                }
                                break;
                            case KW_TO:
                                {
                                int LA157_9 = input.LA(3);

                                if ( (LA157_9==DOT||LA157_9==KW_FROM||LA157_9==KW_PARTITION||LA157_9==KW_TO) ) {
                                    alt157=1;
                                }
                                }
                                break;
                        }

                    }
                    switch (alt157) {
                        case 1 :
                            // HiveParser.g:1551:7: KW_TABLE
                            {
                            KW_TABLE522=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_privObject8435); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE522);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_tableName_in_privObject8438);
                    tableName523=tableName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableName.add(tableName523.getTree());

                    // HiveParser.g:1551:27: ( partitionSpec )?
                    int alt158=2;
                    int LA158_0 = input.LA(1);

                    if ( (LA158_0==KW_PARTITION) ) {
                        alt158=1;
                    }
                    switch (alt158) {
                        case 1 :
                            // HiveParser.g:1551:27: partitionSpec
                            {
                            pushFollow(FOLLOW_partitionSpec_in_privObject8440);
                            partitionSpec524=partitionSpec();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec524.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: tableName, partitionSpec
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1551:42: -> ^( TOK_TABLE_TYPE tableName ( partitionSpec )? )
                    {
                        // HiveParser.g:1551:45: ^( TOK_TABLE_TYPE tableName ( partitionSpec )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_TABLE_TYPE, "TOK_TABLE_TYPE")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableName.nextTree());

                        // HiveParser.g:1551:72: ( partitionSpec )?
                        if ( stream_partitionSpec.hasNext() ) {
                            adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                        }
                        stream_partitionSpec.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:1552:7: KW_URI (path= StringLiteral )
                    {
                    KW_URI525=(Token)match(input,KW_URI,FOLLOW_KW_URI_in_privObject8460); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_URI.add(KW_URI525);


                    // HiveParser.g:1552:14: (path= StringLiteral )
                    // HiveParser.g:1552:15: path= StringLiteral
                    {
                    path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_privObject8465); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(path);


                    }


                    // AST REWRITE
                    // elements: path
                    // token labels: path
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1552:35: -> ^( TOK_URI_TYPE $path)
                    {
                        // HiveParser.g:1552:39: ^( TOK_URI_TYPE $path)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_URI_TYPE, "TOK_URI_TYPE")
                        , root_1);

                        adaptor.addChild(root_1, stream_path.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // HiveParser.g:1553:7: KW_SERVER identifier
                    {
                    KW_SERVER526=(Token)match(input,KW_SERVER,FOLLOW_KW_SERVER_in_privObject8484); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SERVER.add(KW_SERVER526);


                    pushFollow(FOLLOW_identifier_in_privObject8486);
                    identifier527=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier527.getTree());

                    // AST REWRITE
                    // elements: identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1553:28: -> ^( TOK_SERVER_TYPE identifier )
                    {
                        // HiveParser.g:1553:31: ^( TOK_SERVER_TYPE identifier )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SERVER_TYPE, "TOK_SERVER_TYPE")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "privObject"


    public static class privObjectCols_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "privObjectCols"
    // HiveParser.g:1556:1: privObjectCols : ( ( KW_DATABASE | KW_SCHEMA ) identifier -> ^( TOK_DB_TYPE identifier ) | ( KW_TABLE )? tableName ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )? -> ^( TOK_TABLE_TYPE tableName ( $cols)? ( partitionSpec )? ) | KW_URI (path= StringLiteral ) -> ^( TOK_URI_TYPE $path) | KW_SERVER identifier -> ^( TOK_SERVER_TYPE identifier ) );
    public final HiveParser.privObjectCols_return privObjectCols() throws RecognitionException {
        HiveParser.privObjectCols_return retval = new HiveParser.privObjectCols_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token path=null;
        Token KW_DATABASE528=null;
        Token KW_SCHEMA529=null;
        Token KW_TABLE531=null;
        Token LPAREN533=null;
        Token RPAREN534=null;
        Token KW_URI536=null;
        Token KW_SERVER537=null;
        HiveParser.columnNameList_return cols =null;

        HiveParser_IdentifiersParser.identifier_return identifier530 =null;

        HiveParser_FromClauseParser.tableName_return tableName532 =null;

        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec535 =null;

        HiveParser_IdentifiersParser.identifier_return identifier538 =null;


        CommonTree path_tree=null;
        CommonTree KW_DATABASE528_tree=null;
        CommonTree KW_SCHEMA529_tree=null;
        CommonTree KW_TABLE531_tree=null;
        CommonTree LPAREN533_tree=null;
        CommonTree RPAREN534_tree=null;
        CommonTree KW_URI536_tree=null;
        CommonTree KW_SERVER537_tree=null;
        RewriteRuleTokenStream stream_KW_SERVER=new RewriteRuleTokenStream(adaptor,"token KW_SERVER");
        RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_URI=new RewriteRuleTokenStream(adaptor,"token KW_URI");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        try {
            // HiveParser.g:1557:5: ( ( KW_DATABASE | KW_SCHEMA ) identifier -> ^( TOK_DB_TYPE identifier ) | ( KW_TABLE )? tableName ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )? -> ^( TOK_TABLE_TYPE tableName ( $cols)? ( partitionSpec )? ) | KW_URI (path= StringLiteral ) -> ^( TOK_URI_TYPE $path) | KW_SERVER identifier -> ^( TOK_SERVER_TYPE identifier ) )
            int alt164=4;
            switch ( input.LA(1) ) {
            case KW_DATABASE:
                {
                alt164=1;
                }
                break;
            case KW_SCHEMA:
                {
                switch ( input.LA(2) ) {
                case Identifier:
                case KW_ADD:
                case KW_ADMIN:
                case KW_AFTER:
                case KW_ALL:
                case KW_ALTER:
                case KW_ANALYZE:
                case KW_ARCHIVE:
                case KW_ARRAY:
                case KW_AS:
                case KW_ASC:
                case KW_AUTHORIZATION:
                case KW_BEFORE:
                case KW_BETWEEN:
                case KW_BIGINT:
                case KW_BINARY:
                case KW_BOOLEAN:
                case KW_BOTH:
                case KW_BUCKET:
                case KW_BUCKETS:
                case KW_BY:
                case KW_CASCADE:
                case KW_CHANGE:
                case KW_CLUSTER:
                case KW_CLUSTERED:
                case KW_CLUSTERSTATUS:
                case KW_COLLECTION:
                case KW_COLUMNS:
                case KW_COMMENT:
                case KW_COMPACT:
                case KW_COMPACTIONS:
                case KW_COMPUTE:
                case KW_CONCATENATE:
                case KW_CONTINUE:
                case KW_CREATE:
                case KW_CUBE:
                case KW_CURRENT_DATE:
                case KW_CURRENT_TIMESTAMP:
                case KW_CURSOR:
                case KW_DATA:
                case KW_DATABASES:
                case KW_DATE:
                case KW_DATETIME:
                case KW_DAY:
                case KW_DBPROPERTIES:
                case KW_DECIMAL:
                case KW_DEFERRED:
                case KW_DEFINED:
                case KW_DELETE:
                case KW_DELIMITED:
                case KW_DEPENDENCY:
                case KW_DESC:
                case KW_DESCRIBE:
                case KW_DIRECTORIES:
                case KW_DIRECTORY:
                case KW_DISABLE:
                case KW_DISTRIBUTE:
                case KW_DOUBLE:
                case KW_DROP:
                case KW_ELEM_TYPE:
                case KW_ENABLE:
                case KW_ESCAPED:
                case KW_EXCLUSIVE:
                case KW_EXISTS:
                case KW_EXPLAIN:
                case KW_EXPORT:
                case KW_EXTERNAL:
                case KW_FALSE:
                case KW_FETCH:
                case KW_FIELDS:
                case KW_FILE:
                case KW_FILEFORMAT:
                case KW_FIRST:
                case KW_FLOAT:
                case KW_FOR:
                case KW_FORMAT:
                case KW_FORMATTED:
                case KW_FULL:
                case KW_FUNCTIONS:
                case KW_GRANT:
                case KW_GROUP:
                case KW_GROUPING:
                case KW_HOLD_DDLTIME:
                case KW_HOUR:
                case KW_IDXPROPERTIES:
                case KW_IGNORE:
                case KW_IMPORT:
                case KW_IN:
                case KW_INDEX:
                case KW_INDEXES:
                case KW_INNER:
                case KW_INPATH:
                case KW_INPUTDRIVER:
                case KW_INPUTFORMAT:
                case KW_INSERT:
                case KW_INT:
                case KW_INTERSECT:
                case KW_INTO:
                case KW_IS:
                case KW_ITEMS:
                case KW_JAR:
                case KW_KEYS:
                case KW_KEY_TYPE:
                case KW_LATERAL:
                case KW_LEFT:
                case KW_LIKE:
                case KW_LIMIT:
                case KW_LINES:
                case KW_LOAD:
                case KW_LOCAL:
                case KW_LOCATION:
                case KW_LOCK:
                case KW_LOCKS:
                case KW_LOGICAL:
                case KW_LONG:
                case KW_MAPJOIN:
                case KW_MATERIALIZED:
                case KW_METADATA:
                case KW_MINUS:
                case KW_MINUTE:
                case KW_MONTH:
                case KW_MSCK:
                case KW_NONE:
                case KW_NOSCAN:
                case KW_NO_DROP:
                case KW_NULL:
                case KW_OF:
                case KW_OFFLINE:
                case KW_OPTION:
                case KW_ORDER:
                case KW_OUT:
                case KW_OUTER:
                case KW_OUTPUTDRIVER:
                case KW_OUTPUTFORMAT:
                case KW_OVERWRITE:
                case KW_OWNER:
                case KW_PARTITIONED:
                case KW_PARTITIONS:
                case KW_PERCENT:
                case KW_PLUS:
                case KW_PRETTY:
                case KW_PRINCIPALS:
                case KW_PROCEDURE:
                case KW_PROTECTION:
                case KW_PURGE:
                case KW_RANGE:
                case KW_READ:
                case KW_READONLY:
                case KW_READS:
                case KW_REBUILD:
                case KW_RECORDREADER:
                case KW_RECORDWRITER:
                case KW_REGEXP:
                case KW_RELOAD:
                case KW_RENAME:
                case KW_REPAIR:
                case KW_REPLACE:
                case KW_REPLICATION:
                case KW_RESTRICT:
                case KW_REVOKE:
                case KW_REWRITE:
                case KW_RIGHT:
                case KW_RLIKE:
                case KW_ROLE:
                case KW_ROLES:
                case KW_ROLLUP:
                case KW_ROW:
                case KW_ROWS:
                case KW_SCHEMA:
                case KW_SCHEMAS:
                case KW_SECOND:
                case KW_SEMI:
                case KW_SERDE:
                case KW_SERDEPROPERTIES:
                case KW_SERVER:
                case KW_SET:
                case KW_SETS:
                case KW_SHARED:
                case KW_SHOW:
                case KW_SHOW_DATABASE:
                case KW_SKEWED:
                case KW_SMALLINT:
                case KW_SORT:
                case KW_SORTED:
                case KW_SSL:
                case KW_STATISTICS:
                case KW_STORED:
                case KW_STREAMTABLE:
                case KW_STRING:
                case KW_STRUCT:
                case KW_TABLE:
                case KW_TABLES:
                case KW_TBLPROPERTIES:
                case KW_TEMPORARY:
                case KW_TERMINATED:
                case KW_TIMESTAMP:
                case KW_TINYINT:
                case KW_TO:
                case KW_TOUCH:
                case KW_TRANSACTIONS:
                case KW_TRIGGER:
                case KW_TRUE:
                case KW_TRUNCATE:
                case KW_UNARCHIVE:
                case KW_UNDO:
                case KW_UNION:
                case KW_UNIONTYPE:
                case KW_UNLOCK:
                case KW_UNSET:
                case KW_UNSIGNED:
                case KW_UPDATE:
                case KW_URI:
                case KW_USE:
                case KW_USER:
                case KW_USING:
                case KW_UTC:
                case KW_UTCTIMESTAMP:
                case KW_VALUES:
                case KW_VALUE_TYPE:
                case KW_VIEW:
                case KW_WHILE:
                case KW_WITH:
                case KW_YEAR:
                    {
                    alt164=1;
                    }
                    break;
                case KW_PARTITION:
                    {
                    int LA164_11 = input.LA(3);

                    if ( (LA164_11==LPAREN) ) {
                        alt164=2;
                    }
                    else if ( (LA164_11==EOF) ) {
                        alt164=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 164, 11, input);

                        throw nvae;

                    }
                    }
                    break;
                case EOF:
                case DOT:
                case LPAREN:
                    {
                    alt164=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 164, 2, input);

                    throw nvae;

                }

                }
                break;
            case Identifier:
            case KW_ADD:
            case KW_ADMIN:
            case KW_AFTER:
            case KW_ALL:
            case KW_ALTER:
            case KW_ANALYZE:
            case KW_ARCHIVE:
            case KW_ARRAY:
            case KW_AS:
            case KW_ASC:
            case KW_AUTHORIZATION:
            case KW_BEFORE:
            case KW_BETWEEN:
            case KW_BIGINT:
            case KW_BINARY:
            case KW_BOOLEAN:
            case KW_BOTH:
            case KW_BUCKET:
            case KW_BUCKETS:
            case KW_BY:
            case KW_CASCADE:
            case KW_CHANGE:
            case KW_CLUSTER:
            case KW_CLUSTERED:
            case KW_CLUSTERSTATUS:
            case KW_COLLECTION:
            case KW_COLUMNS:
            case KW_COMMENT:
            case KW_COMPACT:
            case KW_COMPACTIONS:
            case KW_COMPUTE:
            case KW_CONCATENATE:
            case KW_CONTINUE:
            case KW_CREATE:
            case KW_CUBE:
            case KW_CURRENT_DATE:
            case KW_CURRENT_TIMESTAMP:
            case KW_CURSOR:
            case KW_DATA:
            case KW_DATABASES:
            case KW_DATE:
            case KW_DATETIME:
            case KW_DAY:
            case KW_DBPROPERTIES:
            case KW_DECIMAL:
            case KW_DEFERRED:
            case KW_DEFINED:
            case KW_DELETE:
            case KW_DELIMITED:
            case KW_DEPENDENCY:
            case KW_DESC:
            case KW_DESCRIBE:
            case KW_DIRECTORIES:
            case KW_DIRECTORY:
            case KW_DISABLE:
            case KW_DISTRIBUTE:
            case KW_DOUBLE:
            case KW_DROP:
            case KW_ELEM_TYPE:
            case KW_ENABLE:
            case KW_ESCAPED:
            case KW_EXCLUSIVE:
            case KW_EXISTS:
            case KW_EXPLAIN:
            case KW_EXPORT:
            case KW_EXTERNAL:
            case KW_FALSE:
            case KW_FETCH:
            case KW_FIELDS:
            case KW_FILE:
            case KW_FILEFORMAT:
            case KW_FIRST:
            case KW_FLOAT:
            case KW_FOR:
            case KW_FORMAT:
            case KW_FORMATTED:
            case KW_FULL:
            case KW_FUNCTIONS:
            case KW_GRANT:
            case KW_GROUP:
            case KW_GROUPING:
            case KW_HOLD_DDLTIME:
            case KW_HOUR:
            case KW_IDXPROPERTIES:
            case KW_IGNORE:
            case KW_IMPORT:
            case KW_IN:
            case KW_INDEX:
            case KW_INDEXES:
            case KW_INNER:
            case KW_INPATH:
            case KW_INPUTDRIVER:
            case KW_INPUTFORMAT:
            case KW_INSERT:
            case KW_INT:
            case KW_INTERSECT:
            case KW_INTO:
            case KW_IS:
            case KW_ITEMS:
            case KW_JAR:
            case KW_KEYS:
            case KW_KEY_TYPE:
            case KW_LATERAL:
            case KW_LEFT:
            case KW_LIKE:
            case KW_LIMIT:
            case KW_LINES:
            case KW_LOAD:
            case KW_LOCAL:
            case KW_LOCATION:
            case KW_LOCK:
            case KW_LOCKS:
            case KW_LOGICAL:
            case KW_LONG:
            case KW_MAPJOIN:
            case KW_MATERIALIZED:
            case KW_METADATA:
            case KW_MINUS:
            case KW_MINUTE:
            case KW_MONTH:
            case KW_MSCK:
            case KW_NONE:
            case KW_NOSCAN:
            case KW_NO_DROP:
            case KW_NULL:
            case KW_OF:
            case KW_OFFLINE:
            case KW_OPTION:
            case KW_ORDER:
            case KW_OUT:
            case KW_OUTER:
            case KW_OUTPUTDRIVER:
            case KW_OUTPUTFORMAT:
            case KW_OVERWRITE:
            case KW_OWNER:
            case KW_PARTITION:
            case KW_PARTITIONED:
            case KW_PARTITIONS:
            case KW_PERCENT:
            case KW_PLUS:
            case KW_PRETTY:
            case KW_PRINCIPALS:
            case KW_PROCEDURE:
            case KW_PROTECTION:
            case KW_PURGE:
            case KW_RANGE:
            case KW_READ:
            case KW_READONLY:
            case KW_READS:
            case KW_REBUILD:
            case KW_RECORDREADER:
            case KW_RECORDWRITER:
            case KW_REGEXP:
            case KW_RELOAD:
            case KW_RENAME:
            case KW_REPAIR:
            case KW_REPLACE:
            case KW_REPLICATION:
            case KW_RESTRICT:
            case KW_REVOKE:
            case KW_REWRITE:
            case KW_RIGHT:
            case KW_RLIKE:
            case KW_ROLE:
            case KW_ROLES:
            case KW_ROLLUP:
            case KW_ROW:
            case KW_ROWS:
            case KW_SCHEMAS:
            case KW_SECOND:
            case KW_SEMI:
            case KW_SERDE:
            case KW_SERDEPROPERTIES:
            case KW_SET:
            case KW_SETS:
            case KW_SHARED:
            case KW_SHOW:
            case KW_SHOW_DATABASE:
            case KW_SKEWED:
            case KW_SMALLINT:
            case KW_SORT:
            case KW_SORTED:
            case KW_SSL:
            case KW_STATISTICS:
            case KW_STORED:
            case KW_STREAMTABLE:
            case KW_STRING:
            case KW_STRUCT:
            case KW_TABLE:
            case KW_TABLES:
            case KW_TBLPROPERTIES:
            case KW_TEMPORARY:
            case KW_TERMINATED:
            case KW_TIMESTAMP:
            case KW_TINYINT:
            case KW_TO:
            case KW_TOUCH:
            case KW_TRANSACTIONS:
            case KW_TRIGGER:
            case KW_TRUE:
            case KW_TRUNCATE:
            case KW_UNARCHIVE:
            case KW_UNDO:
            case KW_UNION:
            case KW_UNIONTYPE:
            case KW_UNLOCK:
            case KW_UNSET:
            case KW_UNSIGNED:
            case KW_UPDATE:
            case KW_USE:
            case KW_USER:
            case KW_USING:
            case KW_UTC:
            case KW_UTCTIMESTAMP:
            case KW_VALUES:
            case KW_VALUE_TYPE:
            case KW_VIEW:
            case KW_WHILE:
            case KW_WITH:
            case KW_YEAR:
                {
                alt164=2;
                }
                break;
            case KW_URI:
                {
                int LA164_5 = input.LA(2);

                if ( (LA164_5==EOF||LA164_5==DOT||LA164_5==KW_PARTITION||LA164_5==LPAREN) ) {
                    alt164=2;
                }
                else if ( (LA164_5==StringLiteral) ) {
                    alt164=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 164, 5, input);

                    throw nvae;

                }
                }
                break;
            case KW_SERVER:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case DOT:
                case LPAREN:
                    {
                    alt164=2;
                    }
                    break;
                case KW_PARTITION:
                    {
                    int LA164_23 = input.LA(3);

                    if ( (LA164_23==LPAREN) ) {
                        alt164=2;
                    }
                    else if ( (LA164_23==EOF) ) {
                        alt164=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 164, 23, input);

                        throw nvae;

                    }
                    }
                    break;
                case Identifier:
                case KW_ADD:
                case KW_ADMIN:
                case KW_AFTER:
                case KW_ALL:
                case KW_ALTER:
                case KW_ANALYZE:
                case KW_ARCHIVE:
                case KW_ARRAY:
                case KW_AS:
                case KW_ASC:
                case KW_AUTHORIZATION:
                case KW_BEFORE:
                case KW_BETWEEN:
                case KW_BIGINT:
                case KW_BINARY:
                case KW_BOOLEAN:
                case KW_BOTH:
                case KW_BUCKET:
                case KW_BUCKETS:
                case KW_BY:
                case KW_CASCADE:
                case KW_CHANGE:
                case KW_CLUSTER:
                case KW_CLUSTERED:
                case KW_CLUSTERSTATUS:
                case KW_COLLECTION:
                case KW_COLUMNS:
                case KW_COMMENT:
                case KW_COMPACT:
                case KW_COMPACTIONS:
                case KW_COMPUTE:
                case KW_CONCATENATE:
                case KW_CONTINUE:
                case KW_CREATE:
                case KW_CUBE:
                case KW_CURRENT_DATE:
                case KW_CURRENT_TIMESTAMP:
                case KW_CURSOR:
                case KW_DATA:
                case KW_DATABASES:
                case KW_DATE:
                case KW_DATETIME:
                case KW_DAY:
                case KW_DBPROPERTIES:
                case KW_DECIMAL:
                case KW_DEFERRED:
                case KW_DEFINED:
                case KW_DELETE:
                case KW_DELIMITED:
                case KW_DEPENDENCY:
                case KW_DESC:
                case KW_DESCRIBE:
                case KW_DIRECTORIES:
                case KW_DIRECTORY:
                case KW_DISABLE:
                case KW_DISTRIBUTE:
                case KW_DOUBLE:
                case KW_DROP:
                case KW_ELEM_TYPE:
                case KW_ENABLE:
                case KW_ESCAPED:
                case KW_EXCLUSIVE:
                case KW_EXISTS:
                case KW_EXPLAIN:
                case KW_EXPORT:
                case KW_EXTERNAL:
                case KW_FALSE:
                case KW_FETCH:
                case KW_FIELDS:
                case KW_FILE:
                case KW_FILEFORMAT:
                case KW_FIRST:
                case KW_FLOAT:
                case KW_FOR:
                case KW_FORMAT:
                case KW_FORMATTED:
                case KW_FULL:
                case KW_FUNCTIONS:
                case KW_GRANT:
                case KW_GROUP:
                case KW_GROUPING:
                case KW_HOLD_DDLTIME:
                case KW_HOUR:
                case KW_IDXPROPERTIES:
                case KW_IGNORE:
                case KW_IMPORT:
                case KW_IN:
                case KW_INDEX:
                case KW_INDEXES:
                case KW_INNER:
                case KW_INPATH:
                case KW_INPUTDRIVER:
                case KW_INPUTFORMAT:
                case KW_INSERT:
                case KW_INT:
                case KW_INTERSECT:
                case KW_INTO:
                case KW_IS:
                case KW_ITEMS:
                case KW_JAR:
                case KW_KEYS:
                case KW_KEY_TYPE:
                case KW_LATERAL:
                case KW_LEFT:
                case KW_LIKE:
                case KW_LIMIT:
                case KW_LINES:
                case KW_LOAD:
                case KW_LOCAL:
                case KW_LOCATION:
                case KW_LOCK:
                case KW_LOCKS:
                case KW_LOGICAL:
                case KW_LONG:
                case KW_MAPJOIN:
                case KW_MATERIALIZED:
                case KW_METADATA:
                case KW_MINUS:
                case KW_MINUTE:
                case KW_MONTH:
                case KW_MSCK:
                case KW_NONE:
                case KW_NOSCAN:
                case KW_NO_DROP:
                case KW_NULL:
                case KW_OF:
                case KW_OFFLINE:
                case KW_OPTION:
                case KW_ORDER:
                case KW_OUT:
                case KW_OUTER:
                case KW_OUTPUTDRIVER:
                case KW_OUTPUTFORMAT:
                case KW_OVERWRITE:
                case KW_OWNER:
                case KW_PARTITIONED:
                case KW_PARTITIONS:
                case KW_PERCENT:
                case KW_PLUS:
                case KW_PRETTY:
                case KW_PRINCIPALS:
                case KW_PROCEDURE:
                case KW_PROTECTION:
                case KW_PURGE:
                case KW_RANGE:
                case KW_READ:
                case KW_READONLY:
                case KW_READS:
                case KW_REBUILD:
                case KW_RECORDREADER:
                case KW_RECORDWRITER:
                case KW_REGEXP:
                case KW_RELOAD:
                case KW_RENAME:
                case KW_REPAIR:
                case KW_REPLACE:
                case KW_REPLICATION:
                case KW_RESTRICT:
                case KW_REVOKE:
                case KW_REWRITE:
                case KW_RIGHT:
                case KW_RLIKE:
                case KW_ROLE:
                case KW_ROLES:
                case KW_ROLLUP:
                case KW_ROW:
                case KW_ROWS:
                case KW_SCHEMA:
                case KW_SCHEMAS:
                case KW_SECOND:
                case KW_SEMI:
                case KW_SERDE:
                case KW_SERDEPROPERTIES:
                case KW_SERVER:
                case KW_SET:
                case KW_SETS:
                case KW_SHARED:
                case KW_SHOW:
                case KW_SHOW_DATABASE:
                case KW_SKEWED:
                case KW_SMALLINT:
                case KW_SORT:
                case KW_SORTED:
                case KW_SSL:
                case KW_STATISTICS:
                case KW_STORED:
                case KW_STREAMTABLE:
                case KW_STRING:
                case KW_STRUCT:
                case KW_TABLE:
                case KW_TABLES:
                case KW_TBLPROPERTIES:
                case KW_TEMPORARY:
                case KW_TERMINATED:
                case KW_TIMESTAMP:
                case KW_TINYINT:
                case KW_TO:
                case KW_TOUCH:
                case KW_TRANSACTIONS:
                case KW_TRIGGER:
                case KW_TRUE:
                case KW_TRUNCATE:
                case KW_UNARCHIVE:
                case KW_UNDO:
                case KW_UNION:
                case KW_UNIONTYPE:
                case KW_UNLOCK:
                case KW_UNSET:
                case KW_UNSIGNED:
                case KW_UPDATE:
                case KW_URI:
                case KW_USE:
                case KW_USER:
                case KW_USING:
                case KW_UTC:
                case KW_UTCTIMESTAMP:
                case KW_VALUES:
                case KW_VALUE_TYPE:
                case KW_VIEW:
                case KW_WHILE:
                case KW_WITH:
                case KW_YEAR:
                    {
                    alt164=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 164, 7, input);

                    throw nvae;

                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 164, 0, input);

                throw nvae;

            }

            switch (alt164) {
                case 1 :
                    // HiveParser.g:1557:7: ( KW_DATABASE | KW_SCHEMA ) identifier
                    {
                    // HiveParser.g:1557:7: ( KW_DATABASE | KW_SCHEMA )
                    int alt160=2;
                    int LA160_0 = input.LA(1);

                    if ( (LA160_0==KW_DATABASE) ) {
                        alt160=1;
                    }
                    else if ( (LA160_0==KW_SCHEMA) ) {
                        alt160=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 160, 0, input);

                        throw nvae;

                    }
                    switch (alt160) {
                        case 1 :
                            // HiveParser.g:1557:8: KW_DATABASE
                            {
                            KW_DATABASE528=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_privObjectCols8512); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE528);


                            }
                            break;
                        case 2 :
                            // HiveParser.g:1557:20: KW_SCHEMA
                            {
                            KW_SCHEMA529=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_privObjectCols8514); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA529);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_identifier_in_privObjectCols8517);
                    identifier530=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier530.getTree());

                    // AST REWRITE
                    // elements: identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1557:42: -> ^( TOK_DB_TYPE identifier )
                    {
                        // HiveParser.g:1557:45: ^( TOK_DB_TYPE identifier )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_DB_TYPE, "TOK_DB_TYPE")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1558:7: ( KW_TABLE )? tableName ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )?
                    {
                    // HiveParser.g:1558:7: ( KW_TABLE )?
                    int alt161=2;
                    int LA161_0 = input.LA(1);

                    if ( (LA161_0==KW_TABLE) ) {
                        int LA161_1 = input.LA(2);

                        if ( ((LA161_1 >= Identifier && LA161_1 <= KW_ANALYZE)||(LA161_1 >= KW_ARCHIVE && LA161_1 <= KW_CASCADE)||LA161_1==KW_CHANGE||(LA161_1 >= KW_CLUSTER && LA161_1 <= KW_COLLECTION)||(LA161_1 >= KW_COLUMNS && LA161_1 <= KW_CONCATENATE)||(LA161_1 >= KW_CONTINUE && LA161_1 <= KW_CREATE)||LA161_1==KW_CUBE||(LA161_1 >= KW_CURRENT_DATE && LA161_1 <= KW_DATA)||(LA161_1 >= KW_DATABASES && LA161_1 <= KW_DISABLE)||(LA161_1 >= KW_DISTRIBUTE && LA161_1 <= KW_ELEM_TYPE)||LA161_1==KW_ENABLE||LA161_1==KW_ESCAPED||(LA161_1 >= KW_EXCLUSIVE && LA161_1 <= KW_EXPORT)||(LA161_1 >= KW_EXTERNAL && LA161_1 <= KW_FLOAT)||(LA161_1 >= KW_FOR && LA161_1 <= KW_FORMATTED)||LA161_1==KW_FULL||(LA161_1 >= KW_FUNCTIONS && LA161_1 <= KW_GROUPING)||(LA161_1 >= KW_HOLD_DDLTIME && LA161_1 <= KW_IDXPROPERTIES)||(LA161_1 >= KW_IGNORE && LA161_1 <= KW_INTERSECT)||(LA161_1 >= KW_INTO && LA161_1 <= KW_JAR)||(LA161_1 >= KW_KEYS && LA161_1 <= KW_LEFT)||(LA161_1 >= KW_LIKE && LA161_1 <= KW_LONG)||(LA161_1 >= KW_MAPJOIN && LA161_1 <= KW_MONTH)||(LA161_1 >= KW_MSCK && LA161_1 <= KW_NOSCAN)||(LA161_1 >= KW_NO_DROP && LA161_1 <= KW_OFFLINE)||LA161_1==KW_OPTION||(LA161_1 >= KW_ORDER && LA161_1 <= KW_OUTPUTFORMAT)||(LA161_1 >= KW_OVERWRITE && LA161_1 <= KW_OWNER)||(LA161_1 >= KW_PARTITIONED && LA161_1 <= KW_PLUS)||(LA161_1 >= KW_PRETTY && LA161_1 <= KW_RECORDWRITER)||(LA161_1 >= KW_REGEXP && LA161_1 <= KW_SECOND)||(LA161_1 >= KW_SEMI && LA161_1 <= KW_TABLES)||(LA161_1 >= KW_TBLPROPERTIES && LA161_1 <= KW_TERMINATED)||(LA161_1 >= KW_TIMESTAMP && LA161_1 <= KW_TRANSACTIONS)||(LA161_1 >= KW_TRIGGER && LA161_1 <= KW_UNARCHIVE)||(LA161_1 >= KW_UNDO && LA161_1 <= KW_UNIONTYPE)||(LA161_1 >= KW_UNLOCK && LA161_1 <= KW_VALUE_TYPE)||LA161_1==KW_VIEW||LA161_1==KW_WHILE||(LA161_1 >= KW_WITH && LA161_1 <= KW_YEAR)) ) {
                            alt161=1;
                        }
                        else if ( (LA161_1==KW_PARTITION) ) {
                            int LA161_7 = input.LA(3);

                            if ( (LA161_7==LPAREN) ) {
                                int LA161_12 = input.LA(4);

                                if ( (!(((useSQL11ReservedKeywordsForIdentifier())))) ) {
                                    alt161=1;
                                }
                            }
                            else if ( (LA161_7==EOF||LA161_7==DOT||LA161_7==KW_PARTITION) ) {
                                alt161=1;
                            }
                        }
                    }
                    switch (alt161) {
                        case 1 :
                            // HiveParser.g:1558:7: KW_TABLE
                            {
                            KW_TABLE531=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_privObjectCols8533); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE531);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_tableName_in_privObjectCols8536);
                    tableName532=tableName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableName.add(tableName532.getTree());

                    // HiveParser.g:1558:27: ( LPAREN cols= columnNameList RPAREN )?
                    int alt162=2;
                    int LA162_0 = input.LA(1);

                    if ( (LA162_0==LPAREN) ) {
                        alt162=1;
                    }
                    switch (alt162) {
                        case 1 :
                            // HiveParser.g:1558:28: LPAREN cols= columnNameList RPAREN
                            {
                            LPAREN533=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_privObjectCols8539); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN533);


                            pushFollow(FOLLOW_columnNameList_in_privObjectCols8543);
                            cols=columnNameList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_columnNameList.add(cols.getTree());

                            RPAREN534=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_privObjectCols8545); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN534);


                            }
                            break;

                    }


                    // HiveParser.g:1558:64: ( partitionSpec )?
                    int alt163=2;
                    int LA163_0 = input.LA(1);

                    if ( (LA163_0==KW_PARTITION) ) {
                        alt163=1;
                    }
                    switch (alt163) {
                        case 1 :
                            // HiveParser.g:1558:64: partitionSpec
                            {
                            pushFollow(FOLLOW_partitionSpec_in_privObjectCols8549);
                            partitionSpec535=partitionSpec();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec535.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: cols, tableName, partitionSpec
                    // token labels: 
                    // rule labels: cols, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_cols=new RewriteRuleSubtreeStream(adaptor,"rule cols",cols!=null?cols.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1558:79: -> ^( TOK_TABLE_TYPE tableName ( $cols)? ( partitionSpec )? )
                    {
                        // HiveParser.g:1558:82: ^( TOK_TABLE_TYPE tableName ( $cols)? ( partitionSpec )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_TABLE_TYPE, "TOK_TABLE_TYPE")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableName.nextTree());

                        // HiveParser.g:1558:110: ( $cols)?
                        if ( stream_cols.hasNext() ) {
                            adaptor.addChild(root_1, stream_cols.nextTree());

                        }
                        stream_cols.reset();

                        // HiveParser.g:1558:116: ( partitionSpec )?
                        if ( stream_partitionSpec.hasNext() ) {
                            adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                        }
                        stream_partitionSpec.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:1559:7: KW_URI (path= StringLiteral )
                    {
                    KW_URI536=(Token)match(input,KW_URI,FOLLOW_KW_URI_in_privObjectCols8573); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_URI.add(KW_URI536);


                    // HiveParser.g:1559:14: (path= StringLiteral )
                    // HiveParser.g:1559:15: path= StringLiteral
                    {
                    path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_privObjectCols8578); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(path);


                    }


                    // AST REWRITE
                    // elements: path
                    // token labels: path
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1559:35: -> ^( TOK_URI_TYPE $path)
                    {
                        // HiveParser.g:1559:39: ^( TOK_URI_TYPE $path)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_URI_TYPE, "TOK_URI_TYPE")
                        , root_1);

                        adaptor.addChild(root_1, stream_path.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // HiveParser.g:1560:7: KW_SERVER identifier
                    {
                    KW_SERVER537=(Token)match(input,KW_SERVER,FOLLOW_KW_SERVER_in_privObjectCols8597); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SERVER.add(KW_SERVER537);


                    pushFollow(FOLLOW_identifier_in_privObjectCols8599);
                    identifier538=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier538.getTree());

                    // AST REWRITE
                    // elements: identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1560:28: -> ^( TOK_SERVER_TYPE identifier )
                    {
                        // HiveParser.g:1560:31: ^( TOK_SERVER_TYPE identifier )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SERVER_TYPE, "TOK_SERVER_TYPE")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "privObjectCols"


    public static class privilegeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "privilegeList"
    // HiveParser.g:1563:1: privilegeList : privlegeDef ( COMMA privlegeDef )* -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ ) ;
    public final HiveParser.privilegeList_return privilegeList() throws RecognitionException {
        HiveParser.privilegeList_return retval = new HiveParser.privilegeList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA540=null;
        HiveParser.privlegeDef_return privlegeDef539 =null;

        HiveParser.privlegeDef_return privlegeDef541 =null;


        CommonTree COMMA540_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_privlegeDef=new RewriteRuleSubtreeStream(adaptor,"rule privlegeDef");
        pushMsg("grant privilege list", state);
        try {
            // HiveParser.g:1566:5: ( privlegeDef ( COMMA privlegeDef )* -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ ) )
            // HiveParser.g:1566:7: privlegeDef ( COMMA privlegeDef )*
            {
            pushFollow(FOLLOW_privlegeDef_in_privilegeList8634);
            privlegeDef539=privlegeDef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_privlegeDef.add(privlegeDef539.getTree());

            // HiveParser.g:1566:19: ( COMMA privlegeDef )*
            loop165:
            do {
                int alt165=2;
                int LA165_0 = input.LA(1);

                if ( (LA165_0==COMMA) ) {
                    alt165=1;
                }


                switch (alt165) {
            	case 1 :
            	    // HiveParser.g:1566:20: COMMA privlegeDef
            	    {
            	    COMMA540=(Token)match(input,COMMA,FOLLOW_COMMA_in_privilegeList8637); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA540);


            	    pushFollow(FOLLOW_privlegeDef_in_privilegeList8639);
            	    privlegeDef541=privlegeDef();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_privlegeDef.add(privlegeDef541.getTree());

            	    }
            	    break;

            	default :
            	    break loop165;
                }
            } while (true);


            // AST REWRITE
            // elements: privlegeDef
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1567:5: -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ )
            {
                // HiveParser.g:1567:8: ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_PRIVILEGE_LIST, "TOK_PRIVILEGE_LIST")
                , root_1);

                if ( !(stream_privlegeDef.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_privlegeDef.hasNext() ) {
                    adaptor.addChild(root_1, stream_privlegeDef.nextTree());

                }
                stream_privlegeDef.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "privilegeList"


    public static class privlegeDef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "privlegeDef"
    // HiveParser.g:1570:1: privlegeDef : privilegeType ( LPAREN cols= columnNameList RPAREN )? -> ^( TOK_PRIVILEGE privilegeType ( $cols)? ) ;
    public final HiveParser.privlegeDef_return privlegeDef() throws RecognitionException {
        HiveParser.privlegeDef_return retval = new HiveParser.privlegeDef_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token LPAREN543=null;
        Token RPAREN544=null;
        HiveParser.columnNameList_return cols =null;

        HiveParser.privilegeType_return privilegeType542 =null;


        CommonTree LPAREN543_tree=null;
        CommonTree RPAREN544_tree=null;
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
        RewriteRuleSubtreeStream stream_privilegeType=new RewriteRuleSubtreeStream(adaptor,"rule privilegeType");
        pushMsg("grant privilege", state);
        try {
            // HiveParser.g:1573:5: ( privilegeType ( LPAREN cols= columnNameList RPAREN )? -> ^( TOK_PRIVILEGE privilegeType ( $cols)? ) )
            // HiveParser.g:1573:7: privilegeType ( LPAREN cols= columnNameList RPAREN )?
            {
            pushFollow(FOLLOW_privilegeType_in_privlegeDef8681);
            privilegeType542=privilegeType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_privilegeType.add(privilegeType542.getTree());

            // HiveParser.g:1573:21: ( LPAREN cols= columnNameList RPAREN )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==LPAREN) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // HiveParser.g:1573:22: LPAREN cols= columnNameList RPAREN
                    {
                    LPAREN543=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_privlegeDef8684); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN543);


                    pushFollow(FOLLOW_columnNameList_in_privlegeDef8688);
                    cols=columnNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnNameList.add(cols.getTree());

                    RPAREN544=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_privlegeDef8690); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN544);


                    }
                    break;

            }


            // AST REWRITE
            // elements: cols, privilegeType
            // token labels: 
            // rule labels: cols, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_cols=new RewriteRuleSubtreeStream(adaptor,"rule cols",cols!=null?cols.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1574:5: -> ^( TOK_PRIVILEGE privilegeType ( $cols)? )
            {
                // HiveParser.g:1574:8: ^( TOK_PRIVILEGE privilegeType ( $cols)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_PRIVILEGE, "TOK_PRIVILEGE")
                , root_1);

                adaptor.addChild(root_1, stream_privilegeType.nextTree());

                // HiveParser.g:1574:39: ( $cols)?
                if ( stream_cols.hasNext() ) {
                    adaptor.addChild(root_1, stream_cols.nextTree());

                }
                stream_cols.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "privlegeDef"


    public static class privilegeType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "privilegeType"
    // HiveParser.g:1577:1: privilegeType : ( KW_ALL -> ^( TOK_PRIV_ALL ) | KW_ALTER -> ^( TOK_PRIV_ALTER_METADATA ) | KW_UPDATE -> ^( TOK_PRIV_ALTER_DATA ) | KW_CREATE -> ^( TOK_PRIV_CREATE ) | KW_DROP -> ^( TOK_PRIV_DROP ) | KW_INDEX -> ^( TOK_PRIV_INDEX ) | KW_LOCK -> ^( TOK_PRIV_LOCK ) | KW_SELECT -> ^( TOK_PRIV_SELECT ) | KW_SHOW_DATABASE -> ^( TOK_PRIV_SHOW_DATABASE ) | KW_INSERT -> ^( TOK_PRIV_INSERT ) | KW_DELETE -> ^( TOK_PRIV_DELETE ) );
    public final HiveParser.privilegeType_return privilegeType() throws RecognitionException {
        HiveParser.privilegeType_return retval = new HiveParser.privilegeType_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_ALL545=null;
        Token KW_ALTER546=null;
        Token KW_UPDATE547=null;
        Token KW_CREATE548=null;
        Token KW_DROP549=null;
        Token KW_INDEX550=null;
        Token KW_LOCK551=null;
        Token KW_SELECT552=null;
        Token KW_SHOW_DATABASE553=null;
        Token KW_INSERT554=null;
        Token KW_DELETE555=null;

        CommonTree KW_ALL545_tree=null;
        CommonTree KW_ALTER546_tree=null;
        CommonTree KW_UPDATE547_tree=null;
        CommonTree KW_CREATE548_tree=null;
        CommonTree KW_DROP549_tree=null;
        CommonTree KW_INDEX550_tree=null;
        CommonTree KW_LOCK551_tree=null;
        CommonTree KW_SELECT552_tree=null;
        CommonTree KW_SHOW_DATABASE553_tree=null;
        CommonTree KW_INSERT554_tree=null;
        CommonTree KW_DELETE555_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_DELETE=new RewriteRuleTokenStream(adaptor,"token KW_DELETE");
        RewriteRuleTokenStream stream_KW_SHOW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_SHOW_DATABASE");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
        RewriteRuleTokenStream stream_KW_ALTER=new RewriteRuleTokenStream(adaptor,"token KW_ALTER");
        RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
        RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");
        RewriteRuleTokenStream stream_KW_INSERT=new RewriteRuleTokenStream(adaptor,"token KW_INSERT");
        RewriteRuleTokenStream stream_KW_SELECT=new RewriteRuleTokenStream(adaptor,"token KW_SELECT");
        RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");

        pushMsg("privilege type", state);
        try {
            // HiveParser.g:1580:5: ( KW_ALL -> ^( TOK_PRIV_ALL ) | KW_ALTER -> ^( TOK_PRIV_ALTER_METADATA ) | KW_UPDATE -> ^( TOK_PRIV_ALTER_DATA ) | KW_CREATE -> ^( TOK_PRIV_CREATE ) | KW_DROP -> ^( TOK_PRIV_DROP ) | KW_INDEX -> ^( TOK_PRIV_INDEX ) | KW_LOCK -> ^( TOK_PRIV_LOCK ) | KW_SELECT -> ^( TOK_PRIV_SELECT ) | KW_SHOW_DATABASE -> ^( TOK_PRIV_SHOW_DATABASE ) | KW_INSERT -> ^( TOK_PRIV_INSERT ) | KW_DELETE -> ^( TOK_PRIV_DELETE ) )
            int alt167=11;
            switch ( input.LA(1) ) {
            case KW_ALL:
                {
                alt167=1;
                }
                break;
            case KW_ALTER:
                {
                alt167=2;
                }
                break;
            case KW_UPDATE:
                {
                alt167=3;
                }
                break;
            case KW_CREATE:
                {
                alt167=4;
                }
                break;
            case KW_DROP:
                {
                alt167=5;
                }
                break;
            case KW_INDEX:
                {
                alt167=6;
                }
                break;
            case KW_LOCK:
                {
                alt167=7;
                }
                break;
            case KW_SELECT:
                {
                alt167=8;
                }
                break;
            case KW_SHOW_DATABASE:
                {
                alt167=9;
                }
                break;
            case KW_INSERT:
                {
                alt167=10;
                }
                break;
            case KW_DELETE:
                {
                alt167=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;

            }

            switch (alt167) {
                case 1 :
                    // HiveParser.g:1580:7: KW_ALL
                    {
                    KW_ALL545=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_privilegeType8735); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ALL.add(KW_ALL545);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1580:14: -> ^( TOK_PRIV_ALL )
                    {
                        // HiveParser.g:1580:17: ^( TOK_PRIV_ALL )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_PRIV_ALL, "TOK_PRIV_ALL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1581:7: KW_ALTER
                    {
                    KW_ALTER546=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_privilegeType8749); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ALTER.add(KW_ALTER546);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1581:16: -> ^( TOK_PRIV_ALTER_METADATA )
                    {
                        // HiveParser.g:1581:19: ^( TOK_PRIV_ALTER_METADATA )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_PRIV_ALTER_METADATA, "TOK_PRIV_ALTER_METADATA")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:1582:7: KW_UPDATE
                    {
                    KW_UPDATE547=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_privilegeType8763); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_UPDATE.add(KW_UPDATE547);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1582:17: -> ^( TOK_PRIV_ALTER_DATA )
                    {
                        // HiveParser.g:1582:20: ^( TOK_PRIV_ALTER_DATA )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_PRIV_ALTER_DATA, "TOK_PRIV_ALTER_DATA")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // HiveParser.g:1583:7: KW_CREATE
                    {
                    KW_CREATE548=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_privilegeType8777); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE548);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1583:17: -> ^( TOK_PRIV_CREATE )
                    {
                        // HiveParser.g:1583:20: ^( TOK_PRIV_CREATE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_PRIV_CREATE, "TOK_PRIV_CREATE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // HiveParser.g:1584:7: KW_DROP
                    {
                    KW_DROP549=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_privilegeType8791); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP549);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1584:15: -> ^( TOK_PRIV_DROP )
                    {
                        // HiveParser.g:1584:18: ^( TOK_PRIV_DROP )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_PRIV_DROP, "TOK_PRIV_DROP")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // HiveParser.g:1585:7: KW_INDEX
                    {
                    KW_INDEX550=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_privilegeType8805); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_INDEX.add(KW_INDEX550);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1585:16: -> ^( TOK_PRIV_INDEX )
                    {
                        // HiveParser.g:1585:19: ^( TOK_PRIV_INDEX )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_PRIV_INDEX, "TOK_PRIV_INDEX")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // HiveParser.g:1586:7: KW_LOCK
                    {
                    KW_LOCK551=(Token)match(input,KW_LOCK,FOLLOW_KW_LOCK_in_privilegeType8819); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_LOCK.add(KW_LOCK551);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1586:15: -> ^( TOK_PRIV_LOCK )
                    {
                        // HiveParser.g:1586:18: ^( TOK_PRIV_LOCK )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_PRIV_LOCK, "TOK_PRIV_LOCK")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // HiveParser.g:1587:7: KW_SELECT
                    {
                    KW_SELECT552=(Token)match(input,KW_SELECT,FOLLOW_KW_SELECT_in_privilegeType8833); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SELECT.add(KW_SELECT552);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1587:17: -> ^( TOK_PRIV_SELECT )
                    {
                        // HiveParser.g:1587:20: ^( TOK_PRIV_SELECT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_PRIV_SELECT, "TOK_PRIV_SELECT")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 9 :
                    // HiveParser.g:1588:7: KW_SHOW_DATABASE
                    {
                    KW_SHOW_DATABASE553=(Token)match(input,KW_SHOW_DATABASE,FOLLOW_KW_SHOW_DATABASE_in_privilegeType8847); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW_DATABASE.add(KW_SHOW_DATABASE553);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1588:24: -> ^( TOK_PRIV_SHOW_DATABASE )
                    {
                        // HiveParser.g:1588:27: ^( TOK_PRIV_SHOW_DATABASE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_PRIV_SHOW_DATABASE, "TOK_PRIV_SHOW_DATABASE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 10 :
                    // HiveParser.g:1589:7: KW_INSERT
                    {
                    KW_INSERT554=(Token)match(input,KW_INSERT,FOLLOW_KW_INSERT_in_privilegeType8861); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_INSERT.add(KW_INSERT554);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1589:17: -> ^( TOK_PRIV_INSERT )
                    {
                        // HiveParser.g:1589:20: ^( TOK_PRIV_INSERT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_PRIV_INSERT, "TOK_PRIV_INSERT")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 11 :
                    // HiveParser.g:1590:7: KW_DELETE
                    {
                    KW_DELETE555=(Token)match(input,KW_DELETE,FOLLOW_KW_DELETE_in_privilegeType8875); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DELETE.add(KW_DELETE555);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1590:17: -> ^( TOK_PRIV_DELETE )
                    {
                        // HiveParser.g:1590:20: ^( TOK_PRIV_DELETE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_PRIV_DELETE, "TOK_PRIV_DELETE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "privilegeType"


    public static class principalSpecification_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "principalSpecification"
    // HiveParser.g:1593:1: principalSpecification : principalName ( COMMA principalName )* -> ^( TOK_PRINCIPAL_NAME ( principalName )+ ) ;
    public final HiveParser.principalSpecification_return principalSpecification() throws RecognitionException {
        HiveParser.principalSpecification_return retval = new HiveParser.principalSpecification_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA557=null;
        HiveParser.principalName_return principalName556 =null;

        HiveParser.principalName_return principalName558 =null;


        CommonTree COMMA557_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");
         pushMsg("user/group/role name list", state); 
        try {
            // HiveParser.g:1596:5: ( principalName ( COMMA principalName )* -> ^( TOK_PRINCIPAL_NAME ( principalName )+ ) )
            // HiveParser.g:1596:7: principalName ( COMMA principalName )*
            {
            pushFollow(FOLLOW_principalName_in_principalSpecification8908);
            principalName556=principalName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_principalName.add(principalName556.getTree());

            // HiveParser.g:1596:21: ( COMMA principalName )*
            loop168:
            do {
                int alt168=2;
                int LA168_0 = input.LA(1);

                if ( (LA168_0==COMMA) ) {
                    alt168=1;
                }


                switch (alt168) {
            	case 1 :
            	    // HiveParser.g:1596:22: COMMA principalName
            	    {
            	    COMMA557=(Token)match(input,COMMA,FOLLOW_COMMA_in_principalSpecification8911); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA557);


            	    pushFollow(FOLLOW_principalName_in_principalSpecification8913);
            	    principalName558=principalName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_principalName.add(principalName558.getTree());

            	    }
            	    break;

            	default :
            	    break loop168;
                }
            } while (true);


            // AST REWRITE
            // elements: principalName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1596:44: -> ^( TOK_PRINCIPAL_NAME ( principalName )+ )
            {
                // HiveParser.g:1596:47: ^( TOK_PRINCIPAL_NAME ( principalName )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_PRINCIPAL_NAME, "TOK_PRINCIPAL_NAME")
                , root_1);

                if ( !(stream_principalName.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_principalName.hasNext() ) {
                    adaptor.addChild(root_1, stream_principalName.nextTree());

                }
                stream_principalName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "principalSpecification"


    public static class principalName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "principalName"
    // HiveParser.g:1599:1: principalName : ( KW_USER principalIdentifier -> ^( TOK_USER principalIdentifier ) | KW_GROUP principalIdentifier -> ^( TOK_GROUP principalIdentifier ) | KW_ROLE identifier -> ^( TOK_ROLE identifier ) );
    public final HiveParser.principalName_return principalName() throws RecognitionException {
        HiveParser.principalName_return retval = new HiveParser.principalName_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_USER559=null;
        Token KW_GROUP561=null;
        Token KW_ROLE563=null;
        HiveParser_IdentifiersParser.principalIdentifier_return principalIdentifier560 =null;

        HiveParser_IdentifiersParser.principalIdentifier_return principalIdentifier562 =null;

        HiveParser_IdentifiersParser.identifier_return identifier564 =null;


        CommonTree KW_USER559_tree=null;
        CommonTree KW_GROUP561_tree=null;
        CommonTree KW_ROLE563_tree=null;
        RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
        RewriteRuleTokenStream stream_KW_USER=new RewriteRuleTokenStream(adaptor,"token KW_USER");
        RewriteRuleTokenStream stream_KW_GROUP=new RewriteRuleTokenStream(adaptor,"token KW_GROUP");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_principalIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule principalIdentifier");
        pushMsg("user|group|role name", state);
        try {
            // HiveParser.g:1602:5: ( KW_USER principalIdentifier -> ^( TOK_USER principalIdentifier ) | KW_GROUP principalIdentifier -> ^( TOK_GROUP principalIdentifier ) | KW_ROLE identifier -> ^( TOK_ROLE identifier ) )
            int alt169=3;
            switch ( input.LA(1) ) {
            case KW_USER:
                {
                alt169=1;
                }
                break;
            case KW_GROUP:
                {
                alt169=2;
                }
                break;
            case KW_ROLE:
                {
                alt169=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);

                throw nvae;

            }

            switch (alt169) {
                case 1 :
                    // HiveParser.g:1602:7: KW_USER principalIdentifier
                    {
                    KW_USER559=(Token)match(input,KW_USER,FOLLOW_KW_USER_in_principalName8951); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_USER.add(KW_USER559);


                    pushFollow(FOLLOW_principalIdentifier_in_principalName8953);
                    principalIdentifier560=principalIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_principalIdentifier.add(principalIdentifier560.getTree());

                    // AST REWRITE
                    // elements: principalIdentifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1602:35: -> ^( TOK_USER principalIdentifier )
                    {
                        // HiveParser.g:1602:38: ^( TOK_USER principalIdentifier )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_USER, "TOK_USER")
                        , root_1);

                        adaptor.addChild(root_1, stream_principalIdentifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1603:7: KW_GROUP principalIdentifier
                    {
                    KW_GROUP561=(Token)match(input,KW_GROUP,FOLLOW_KW_GROUP_in_principalName8969); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_GROUP.add(KW_GROUP561);


                    pushFollow(FOLLOW_principalIdentifier_in_principalName8971);
                    principalIdentifier562=principalIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_principalIdentifier.add(principalIdentifier562.getTree());

                    // AST REWRITE
                    // elements: principalIdentifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1603:36: -> ^( TOK_GROUP principalIdentifier )
                    {
                        // HiveParser.g:1603:39: ^( TOK_GROUP principalIdentifier )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_GROUP, "TOK_GROUP")
                        , root_1);

                        adaptor.addChild(root_1, stream_principalIdentifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:1604:7: KW_ROLE identifier
                    {
                    KW_ROLE563=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_principalName8987); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE563);


                    pushFollow(FOLLOW_identifier_in_principalName8989);
                    identifier564=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier564.getTree());

                    // AST REWRITE
                    // elements: identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1604:26: -> ^( TOK_ROLE identifier )
                    {
                        // HiveParser.g:1604:29: ^( TOK_ROLE identifier )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ROLE, "TOK_ROLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "principalName"


    public static class withGrantOption_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "withGrantOption"
    // HiveParser.g:1607:1: withGrantOption : KW_WITH KW_GRANT KW_OPTION -> ^( TOK_GRANT_WITH_OPTION ) ;
    public final HiveParser.withGrantOption_return withGrantOption() throws RecognitionException {
        HiveParser.withGrantOption_return retval = new HiveParser.withGrantOption_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_WITH565=null;
        Token KW_GRANT566=null;
        Token KW_OPTION567=null;

        CommonTree KW_WITH565_tree=null;
        CommonTree KW_GRANT566_tree=null;
        CommonTree KW_OPTION567_tree=null;
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");

        pushMsg("with grant option", state);
        try {
            // HiveParser.g:1610:5: ( KW_WITH KW_GRANT KW_OPTION -> ^( TOK_GRANT_WITH_OPTION ) )
            // HiveParser.g:1610:7: KW_WITH KW_GRANT KW_OPTION
            {
            KW_WITH565=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_withGrantOption9024); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH565);


            KW_GRANT566=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_withGrantOption9026); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT566);


            KW_OPTION567=(Token)match(input,KW_OPTION,FOLLOW_KW_OPTION_in_withGrantOption9028); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_OPTION.add(KW_OPTION567);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1611:5: -> ^( TOK_GRANT_WITH_OPTION )
            {
                // HiveParser.g:1611:8: ^( TOK_GRANT_WITH_OPTION )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_GRANT_WITH_OPTION, "TOK_GRANT_WITH_OPTION")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "withGrantOption"


    public static class grantOptionFor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "grantOptionFor"
    // HiveParser.g:1614:1: grantOptionFor : KW_GRANT KW_OPTION KW_FOR -> ^( TOK_GRANT_OPTION_FOR ) ;
    public final HiveParser.grantOptionFor_return grantOptionFor() throws RecognitionException {
        HiveParser.grantOptionFor_return retval = new HiveParser.grantOptionFor_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_GRANT568=null;
        Token KW_OPTION569=null;
        Token KW_FOR570=null;

        CommonTree KW_GRANT568_tree=null;
        CommonTree KW_OPTION569_tree=null;
        CommonTree KW_FOR570_tree=null;
        RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");

        pushMsg("grant option for", state);
        try {
            // HiveParser.g:1617:5: ( KW_GRANT KW_OPTION KW_FOR -> ^( TOK_GRANT_OPTION_FOR ) )
            // HiveParser.g:1617:7: KW_GRANT KW_OPTION KW_FOR
            {
            KW_GRANT568=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantOptionFor9065); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT568);


            KW_OPTION569=(Token)match(input,KW_OPTION,FOLLOW_KW_OPTION_in_grantOptionFor9067); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_OPTION.add(KW_OPTION569);


            KW_FOR570=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_grantOptionFor9069); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR570);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1618:5: -> ^( TOK_GRANT_OPTION_FOR )
            {
                // HiveParser.g:1618:8: ^( TOK_GRANT_OPTION_FOR )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_GRANT_OPTION_FOR, "TOK_GRANT_OPTION_FOR")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "grantOptionFor"


    public static class adminOptionFor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "adminOptionFor"
    // HiveParser.g:1621:1: adminOptionFor : KW_ADMIN KW_OPTION KW_FOR -> ^( TOK_ADMIN_OPTION_FOR ) ;
    public final HiveParser.adminOptionFor_return adminOptionFor() throws RecognitionException {
        HiveParser.adminOptionFor_return retval = new HiveParser.adminOptionFor_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_ADMIN571=null;
        Token KW_OPTION572=null;
        Token KW_FOR573=null;

        CommonTree KW_ADMIN571_tree=null;
        CommonTree KW_OPTION572_tree=null;
        CommonTree KW_FOR573_tree=null;
        RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
        RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");
        RewriteRuleTokenStream stream_KW_ADMIN=new RewriteRuleTokenStream(adaptor,"token KW_ADMIN");

        pushMsg("admin option for", state);
        try {
            // HiveParser.g:1624:5: ( KW_ADMIN KW_OPTION KW_FOR -> ^( TOK_ADMIN_OPTION_FOR ) )
            // HiveParser.g:1624:7: KW_ADMIN KW_OPTION KW_FOR
            {
            KW_ADMIN571=(Token)match(input,KW_ADMIN,FOLLOW_KW_ADMIN_in_adminOptionFor9102); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ADMIN.add(KW_ADMIN571);


            KW_OPTION572=(Token)match(input,KW_OPTION,FOLLOW_KW_OPTION_in_adminOptionFor9104); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_OPTION.add(KW_OPTION572);


            KW_FOR573=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_adminOptionFor9106); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR573);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1625:5: -> ^( TOK_ADMIN_OPTION_FOR )
            {
                // HiveParser.g:1625:8: ^( TOK_ADMIN_OPTION_FOR )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ADMIN_OPTION_FOR, "TOK_ADMIN_OPTION_FOR")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "adminOptionFor"


    public static class withAdminOption_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "withAdminOption"
    // HiveParser.g:1628:1: withAdminOption : KW_WITH KW_ADMIN KW_OPTION -> ^( TOK_GRANT_WITH_ADMIN_OPTION ) ;
    public final HiveParser.withAdminOption_return withAdminOption() throws RecognitionException {
        HiveParser.withAdminOption_return retval = new HiveParser.withAdminOption_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_WITH574=null;
        Token KW_ADMIN575=null;
        Token KW_OPTION576=null;

        CommonTree KW_WITH574_tree=null;
        CommonTree KW_ADMIN575_tree=null;
        CommonTree KW_OPTION576_tree=null;
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");
        RewriteRuleTokenStream stream_KW_ADMIN=new RewriteRuleTokenStream(adaptor,"token KW_ADMIN");

        pushMsg("with admin option", state);
        try {
            // HiveParser.g:1631:5: ( KW_WITH KW_ADMIN KW_OPTION -> ^( TOK_GRANT_WITH_ADMIN_OPTION ) )
            // HiveParser.g:1631:7: KW_WITH KW_ADMIN KW_OPTION
            {
            KW_WITH574=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_withAdminOption9139); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH574);


            KW_ADMIN575=(Token)match(input,KW_ADMIN,FOLLOW_KW_ADMIN_in_withAdminOption9141); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ADMIN.add(KW_ADMIN575);


            KW_OPTION576=(Token)match(input,KW_OPTION,FOLLOW_KW_OPTION_in_withAdminOption9143); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_OPTION.add(KW_OPTION576);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1632:5: -> ^( TOK_GRANT_WITH_ADMIN_OPTION )
            {
                // HiveParser.g:1632:8: ^( TOK_GRANT_WITH_ADMIN_OPTION )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_GRANT_WITH_ADMIN_OPTION, "TOK_GRANT_WITH_ADMIN_OPTION")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "withAdminOption"


    public static class metastoreCheck_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metastoreCheck"
    // HiveParser.g:1635:1: metastoreCheck : KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE tableName ( partitionSpec )? ( COMMA partitionSpec )* )? -> ^( TOK_MSCK ( $repair)? ( tableName ( partitionSpec )* )? ) ;
    public final HiveParser.metastoreCheck_return metastoreCheck() throws RecognitionException {
        HiveParser.metastoreCheck_return retval = new HiveParser.metastoreCheck_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token repair=null;
        Token KW_MSCK577=null;
        Token KW_TABLE578=null;
        Token COMMA581=null;
        HiveParser_FromClauseParser.tableName_return tableName579 =null;

        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec580 =null;

        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec582 =null;


        CommonTree repair_tree=null;
        CommonTree KW_MSCK577_tree=null;
        CommonTree KW_TABLE578_tree=null;
        CommonTree COMMA581_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_REPAIR=new RewriteRuleTokenStream(adaptor,"token KW_REPAIR");
        RewriteRuleTokenStream stream_KW_MSCK=new RewriteRuleTokenStream(adaptor,"token KW_MSCK");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         pushMsg("metastore check statement", state); 
        try {
            // HiveParser.g:1638:5: ( KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE tableName ( partitionSpec )? ( COMMA partitionSpec )* )? -> ^( TOK_MSCK ( $repair)? ( tableName ( partitionSpec )* )? ) )
            // HiveParser.g:1638:7: KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE tableName ( partitionSpec )? ( COMMA partitionSpec )* )?
            {
            KW_MSCK577=(Token)match(input,KW_MSCK,FOLLOW_KW_MSCK_in_metastoreCheck9180); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_MSCK.add(KW_MSCK577);


            // HiveParser.g:1638:15: (repair= KW_REPAIR )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==KW_REPAIR) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // HiveParser.g:1638:16: repair= KW_REPAIR
                    {
                    repair=(Token)match(input,KW_REPAIR,FOLLOW_KW_REPAIR_in_metastoreCheck9185); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_REPAIR.add(repair);


                    }
                    break;

            }


            // HiveParser.g:1638:35: ( KW_TABLE tableName ( partitionSpec )? ( COMMA partitionSpec )* )?
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==KW_TABLE) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    // HiveParser.g:1638:36: KW_TABLE tableName ( partitionSpec )? ( COMMA partitionSpec )*
                    {
                    KW_TABLE578=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_metastoreCheck9190); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE578);


                    pushFollow(FOLLOW_tableName_in_metastoreCheck9192);
                    tableName579=tableName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableName.add(tableName579.getTree());

                    // HiveParser.g:1638:55: ( partitionSpec )?
                    int alt171=2;
                    int LA171_0 = input.LA(1);

                    if ( (LA171_0==KW_PARTITION) ) {
                        alt171=1;
                    }
                    switch (alt171) {
                        case 1 :
                            // HiveParser.g:1638:55: partitionSpec
                            {
                            pushFollow(FOLLOW_partitionSpec_in_metastoreCheck9194);
                            partitionSpec580=partitionSpec();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec580.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:1638:70: ( COMMA partitionSpec )*
                    loop172:
                    do {
                        int alt172=2;
                        int LA172_0 = input.LA(1);

                        if ( (LA172_0==COMMA) ) {
                            alt172=1;
                        }


                        switch (alt172) {
                    	case 1 :
                    	    // HiveParser.g:1638:71: COMMA partitionSpec
                    	    {
                    	    COMMA581=(Token)match(input,COMMA,FOLLOW_COMMA_in_metastoreCheck9198); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA581);


                    	    pushFollow(FOLLOW_partitionSpec_in_metastoreCheck9200);
                    	    partitionSpec582=partitionSpec();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec582.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop172;
                        }
                    } while (true);


                    }
                    break;

            }


            // AST REWRITE
            // elements: partitionSpec, repair, tableName
            // token labels: repair
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_repair=new RewriteRuleTokenStream(adaptor,"token repair",repair);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1639:5: -> ^( TOK_MSCK ( $repair)? ( tableName ( partitionSpec )* )? )
            {
                // HiveParser.g:1639:8: ^( TOK_MSCK ( $repair)? ( tableName ( partitionSpec )* )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_MSCK, "TOK_MSCK")
                , root_1);

                // HiveParser.g:1639:20: ( $repair)?
                if ( stream_repair.hasNext() ) {
                    adaptor.addChild(root_1, stream_repair.nextNode());

                }
                stream_repair.reset();

                // HiveParser.g:1639:28: ( tableName ( partitionSpec )* )?
                if ( stream_partitionSpec.hasNext()||stream_tableName.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableName.nextTree());

                    // HiveParser.g:1639:39: ( partitionSpec )*
                    while ( stream_partitionSpec.hasNext() ) {
                        adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                    }
                    stream_partitionSpec.reset();

                }
                stream_partitionSpec.reset();
                stream_tableName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "metastoreCheck"


    public static class resourceList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "resourceList"
    // HiveParser.g:1642:1: resourceList : resource ( COMMA resource )* -> ^( TOK_RESOURCE_LIST ( resource )+ ) ;
    public final HiveParser.resourceList_return resourceList() throws RecognitionException {
        HiveParser.resourceList_return retval = new HiveParser.resourceList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA584=null;
        HiveParser.resource_return resource583 =null;

        HiveParser.resource_return resource585 =null;


        CommonTree COMMA584_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_resource=new RewriteRuleSubtreeStream(adaptor,"rule resource");
         pushMsg("resource list", state); 
        try {
            // HiveParser.g:1645:3: ( resource ( COMMA resource )* -> ^( TOK_RESOURCE_LIST ( resource )+ ) )
            // HiveParser.g:1646:3: resource ( COMMA resource )*
            {
            pushFollow(FOLLOW_resource_in_resourceList9253);
            resource583=resource();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_resource.add(resource583.getTree());

            // HiveParser.g:1646:12: ( COMMA resource )*
            loop174:
            do {
                int alt174=2;
                int LA174_0 = input.LA(1);

                if ( (LA174_0==COMMA) ) {
                    alt174=1;
                }


                switch (alt174) {
            	case 1 :
            	    // HiveParser.g:1646:13: COMMA resource
            	    {
            	    COMMA584=(Token)match(input,COMMA,FOLLOW_COMMA_in_resourceList9256); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA584);


            	    pushFollow(FOLLOW_resource_in_resourceList9258);
            	    resource585=resource();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_resource.add(resource585.getTree());

            	    }
            	    break;

            	default :
            	    break loop174;
                }
            } while (true);


            // AST REWRITE
            // elements: resource
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1646:30: -> ^( TOK_RESOURCE_LIST ( resource )+ )
            {
                // HiveParser.g:1646:33: ^( TOK_RESOURCE_LIST ( resource )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_RESOURCE_LIST, "TOK_RESOURCE_LIST")
                , root_1);

                if ( !(stream_resource.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_resource.hasNext() ) {
                    adaptor.addChild(root_1, stream_resource.nextTree());

                }
                stream_resource.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "resourceList"


    public static class resource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "resource"
    // HiveParser.g:1649:1: resource : resType= resourceType resPath= StringLiteral -> ^( TOK_RESOURCE_URI $resType $resPath) ;
    public final HiveParser.resource_return resource() throws RecognitionException {
        HiveParser.resource_return retval = new HiveParser.resource_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token resPath=null;
        HiveParser.resourceType_return resType =null;


        CommonTree resPath_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleSubtreeStream stream_resourceType=new RewriteRuleSubtreeStream(adaptor,"rule resourceType");
         pushMsg("resource", state); 
        try {
            // HiveParser.g:1652:3: (resType= resourceType resPath= StringLiteral -> ^( TOK_RESOURCE_URI $resType $resPath) )
            // HiveParser.g:1653:3: resType= resourceType resPath= StringLiteral
            {
            pushFollow(FOLLOW_resourceType_in_resource9296);
            resType=resourceType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_resourceType.add(resType.getTree());

            resPath=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_resource9300); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(resPath);


            // AST REWRITE
            // elements: resType, resPath
            // token labels: resPath
            // rule labels: resType, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_resPath=new RewriteRuleTokenStream(adaptor,"token resPath",resPath);
            RewriteRuleSubtreeStream stream_resType=new RewriteRuleSubtreeStream(adaptor,"rule resType",resType!=null?resType.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1653:46: -> ^( TOK_RESOURCE_URI $resType $resPath)
            {
                // HiveParser.g:1653:49: ^( TOK_RESOURCE_URI $resType $resPath)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_RESOURCE_URI, "TOK_RESOURCE_URI")
                , root_1);

                adaptor.addChild(root_1, stream_resType.nextTree());

                adaptor.addChild(root_1, stream_resPath.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "resource"


    public static class resourceType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "resourceType"
    // HiveParser.g:1656:1: resourceType : ( KW_JAR -> ^( TOK_JAR ) | KW_FILE -> ^( TOK_FILE ) | KW_ARCHIVE -> ^( TOK_ARCHIVE ) );
    public final HiveParser.resourceType_return resourceType() throws RecognitionException {
        HiveParser.resourceType_return retval = new HiveParser.resourceType_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_JAR586=null;
        Token KW_FILE587=null;
        Token KW_ARCHIVE588=null;

        CommonTree KW_JAR586_tree=null;
        CommonTree KW_FILE587_tree=null;
        CommonTree KW_ARCHIVE588_tree=null;
        RewriteRuleTokenStream stream_KW_ARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_ARCHIVE");
        RewriteRuleTokenStream stream_KW_JAR=new RewriteRuleTokenStream(adaptor,"token KW_JAR");
        RewriteRuleTokenStream stream_KW_FILE=new RewriteRuleTokenStream(adaptor,"token KW_FILE");

         pushMsg("resource type", state); 
        try {
            // HiveParser.g:1659:3: ( KW_JAR -> ^( TOK_JAR ) | KW_FILE -> ^( TOK_FILE ) | KW_ARCHIVE -> ^( TOK_ARCHIVE ) )
            int alt175=3;
            switch ( input.LA(1) ) {
            case KW_JAR:
                {
                alt175=1;
                }
                break;
            case KW_FILE:
                {
                alt175=2;
                }
                break;
            case KW_ARCHIVE:
                {
                alt175=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 175, 0, input);

                throw nvae;

            }

            switch (alt175) {
                case 1 :
                    // HiveParser.g:1660:3: KW_JAR
                    {
                    KW_JAR586=(Token)match(input,KW_JAR,FOLLOW_KW_JAR_in_resourceType9337); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_JAR.add(KW_JAR586);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1660:10: -> ^( TOK_JAR )
                    {
                        // HiveParser.g:1660:13: ^( TOK_JAR )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_JAR, "TOK_JAR")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1662:3: KW_FILE
                    {
                    KW_FILE587=(Token)match(input,KW_FILE,FOLLOW_KW_FILE_in_resourceType9351); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_FILE.add(KW_FILE587);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1662:11: -> ^( TOK_FILE )
                    {
                        // HiveParser.g:1662:14: ^( TOK_FILE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_FILE, "TOK_FILE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:1664:3: KW_ARCHIVE
                    {
                    KW_ARCHIVE588=(Token)match(input,KW_ARCHIVE,FOLLOW_KW_ARCHIVE_in_resourceType9365); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ARCHIVE.add(KW_ARCHIVE588);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1664:14: -> ^( TOK_ARCHIVE )
                    {
                        // HiveParser.g:1664:17: ^( TOK_ARCHIVE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_ARCHIVE, "TOK_ARCHIVE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "resourceType"


    public static class createFunctionStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "createFunctionStatement"
    // HiveParser.g:1667:1: createFunctionStatement : KW_CREATE (temp= KW_TEMPORARY )? KW_FUNCTION functionIdentifier KW_AS StringLiteral ( KW_USING rList= resourceList )? -> {$temp != null}? ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? TOK_TEMPORARY ) -> ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? ) ;
    public final HiveParser.createFunctionStatement_return createFunctionStatement() throws RecognitionException {
        HiveParser.createFunctionStatement_return retval = new HiveParser.createFunctionStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token temp=null;
        Token KW_CREATE589=null;
        Token KW_FUNCTION590=null;
        Token KW_AS592=null;
        Token StringLiteral593=null;
        Token KW_USING594=null;
        HiveParser.resourceList_return rList =null;

        HiveParser_IdentifiersParser.functionIdentifier_return functionIdentifier591 =null;


        CommonTree temp_tree=null;
        CommonTree KW_CREATE589_tree=null;
        CommonTree KW_FUNCTION590_tree=null;
        CommonTree KW_AS592_tree=null;
        CommonTree StringLiteral593_tree=null;
        CommonTree KW_USING594_tree=null;
        RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_USING=new RewriteRuleTokenStream(adaptor,"token KW_USING");
        RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleSubtreeStream stream_functionIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule functionIdentifier");
        RewriteRuleSubtreeStream stream_resourceList=new RewriteRuleSubtreeStream(adaptor,"rule resourceList");
         pushMsg("create function statement", state); 
        try {
            // HiveParser.g:1670:5: ( KW_CREATE (temp= KW_TEMPORARY )? KW_FUNCTION functionIdentifier KW_AS StringLiteral ( KW_USING rList= resourceList )? -> {$temp != null}? ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? TOK_TEMPORARY ) -> ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? ) )
            // HiveParser.g:1670:7: KW_CREATE (temp= KW_TEMPORARY )? KW_FUNCTION functionIdentifier KW_AS StringLiteral ( KW_USING rList= resourceList )?
            {
            KW_CREATE589=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createFunctionStatement9396); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE589);


            // HiveParser.g:1670:17: (temp= KW_TEMPORARY )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==KW_TEMPORARY) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // HiveParser.g:1670:18: temp= KW_TEMPORARY
                    {
                    temp=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_createFunctionStatement9401); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TEMPORARY.add(temp);


                    }
                    break;

            }


            KW_FUNCTION590=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_createFunctionStatement9405); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FUNCTION.add(KW_FUNCTION590);


            pushFollow(FOLLOW_functionIdentifier_in_createFunctionStatement9407);
            functionIdentifier591=functionIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_functionIdentifier.add(functionIdentifier591.getTree());

            KW_AS592=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createFunctionStatement9409); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS592);


            StringLiteral593=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_createFunctionStatement9411); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral593);


            // HiveParser.g:1671:7: ( KW_USING rList= resourceList )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==KW_USING) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // HiveParser.g:1671:8: KW_USING rList= resourceList
                    {
                    KW_USING594=(Token)match(input,KW_USING,FOLLOW_KW_USING_in_createFunctionStatement9420); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_USING.add(KW_USING594);


                    pushFollow(FOLLOW_resourceList_in_createFunctionStatement9424);
                    rList=resourceList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_resourceList.add(rList.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: functionIdentifier, functionIdentifier, StringLiteral, rList, rList, StringLiteral
            // token labels: 
            // rule labels: rList, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_rList=new RewriteRuleSubtreeStream(adaptor,"rule rList",rList!=null?rList.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1672:5: -> {$temp != null}? ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? TOK_TEMPORARY )
            if (temp != null) {
                // HiveParser.g:1672:25: ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? TOK_TEMPORARY )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_CREATEFUNCTION, "TOK_CREATEFUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_functionIdentifier.nextTree());

                adaptor.addChild(root_1, 
                stream_StringLiteral.nextNode()
                );

                // HiveParser.g:1672:80: ( $rList)?
                if ( stream_rList.hasNext() ) {
                    adaptor.addChild(root_1, stream_rList.nextTree());

                }
                stream_rList.reset();

                adaptor.addChild(root_1, 
                (CommonTree)adaptor.create(TOK_TEMPORARY, "TOK_TEMPORARY")
                );

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1673:5: -> ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? )
            {
                // HiveParser.g:1673:25: ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_CREATEFUNCTION, "TOK_CREATEFUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_functionIdentifier.nextTree());

                adaptor.addChild(root_1, 
                stream_StringLiteral.nextNode()
                );

                // HiveParser.g:1673:80: ( $rList)?
                if ( stream_rList.hasNext() ) {
                    adaptor.addChild(root_1, stream_rList.nextTree());

                }
                stream_rList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "createFunctionStatement"


    public static class dropFunctionStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dropFunctionStatement"
    // HiveParser.g:1676:1: dropFunctionStatement : KW_DROP (temp= KW_TEMPORARY )? KW_FUNCTION ( ifExists )? functionIdentifier -> {$temp != null}? ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? TOK_TEMPORARY ) -> ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? ) ;
    public final HiveParser.dropFunctionStatement_return dropFunctionStatement() throws RecognitionException {
        HiveParser.dropFunctionStatement_return retval = new HiveParser.dropFunctionStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token temp=null;
        Token KW_DROP595=null;
        Token KW_FUNCTION596=null;
        HiveParser.ifExists_return ifExists597 =null;

        HiveParser_IdentifiersParser.functionIdentifier_return functionIdentifier598 =null;


        CommonTree temp_tree=null;
        CommonTree KW_DROP595_tree=null;
        CommonTree KW_FUNCTION596_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
        RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
        RewriteRuleSubtreeStream stream_functionIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule functionIdentifier");
         pushMsg("drop function statement", state); 
        try {
            // HiveParser.g:1679:5: ( KW_DROP (temp= KW_TEMPORARY )? KW_FUNCTION ( ifExists )? functionIdentifier -> {$temp != null}? ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? TOK_TEMPORARY ) -> ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? ) )
            // HiveParser.g:1679:7: KW_DROP (temp= KW_TEMPORARY )? KW_FUNCTION ( ifExists )? functionIdentifier
            {
            KW_DROP595=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropFunctionStatement9510); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP595);


            // HiveParser.g:1679:15: (temp= KW_TEMPORARY )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==KW_TEMPORARY) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // HiveParser.g:1679:16: temp= KW_TEMPORARY
                    {
                    temp=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_dropFunctionStatement9515); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TEMPORARY.add(temp);


                    }
                    break;

            }


            KW_FUNCTION596=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_dropFunctionStatement9519); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FUNCTION.add(KW_FUNCTION596);


            // HiveParser.g:1679:48: ( ifExists )?
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==KW_IF) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    // HiveParser.g:1679:48: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropFunctionStatement9521);
                    ifExists597=ifExists();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ifExists.add(ifExists597.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_functionIdentifier_in_dropFunctionStatement9524);
            functionIdentifier598=functionIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_functionIdentifier.add(functionIdentifier598.getTree());

            // AST REWRITE
            // elements: ifExists, functionIdentifier, ifExists, functionIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1680:5: -> {$temp != null}? ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? TOK_TEMPORARY )
            if (temp != null) {
                // HiveParser.g:1680:25: ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? TOK_TEMPORARY )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DROPFUNCTION, "TOK_DROPFUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_functionIdentifier.nextTree());

                // HiveParser.g:1680:63: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.nextTree());

                }
                stream_ifExists.reset();

                adaptor.addChild(root_1, 
                (CommonTree)adaptor.create(TOK_TEMPORARY, "TOK_TEMPORARY")
                );

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1681:5: -> ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? )
            {
                // HiveParser.g:1681:25: ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DROPFUNCTION, "TOK_DROPFUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_functionIdentifier.nextTree());

                // HiveParser.g:1681:63: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.nextTree());

                }
                stream_ifExists.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dropFunctionStatement"


    public static class reloadFunctionStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "reloadFunctionStatement"
    // HiveParser.g:1684:1: reloadFunctionStatement : KW_RELOAD KW_FUNCTION -> ^( TOK_RELOADFUNCTION ) ;
    public final HiveParser.reloadFunctionStatement_return reloadFunctionStatement() throws RecognitionException {
        HiveParser.reloadFunctionStatement_return retval = new HiveParser.reloadFunctionStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_RELOAD599=null;
        Token KW_FUNCTION600=null;

        CommonTree KW_RELOAD599_tree=null;
        CommonTree KW_FUNCTION600_tree=null;
        RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
        RewriteRuleTokenStream stream_KW_RELOAD=new RewriteRuleTokenStream(adaptor,"token KW_RELOAD");

         pushMsg("reload function statement", state); 
        try {
            // HiveParser.g:1687:5: ( KW_RELOAD KW_FUNCTION -> ^( TOK_RELOADFUNCTION ) )
            // HiveParser.g:1687:7: KW_RELOAD KW_FUNCTION
            {
            KW_RELOAD599=(Token)match(input,KW_RELOAD,FOLLOW_KW_RELOAD_in_reloadFunctionStatement9602); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_RELOAD.add(KW_RELOAD599);


            KW_FUNCTION600=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_reloadFunctionStatement9604); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FUNCTION.add(KW_FUNCTION600);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1687:29: -> ^( TOK_RELOADFUNCTION )
            {
                // HiveParser.g:1687:32: ^( TOK_RELOADFUNCTION )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_RELOADFUNCTION, "TOK_RELOADFUNCTION")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "reloadFunctionStatement"


    public static class createMacroStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "createMacroStatement"
    // HiveParser.g:1689:1: createMacroStatement : KW_CREATE KW_TEMPORARY KW_MACRO Identifier LPAREN ( columnNameTypeList )? RPAREN expression -> ^( TOK_CREATEMACRO Identifier ( columnNameTypeList )? expression ) ;
    public final HiveParser.createMacroStatement_return createMacroStatement() throws RecognitionException {
        HiveParser.createMacroStatement_return retval = new HiveParser.createMacroStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_CREATE601=null;
        Token KW_TEMPORARY602=null;
        Token KW_MACRO603=null;
        Token Identifier604=null;
        Token LPAREN605=null;
        Token RPAREN607=null;
        HiveParser.columnNameTypeList_return columnNameTypeList606 =null;

        HiveParser_IdentifiersParser.expression_return expression608 =null;


        CommonTree KW_CREATE601_tree=null;
        CommonTree KW_TEMPORARY602_tree=null;
        CommonTree KW_MACRO603_tree=null;
        CommonTree Identifier604_tree=null;
        CommonTree LPAREN605_tree=null;
        CommonTree RPAREN607_tree=null;
        RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_MACRO=new RewriteRuleTokenStream(adaptor,"token KW_MACRO");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
         pushMsg("create macro statement", state); 
        try {
            // HiveParser.g:1692:5: ( KW_CREATE KW_TEMPORARY KW_MACRO Identifier LPAREN ( columnNameTypeList )? RPAREN expression -> ^( TOK_CREATEMACRO Identifier ( columnNameTypeList )? expression ) )
            // HiveParser.g:1692:7: KW_CREATE KW_TEMPORARY KW_MACRO Identifier LPAREN ( columnNameTypeList )? RPAREN expression
            {
            KW_CREATE601=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createMacroStatement9632); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE601);


            KW_TEMPORARY602=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_createMacroStatement9634); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TEMPORARY.add(KW_TEMPORARY602);


            KW_MACRO603=(Token)match(input,KW_MACRO,FOLLOW_KW_MACRO_in_createMacroStatement9636); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_MACRO.add(KW_MACRO603);


            Identifier604=(Token)match(input,Identifier,FOLLOW_Identifier_in_createMacroStatement9638); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier604);


            LPAREN605=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createMacroStatement9646); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN605);


            // HiveParser.g:1693:14: ( columnNameTypeList )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( ((LA180_0 >= Identifier && LA180_0 <= KW_ANALYZE)||(LA180_0 >= KW_ARCHIVE && LA180_0 <= KW_CASCADE)||LA180_0==KW_CHANGE||(LA180_0 >= KW_CLUSTER && LA180_0 <= KW_COLLECTION)||(LA180_0 >= KW_COLUMNS && LA180_0 <= KW_CONCATENATE)||(LA180_0 >= KW_CONTINUE && LA180_0 <= KW_CREATE)||LA180_0==KW_CUBE||(LA180_0 >= KW_CURRENT_DATE && LA180_0 <= KW_DATA)||(LA180_0 >= KW_DATABASES && LA180_0 <= KW_DISABLE)||(LA180_0 >= KW_DISTRIBUTE && LA180_0 <= KW_ELEM_TYPE)||LA180_0==KW_ENABLE||LA180_0==KW_ESCAPED||(LA180_0 >= KW_EXCLUSIVE && LA180_0 <= KW_EXPORT)||(LA180_0 >= KW_EXTERNAL && LA180_0 <= KW_FLOAT)||(LA180_0 >= KW_FOR && LA180_0 <= KW_FORMATTED)||LA180_0==KW_FULL||(LA180_0 >= KW_FUNCTIONS && LA180_0 <= KW_GROUPING)||(LA180_0 >= KW_HOLD_DDLTIME && LA180_0 <= KW_IDXPROPERTIES)||(LA180_0 >= KW_IGNORE && LA180_0 <= KW_INTERSECT)||(LA180_0 >= KW_INTO && LA180_0 <= KW_JAR)||(LA180_0 >= KW_KEYS && LA180_0 <= KW_LEFT)||(LA180_0 >= KW_LIKE && LA180_0 <= KW_LONG)||(LA180_0 >= KW_MAPJOIN && LA180_0 <= KW_MONTH)||(LA180_0 >= KW_MSCK && LA180_0 <= KW_NOSCAN)||(LA180_0 >= KW_NO_DROP && LA180_0 <= KW_OFFLINE)||LA180_0==KW_OPTION||(LA180_0 >= KW_ORDER && LA180_0 <= KW_OUTPUTFORMAT)||(LA180_0 >= KW_OVERWRITE && LA180_0 <= KW_OWNER)||(LA180_0 >= KW_PARTITION && LA180_0 <= KW_PLUS)||(LA180_0 >= KW_PRETTY && LA180_0 <= KW_RECORDWRITER)||(LA180_0 >= KW_REGEXP && LA180_0 <= KW_SECOND)||(LA180_0 >= KW_SEMI && LA180_0 <= KW_TABLES)||(LA180_0 >= KW_TBLPROPERTIES && LA180_0 <= KW_TERMINATED)||(LA180_0 >= KW_TIMESTAMP && LA180_0 <= KW_TRANSACTIONS)||(LA180_0 >= KW_TRIGGER && LA180_0 <= KW_UNARCHIVE)||(LA180_0 >= KW_UNDO && LA180_0 <= KW_UNIONTYPE)||(LA180_0 >= KW_UNLOCK && LA180_0 <= KW_VALUE_TYPE)||LA180_0==KW_VIEW||LA180_0==KW_WHILE||(LA180_0 >= KW_WITH && LA180_0 <= KW_YEAR)) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    // HiveParser.g:1693:14: columnNameTypeList
                    {
                    pushFollow(FOLLOW_columnNameTypeList_in_createMacroStatement9648);
                    columnNameTypeList606=columnNameTypeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnNameTypeList.add(columnNameTypeList606.getTree());

                    }
                    break;

            }


            RPAREN607=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createMacroStatement9651); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN607);


            pushFollow(FOLLOW_expression_in_createMacroStatement9653);
            expression608=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression608.getTree());

            // AST REWRITE
            // elements: Identifier, expression, columnNameTypeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1694:5: -> ^( TOK_CREATEMACRO Identifier ( columnNameTypeList )? expression )
            {
                // HiveParser.g:1694:8: ^( TOK_CREATEMACRO Identifier ( columnNameTypeList )? expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_CREATEMACRO, "TOK_CREATEMACRO")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                // HiveParser.g:1694:37: ( columnNameTypeList )?
                if ( stream_columnNameTypeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());

                }
                stream_columnNameTypeList.reset();

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "createMacroStatement"


    public static class dropMacroStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dropMacroStatement"
    // HiveParser.g:1697:1: dropMacroStatement : KW_DROP KW_TEMPORARY KW_MACRO ( ifExists )? Identifier -> ^( TOK_DROPMACRO Identifier ( ifExists )? ) ;
    public final HiveParser.dropMacroStatement_return dropMacroStatement() throws RecognitionException {
        HiveParser.dropMacroStatement_return retval = new HiveParser.dropMacroStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_DROP609=null;
        Token KW_TEMPORARY610=null;
        Token KW_MACRO611=null;
        Token Identifier613=null;
        HiveParser.ifExists_return ifExists612 =null;


        CommonTree KW_DROP609_tree=null;
        CommonTree KW_TEMPORARY610_tree=null;
        CommonTree KW_MACRO611_tree=null;
        CommonTree Identifier613_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_MACRO=new RewriteRuleTokenStream(adaptor,"token KW_MACRO");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         pushMsg("drop macro statement", state); 
        try {
            // HiveParser.g:1700:5: ( KW_DROP KW_TEMPORARY KW_MACRO ( ifExists )? Identifier -> ^( TOK_DROPMACRO Identifier ( ifExists )? ) )
            // HiveParser.g:1700:7: KW_DROP KW_TEMPORARY KW_MACRO ( ifExists )? Identifier
            {
            KW_DROP609=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropMacroStatement9697); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP609);


            KW_TEMPORARY610=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_dropMacroStatement9699); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TEMPORARY.add(KW_TEMPORARY610);


            KW_MACRO611=(Token)match(input,KW_MACRO,FOLLOW_KW_MACRO_in_dropMacroStatement9701); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_MACRO.add(KW_MACRO611);


            // HiveParser.g:1700:37: ( ifExists )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==KW_IF) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // HiveParser.g:1700:37: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropMacroStatement9703);
                    ifExists612=ifExists();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ifExists.add(ifExists612.getTree());

                    }
                    break;

            }


            Identifier613=(Token)match(input,Identifier,FOLLOW_Identifier_in_dropMacroStatement9706); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier613);


            // AST REWRITE
            // elements: ifExists, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1701:5: -> ^( TOK_DROPMACRO Identifier ( ifExists )? )
            {
                // HiveParser.g:1701:8: ^( TOK_DROPMACRO Identifier ( ifExists )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DROPMACRO, "TOK_DROPMACRO")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                // HiveParser.g:1701:35: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.nextTree());

                }
                stream_ifExists.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dropMacroStatement"


    public static class createViewStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "createViewStatement"
    // HiveParser.g:1704:1: createViewStatement : KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE ) ;
    public final HiveParser.createViewStatement_return createViewStatement() throws RecognitionException {
        HiveParser.createViewStatement_return retval = new HiveParser.createViewStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_CREATE614=null;
        Token KW_VIEW616=null;
        Token LPAREN618=null;
        Token RPAREN620=null;
        Token KW_AS624=null;
        HiveParser_FromClauseParser.tableName_return name =null;

        HiveParser.orReplace_return orReplace615 =null;

        HiveParser.ifNotExists_return ifNotExists617 =null;

        HiveParser.columnNameCommentList_return columnNameCommentList619 =null;

        HiveParser.tableComment_return tableComment621 =null;

        HiveParser.viewPartition_return viewPartition622 =null;

        HiveParser.tablePropertiesPrefixed_return tablePropertiesPrefixed623 =null;

        HiveParser.selectStatementWithCTE_return selectStatementWithCTE625 =null;


        CommonTree KW_CREATE614_tree=null;
        CommonTree KW_VIEW616_tree=null;
        CommonTree LPAREN618_tree=null;
        CommonTree RPAREN620_tree=null;
        CommonTree KW_AS624_tree=null;
        RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleSubtreeStream stream_columnNameCommentList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameCommentList");
        RewriteRuleSubtreeStream stream_selectStatementWithCTE=new RewriteRuleSubtreeStream(adaptor,"rule selectStatementWithCTE");
        RewriteRuleSubtreeStream stream_orReplace=new RewriteRuleSubtreeStream(adaptor,"rule orReplace");
        RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
        RewriteRuleSubtreeStream stream_tableComment=new RewriteRuleSubtreeStream(adaptor,"rule tableComment");
        RewriteRuleSubtreeStream stream_viewPartition=new RewriteRuleSubtreeStream(adaptor,"rule viewPartition");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

            pushMsg("create view statement", state);

        try {
            // HiveParser.g:1709:5: ( KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE ) )
            // HiveParser.g:1709:7: KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE
            {
            KW_CREATE614=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createViewStatement9748); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE614);


            // HiveParser.g:1709:17: ( orReplace )?
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==KW_OR) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    // HiveParser.g:1709:18: orReplace
                    {
                    pushFollow(FOLLOW_orReplace_in_createViewStatement9751);
                    orReplace615=orReplace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orReplace.add(orReplace615.getTree());

                    }
                    break;

            }


            KW_VIEW616=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_createViewStatement9755); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_VIEW.add(KW_VIEW616);


            // HiveParser.g:1709:38: ( ifNotExists )?
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==KW_IF) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    // HiveParser.g:1709:39: ifNotExists
                    {
                    pushFollow(FOLLOW_ifNotExists_in_createViewStatement9758);
                    ifNotExists617=ifNotExists();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists617.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_tableName_in_createViewStatement9764);
            name=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(name.getTree());

            // HiveParser.g:1710:9: ( LPAREN columnNameCommentList RPAREN )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==LPAREN) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // HiveParser.g:1710:10: LPAREN columnNameCommentList RPAREN
                    {
                    LPAREN618=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createViewStatement9775); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN618);


                    pushFollow(FOLLOW_columnNameCommentList_in_createViewStatement9777);
                    columnNameCommentList619=columnNameCommentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnNameCommentList.add(columnNameCommentList619.getTree());

                    RPAREN620=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createViewStatement9779); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN620);


                    }
                    break;

            }


            // HiveParser.g:1710:48: ( tableComment )?
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==KW_COMMENT) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    // HiveParser.g:1710:48: tableComment
                    {
                    pushFollow(FOLLOW_tableComment_in_createViewStatement9783);
                    tableComment621=tableComment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableComment.add(tableComment621.getTree());

                    }
                    break;

            }


            // HiveParser.g:1710:62: ( viewPartition )?
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==KW_PARTITIONED) ) {
                alt186=1;
            }
            switch (alt186) {
                case 1 :
                    // HiveParser.g:1710:62: viewPartition
                    {
                    pushFollow(FOLLOW_viewPartition_in_createViewStatement9786);
                    viewPartition622=viewPartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewPartition.add(viewPartition622.getTree());

                    }
                    break;

            }


            // HiveParser.g:1711:9: ( tablePropertiesPrefixed )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==KW_TBLPROPERTIES) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    // HiveParser.g:1711:9: tablePropertiesPrefixed
                    {
                    pushFollow(FOLLOW_tablePropertiesPrefixed_in_createViewStatement9797);
                    tablePropertiesPrefixed623=tablePropertiesPrefixed();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed623.getTree());

                    }
                    break;

            }


            KW_AS624=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createViewStatement9808); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS624);


            pushFollow(FOLLOW_selectStatementWithCTE_in_createViewStatement9818);
            selectStatementWithCTE625=selectStatementWithCTE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectStatementWithCTE.add(selectStatementWithCTE625.getTree());

            // AST REWRITE
            // elements: ifNotExists, viewPartition, orReplace, tableComment, name, tablePropertiesPrefixed, columnNameCommentList, selectStatementWithCTE
            // token labels: 
            // rule labels: name, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1714:5: -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE )
            {
                // HiveParser.g:1714:8: ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_CREATEVIEW, "TOK_CREATEVIEW")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                // HiveParser.g:1714:31: ( orReplace )?
                if ( stream_orReplace.hasNext() ) {
                    adaptor.addChild(root_1, stream_orReplace.nextTree());

                }
                stream_orReplace.reset();

                // HiveParser.g:1715:10: ( ifNotExists )?
                if ( stream_ifNotExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifNotExists.nextTree());

                }
                stream_ifNotExists.reset();

                // HiveParser.g:1716:10: ( columnNameCommentList )?
                if ( stream_columnNameCommentList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameCommentList.nextTree());

                }
                stream_columnNameCommentList.reset();

                // HiveParser.g:1717:10: ( tableComment )?
                if ( stream_tableComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableComment.nextTree());

                }
                stream_tableComment.reset();

                // HiveParser.g:1718:10: ( viewPartition )?
                if ( stream_viewPartition.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewPartition.nextTree());

                }
                stream_viewPartition.reset();

                // HiveParser.g:1719:10: ( tablePropertiesPrefixed )?
                if ( stream_tablePropertiesPrefixed.hasNext() ) {
                    adaptor.addChild(root_1, stream_tablePropertiesPrefixed.nextTree());

                }
                stream_tablePropertiesPrefixed.reset();

                adaptor.addChild(root_1, stream_selectStatementWithCTE.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "createViewStatement"


    public static class viewPartition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "viewPartition"
    // HiveParser.g:1724:1: viewPartition : KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN -> ^( TOK_VIEWPARTCOLS columnNameList ) ;
    public final HiveParser.viewPartition_return viewPartition() throws RecognitionException {
        HiveParser.viewPartition_return retval = new HiveParser.viewPartition_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_PARTITIONED626=null;
        Token KW_ON627=null;
        Token LPAREN628=null;
        Token RPAREN630=null;
        HiveParser.columnNameList_return columnNameList629 =null;


        CommonTree KW_PARTITIONED626_tree=null;
        CommonTree KW_ON627_tree=null;
        CommonTree LPAREN628_tree=null;
        CommonTree RPAREN630_tree=null;
        RewriteRuleTokenStream stream_KW_PARTITIONED=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONED");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
         pushMsg("view partition specification", state); 
        try {
            // HiveParser.g:1727:5: ( KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN -> ^( TOK_VIEWPARTCOLS columnNameList ) )
            // HiveParser.g:1727:7: KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN
            {
            KW_PARTITIONED626=(Token)match(input,KW_PARTITIONED,FOLLOW_KW_PARTITIONED_in_viewPartition9941); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_PARTITIONED.add(KW_PARTITIONED626);


            KW_ON627=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_viewPartition9943); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON627);


            LPAREN628=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewPartition9945); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN628);


            pushFollow(FOLLOW_columnNameList_in_viewPartition9947);
            columnNameList629=columnNameList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnNameList.add(columnNameList629.getTree());

            RPAREN630=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewPartition9949); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN630);


            // AST REWRITE
            // elements: columnNameList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1728:5: -> ^( TOK_VIEWPARTCOLS columnNameList )
            {
                // HiveParser.g:1728:8: ^( TOK_VIEWPARTCOLS columnNameList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_VIEWPARTCOLS, "TOK_VIEWPARTCOLS")
                , root_1);

                adaptor.addChild(root_1, stream_columnNameList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "viewPartition"


    public static class dropViewStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dropViewStatement"
    // HiveParser.g:1731:1: dropViewStatement : KW_DROP KW_VIEW ( ifExists )? viewName -> ^( TOK_DROPVIEW viewName ( ifExists )? ) ;
    public final HiveParser.dropViewStatement_return dropViewStatement() throws RecognitionException {
        HiveParser.dropViewStatement_return retval = new HiveParser.dropViewStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_DROP631=null;
        Token KW_VIEW632=null;
        HiveParser.ifExists_return ifExists633 =null;

        HiveParser_FromClauseParser.viewName_return viewName634 =null;


        CommonTree KW_DROP631_tree=null;
        CommonTree KW_VIEW632_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
        RewriteRuleSubtreeStream stream_viewName=new RewriteRuleSubtreeStream(adaptor,"rule viewName");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         pushMsg("drop view statement", state); 
        try {
            // HiveParser.g:1734:5: ( KW_DROP KW_VIEW ( ifExists )? viewName -> ^( TOK_DROPVIEW viewName ( ifExists )? ) )
            // HiveParser.g:1734:7: KW_DROP KW_VIEW ( ifExists )? viewName
            {
            KW_DROP631=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropViewStatement9988); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP631);


            KW_VIEW632=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_dropViewStatement9990); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_VIEW.add(KW_VIEW632);


            // HiveParser.g:1734:23: ( ifExists )?
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==KW_IF) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    // HiveParser.g:1734:23: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropViewStatement9992);
                    ifExists633=ifExists();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ifExists.add(ifExists633.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_viewName_in_dropViewStatement9995);
            viewName634=viewName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_viewName.add(viewName634.getTree());

            // AST REWRITE
            // elements: ifExists, viewName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1734:42: -> ^( TOK_DROPVIEW viewName ( ifExists )? )
            {
                // HiveParser.g:1734:45: ^( TOK_DROPVIEW viewName ( ifExists )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DROPVIEW, "TOK_DROPVIEW")
                , root_1);

                adaptor.addChild(root_1, stream_viewName.nextTree());

                // HiveParser.g:1734:69: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.nextTree());

                }
                stream_ifExists.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dropViewStatement"


    public static class showFunctionIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "showFunctionIdentifier"
    // HiveParser.g:1737:1: showFunctionIdentifier : ( functionIdentifier | StringLiteral );
    public final HiveParser.showFunctionIdentifier_return showFunctionIdentifier() throws RecognitionException {
        HiveParser.showFunctionIdentifier_return retval = new HiveParser.showFunctionIdentifier_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token StringLiteral636=null;
        HiveParser_IdentifiersParser.functionIdentifier_return functionIdentifier635 =null;


        CommonTree StringLiteral636_tree=null;

         pushMsg("identifier for show function statement", state); 
        try {
            // HiveParser.g:1740:5: ( functionIdentifier | StringLiteral )
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( ((LA189_0 >= Identifier && LA189_0 <= KW_ANALYZE)||(LA189_0 >= KW_ARCHIVE && LA189_0 <= KW_CASCADE)||LA189_0==KW_CHANGE||(LA189_0 >= KW_CLUSTER && LA189_0 <= KW_COLLECTION)||(LA189_0 >= KW_COLUMNS && LA189_0 <= KW_CONCATENATE)||(LA189_0 >= KW_CONTINUE && LA189_0 <= KW_CREATE)||LA189_0==KW_CUBE||(LA189_0 >= KW_CURRENT_DATE && LA189_0 <= KW_DATA)||(LA189_0 >= KW_DATABASES && LA189_0 <= KW_DISABLE)||(LA189_0 >= KW_DISTRIBUTE && LA189_0 <= KW_ELEM_TYPE)||LA189_0==KW_ENABLE||LA189_0==KW_ESCAPED||(LA189_0 >= KW_EXCLUSIVE && LA189_0 <= KW_EXPORT)||(LA189_0 >= KW_EXTERNAL && LA189_0 <= KW_FLOAT)||(LA189_0 >= KW_FOR && LA189_0 <= KW_FORMATTED)||LA189_0==KW_FULL||(LA189_0 >= KW_FUNCTIONS && LA189_0 <= KW_GROUPING)||(LA189_0 >= KW_HOLD_DDLTIME && LA189_0 <= KW_IDXPROPERTIES)||(LA189_0 >= KW_IGNORE && LA189_0 <= KW_INTERSECT)||(LA189_0 >= KW_INTO && LA189_0 <= KW_JAR)||(LA189_0 >= KW_KEYS && LA189_0 <= KW_LEFT)||(LA189_0 >= KW_LIKE && LA189_0 <= KW_LONG)||(LA189_0 >= KW_MAPJOIN && LA189_0 <= KW_MONTH)||(LA189_0 >= KW_MSCK && LA189_0 <= KW_NOSCAN)||(LA189_0 >= KW_NO_DROP && LA189_0 <= KW_OFFLINE)||LA189_0==KW_OPTION||(LA189_0 >= KW_ORDER && LA189_0 <= KW_OUTPUTFORMAT)||(LA189_0 >= KW_OVERWRITE && LA189_0 <= KW_OWNER)||(LA189_0 >= KW_PARTITION && LA189_0 <= KW_PLUS)||(LA189_0 >= KW_PRETTY && LA189_0 <= KW_RECORDWRITER)||(LA189_0 >= KW_REGEXP && LA189_0 <= KW_SECOND)||(LA189_0 >= KW_SEMI && LA189_0 <= KW_TABLES)||(LA189_0 >= KW_TBLPROPERTIES && LA189_0 <= KW_TERMINATED)||(LA189_0 >= KW_TIMESTAMP && LA189_0 <= KW_TRANSACTIONS)||(LA189_0 >= KW_TRIGGER && LA189_0 <= KW_UNARCHIVE)||(LA189_0 >= KW_UNDO && LA189_0 <= KW_UNIONTYPE)||(LA189_0 >= KW_UNLOCK && LA189_0 <= KW_VALUE_TYPE)||LA189_0==KW_VIEW||LA189_0==KW_WHILE||(LA189_0 >= KW_WITH && LA189_0 <= KW_YEAR)) ) {
                alt189=1;
            }
            else if ( (LA189_0==StringLiteral) ) {
                alt189=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 0, input);

                throw nvae;

            }
            switch (alt189) {
                case 1 :
                    // HiveParser.g:1740:7: functionIdentifier
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_functionIdentifier_in_showFunctionIdentifier10033);
                    functionIdentifier635=functionIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, functionIdentifier635.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:1741:7: StringLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    StringLiteral636=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_showFunctionIdentifier10041); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    StringLiteral636_tree = 
                    (CommonTree)adaptor.create(StringLiteral636)
                    ;
                    adaptor.addChild(root_0, StringLiteral636_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "showFunctionIdentifier"


    public static class showStmtIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "showStmtIdentifier"
    // HiveParser.g:1744:1: showStmtIdentifier : ( identifier | StringLiteral );
    public final HiveParser.showStmtIdentifier_return showStmtIdentifier() throws RecognitionException {
        HiveParser.showStmtIdentifier_return retval = new HiveParser.showStmtIdentifier_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token StringLiteral638=null;
        HiveParser_IdentifiersParser.identifier_return identifier637 =null;


        CommonTree StringLiteral638_tree=null;

         pushMsg("identifier for show statement", state); 
        try {
            // HiveParser.g:1747:5: ( identifier | StringLiteral )
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( ((LA190_0 >= Identifier && LA190_0 <= KW_ANALYZE)||(LA190_0 >= KW_ARCHIVE && LA190_0 <= KW_CASCADE)||LA190_0==KW_CHANGE||(LA190_0 >= KW_CLUSTER && LA190_0 <= KW_COLLECTION)||(LA190_0 >= KW_COLUMNS && LA190_0 <= KW_CONCATENATE)||(LA190_0 >= KW_CONTINUE && LA190_0 <= KW_CREATE)||LA190_0==KW_CUBE||(LA190_0 >= KW_CURRENT_DATE && LA190_0 <= KW_DATA)||(LA190_0 >= KW_DATABASES && LA190_0 <= KW_DISABLE)||(LA190_0 >= KW_DISTRIBUTE && LA190_0 <= KW_ELEM_TYPE)||LA190_0==KW_ENABLE||LA190_0==KW_ESCAPED||(LA190_0 >= KW_EXCLUSIVE && LA190_0 <= KW_EXPORT)||(LA190_0 >= KW_EXTERNAL && LA190_0 <= KW_FLOAT)||(LA190_0 >= KW_FOR && LA190_0 <= KW_FORMATTED)||LA190_0==KW_FULL||(LA190_0 >= KW_FUNCTIONS && LA190_0 <= KW_GROUPING)||(LA190_0 >= KW_HOLD_DDLTIME && LA190_0 <= KW_IDXPROPERTIES)||(LA190_0 >= KW_IGNORE && LA190_0 <= KW_INTERSECT)||(LA190_0 >= KW_INTO && LA190_0 <= KW_JAR)||(LA190_0 >= KW_KEYS && LA190_0 <= KW_LEFT)||(LA190_0 >= KW_LIKE && LA190_0 <= KW_LONG)||(LA190_0 >= KW_MAPJOIN && LA190_0 <= KW_MONTH)||(LA190_0 >= KW_MSCK && LA190_0 <= KW_NOSCAN)||(LA190_0 >= KW_NO_DROP && LA190_0 <= KW_OFFLINE)||LA190_0==KW_OPTION||(LA190_0 >= KW_ORDER && LA190_0 <= KW_OUTPUTFORMAT)||(LA190_0 >= KW_OVERWRITE && LA190_0 <= KW_OWNER)||(LA190_0 >= KW_PARTITION && LA190_0 <= KW_PLUS)||(LA190_0 >= KW_PRETTY && LA190_0 <= KW_RECORDWRITER)||(LA190_0 >= KW_REGEXP && LA190_0 <= KW_SECOND)||(LA190_0 >= KW_SEMI && LA190_0 <= KW_TABLES)||(LA190_0 >= KW_TBLPROPERTIES && LA190_0 <= KW_TERMINATED)||(LA190_0 >= KW_TIMESTAMP && LA190_0 <= KW_TRANSACTIONS)||(LA190_0 >= KW_TRIGGER && LA190_0 <= KW_UNARCHIVE)||(LA190_0 >= KW_UNDO && LA190_0 <= KW_UNIONTYPE)||(LA190_0 >= KW_UNLOCK && LA190_0 <= KW_VALUE_TYPE)||LA190_0==KW_VIEW||LA190_0==KW_WHILE||(LA190_0 >= KW_WITH && LA190_0 <= KW_YEAR)) ) {
                alt190=1;
            }
            else if ( (LA190_0==StringLiteral) ) {
                alt190=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 190, 0, input);

                throw nvae;

            }
            switch (alt190) {
                case 1 :
                    // HiveParser.g:1747:7: identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_showStmtIdentifier10068);
                    identifier637=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier637.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:1748:7: StringLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    StringLiteral638=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_showStmtIdentifier10076); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    StringLiteral638_tree = 
                    (CommonTree)adaptor.create(StringLiteral638)
                    ;
                    adaptor.addChild(root_0, StringLiteral638_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "showStmtIdentifier"


    public static class tableComment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableComment"
    // HiveParser.g:1751:1: tableComment : KW_COMMENT comment= StringLiteral -> ^( TOK_TABLECOMMENT $comment) ;
    public final HiveParser.tableComment_return tableComment() throws RecognitionException {
        HiveParser.tableComment_return retval = new HiveParser.tableComment_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token comment=null;
        Token KW_COMMENT639=null;

        CommonTree comment_tree=null;
        CommonTree KW_COMMENT639_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

         pushMsg("table's comment", state); 
        try {
            // HiveParser.g:1754:5: ( KW_COMMENT comment= StringLiteral -> ^( TOK_TABLECOMMENT $comment) )
            // HiveParser.g:1755:7: KW_COMMENT comment= StringLiteral
            {
            KW_COMMENT639=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_tableComment10109); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT639);


            comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableComment10113); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(comment);


            // AST REWRITE
            // elements: comment
            // token labels: comment
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1755:41: -> ^( TOK_TABLECOMMENT $comment)
            {
                // HiveParser.g:1755:44: ^( TOK_TABLECOMMENT $comment)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLECOMMENT, "TOK_TABLECOMMENT")
                , root_1);

                adaptor.addChild(root_1, stream_comment.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableComment"


    public static class tablePartition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tablePartition"
    // HiveParser.g:1758:1: tablePartition : KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN -> ^( TOK_TABLEPARTCOLS columnNameTypeList ) ;
    public final HiveParser.tablePartition_return tablePartition() throws RecognitionException {
        HiveParser.tablePartition_return retval = new HiveParser.tablePartition_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_PARTITIONED640=null;
        Token KW_BY641=null;
        Token LPAREN642=null;
        Token RPAREN644=null;
        HiveParser.columnNameTypeList_return columnNameTypeList643 =null;


        CommonTree KW_PARTITIONED640_tree=null;
        CommonTree KW_BY641_tree=null;
        CommonTree LPAREN642_tree=null;
        CommonTree RPAREN644_tree=null;
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleTokenStream stream_KW_PARTITIONED=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONED");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
         pushMsg("table partition specification", state); 
        try {
            // HiveParser.g:1761:5: ( KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN -> ^( TOK_TABLEPARTCOLS columnNameTypeList ) )
            // HiveParser.g:1761:7: KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN
            {
            KW_PARTITIONED640=(Token)match(input,KW_PARTITIONED,FOLLOW_KW_PARTITIONED_in_tablePartition10150); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_PARTITIONED.add(KW_PARTITIONED640);


            KW_BY641=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tablePartition10152); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY641);


            LPAREN642=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tablePartition10154); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN642);


            pushFollow(FOLLOW_columnNameTypeList_in_tablePartition10156);
            columnNameTypeList643=columnNameTypeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnNameTypeList.add(columnNameTypeList643.getTree());

            RPAREN644=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tablePartition10158); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN644);


            // AST REWRITE
            // elements: columnNameTypeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1762:5: -> ^( TOK_TABLEPARTCOLS columnNameTypeList )
            {
                // HiveParser.g:1762:8: ^( TOK_TABLEPARTCOLS columnNameTypeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLEPARTCOLS, "TOK_TABLEPARTCOLS")
                , root_1);

                adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tablePartition"


    public static class tableBuckets_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableBuckets"
    // HiveParser.g:1765:1: tableBuckets : KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS -> ^( TOK_ALTERTABLE_BUCKETS $bucketCols ( $sortCols)? $num) ;
    public final HiveParser.tableBuckets_return tableBuckets() throws RecognitionException {
        HiveParser.tableBuckets_return retval = new HiveParser.tableBuckets_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token num=null;
        Token KW_CLUSTERED645=null;
        Token KW_BY646=null;
        Token LPAREN647=null;
        Token RPAREN648=null;
        Token KW_SORTED649=null;
        Token KW_BY650=null;
        Token LPAREN651=null;
        Token RPAREN652=null;
        Token KW_INTO653=null;
        Token KW_BUCKETS654=null;
        HiveParser.columnNameList_return bucketCols =null;

        HiveParser.columnNameOrderList_return sortCols =null;


        CommonTree num_tree=null;
        CommonTree KW_CLUSTERED645_tree=null;
        CommonTree KW_BY646_tree=null;
        CommonTree LPAREN647_tree=null;
        CommonTree RPAREN648_tree=null;
        CommonTree KW_SORTED649_tree=null;
        CommonTree KW_BY650_tree=null;
        CommonTree LPAREN651_tree=null;
        CommonTree RPAREN652_tree=null;
        CommonTree KW_INTO653_tree=null;
        CommonTree KW_BUCKETS654_tree=null;
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleTokenStream stream_KW_SORTED=new RewriteRuleTokenStream(adaptor,"token KW_SORTED");
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
        RewriteRuleTokenStream stream_KW_BUCKETS=new RewriteRuleTokenStream(adaptor,"token KW_BUCKETS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_CLUSTERED=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTERED");
        RewriteRuleSubtreeStream stream_columnNameOrderList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameOrderList");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
         pushMsg("table buckets specification", state); 
        try {
            // HiveParser.g:1768:5: ( KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS -> ^( TOK_ALTERTABLE_BUCKETS $bucketCols ( $sortCols)? $num) )
            // HiveParser.g:1769:7: KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS
            {
            KW_CLUSTERED645=(Token)match(input,KW_CLUSTERED,FOLLOW_KW_CLUSTERED_in_tableBuckets10203); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_CLUSTERED.add(KW_CLUSTERED645);


            KW_BY646=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableBuckets10205); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY646);


            LPAREN647=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableBuckets10207); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN647);


            pushFollow(FOLLOW_columnNameList_in_tableBuckets10211);
            bucketCols=columnNameList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnNameList.add(bucketCols.getTree());

            RPAREN648=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableBuckets10213); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN648);


            // HiveParser.g:1769:66: ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )?
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==KW_SORTED) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    // HiveParser.g:1769:67: KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN
                    {
                    KW_SORTED649=(Token)match(input,KW_SORTED,FOLLOW_KW_SORTED_in_tableBuckets10216); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SORTED.add(KW_SORTED649);


                    KW_BY650=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableBuckets10218); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY650);


                    LPAREN651=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableBuckets10220); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN651);


                    pushFollow(FOLLOW_columnNameOrderList_in_tableBuckets10224);
                    sortCols=columnNameOrderList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnNameOrderList.add(sortCols.getTree());

                    RPAREN652=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableBuckets10226); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN652);


                    }
                    break;

            }


            KW_INTO653=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_tableBuckets10230); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_INTO.add(KW_INTO653);


            num=(Token)match(input,Number,FOLLOW_Number_in_tableBuckets10234); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Number.add(num);


            KW_BUCKETS654=(Token)match(input,KW_BUCKETS,FOLLOW_KW_BUCKETS_in_tableBuckets10236); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_BUCKETS.add(KW_BUCKETS654);


            // AST REWRITE
            // elements: sortCols, bucketCols, num
            // token labels: num
            // rule labels: bucketCols, sortCols, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
            RewriteRuleSubtreeStream stream_bucketCols=new RewriteRuleSubtreeStream(adaptor,"rule bucketCols",bucketCols!=null?bucketCols.tree:null);
            RewriteRuleSubtreeStream stream_sortCols=new RewriteRuleSubtreeStream(adaptor,"rule sortCols",sortCols!=null?sortCols.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1770:5: -> ^( TOK_ALTERTABLE_BUCKETS $bucketCols ( $sortCols)? $num)
            {
                // HiveParser.g:1770:8: ^( TOK_ALTERTABLE_BUCKETS $bucketCols ( $sortCols)? $num)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_ALTERTABLE_BUCKETS, "TOK_ALTERTABLE_BUCKETS")
                , root_1);

                adaptor.addChild(root_1, stream_bucketCols.nextTree());

                // HiveParser.g:1770:46: ( $sortCols)?
                if ( stream_sortCols.hasNext() ) {
                    adaptor.addChild(root_1, stream_sortCols.nextTree());

                }
                stream_sortCols.reset();

                adaptor.addChild(root_1, stream_num.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableBuckets"


    public static class tableSkewed_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableSkewed"
    // HiveParser.g:1773:1: tableSkewed : KW_SKEWED KW_BY LPAREN skewedCols= columnNameList RPAREN KW_ON LPAREN (skewedValues= skewedValueElement ) RPAREN ( ( storedAsDirs )=> storedAsDirs )? -> ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? ) ;
    public final HiveParser.tableSkewed_return tableSkewed() throws RecognitionException {
        HiveParser.tableSkewed_return retval = new HiveParser.tableSkewed_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_SKEWED655=null;
        Token KW_BY656=null;
        Token LPAREN657=null;
        Token RPAREN658=null;
        Token KW_ON659=null;
        Token LPAREN660=null;
        Token RPAREN661=null;
        HiveParser.columnNameList_return skewedCols =null;

        HiveParser.skewedValueElement_return skewedValues =null;

        HiveParser.storedAsDirs_return storedAsDirs662 =null;


        CommonTree KW_SKEWED655_tree=null;
        CommonTree KW_BY656_tree=null;
        CommonTree LPAREN657_tree=null;
        CommonTree RPAREN658_tree=null;
        CommonTree KW_ON659_tree=null;
        CommonTree LPAREN660_tree=null;
        CommonTree RPAREN661_tree=null;
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_SKEWED=new RewriteRuleTokenStream(adaptor,"token KW_SKEWED");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleSubtreeStream stream_skewedValueElement=new RewriteRuleSubtreeStream(adaptor,"rule skewedValueElement");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
        RewriteRuleSubtreeStream stream_storedAsDirs=new RewriteRuleSubtreeStream(adaptor,"rule storedAsDirs");
         pushMsg("table skewed specification", state); 
        try {
            // HiveParser.g:1776:5: ( KW_SKEWED KW_BY LPAREN skewedCols= columnNameList RPAREN KW_ON LPAREN (skewedValues= skewedValueElement ) RPAREN ( ( storedAsDirs )=> storedAsDirs )? -> ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? ) )
            // HiveParser.g:1777:6: KW_SKEWED KW_BY LPAREN skewedCols= columnNameList RPAREN KW_ON LPAREN (skewedValues= skewedValueElement ) RPAREN ( ( storedAsDirs )=> storedAsDirs )?
            {
            KW_SKEWED655=(Token)match(input,KW_SKEWED,FOLLOW_KW_SKEWED_in_tableSkewed10288); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SKEWED.add(KW_SKEWED655);


            KW_BY656=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableSkewed10290); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY656);


            LPAREN657=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableSkewed10292); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN657);


            pushFollow(FOLLOW_columnNameList_in_tableSkewed10296);
            skewedCols=columnNameList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnNameList.add(skewedCols.getTree());

            RPAREN658=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableSkewed10298); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN658);


            KW_ON659=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_tableSkewed10300); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON659);


            LPAREN660=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableSkewed10302); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN660);


            // HiveParser.g:1777:75: (skewedValues= skewedValueElement )
            // HiveParser.g:1777:76: skewedValues= skewedValueElement
            {
            pushFollow(FOLLOW_skewedValueElement_in_tableSkewed10307);
            skewedValues=skewedValueElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_skewedValueElement.add(skewedValues.getTree());

            }


            RPAREN661=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableSkewed10310); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN661);


            // HiveParser.g:1777:116: ( ( storedAsDirs )=> storedAsDirs )?
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==KW_STORED) ) {
                int LA192_1 = input.LA(2);

                if ( (LA192_1==KW_AS) ) {
                    int LA192_7 = input.LA(3);

                    if ( (LA192_7==KW_DIRECTORIES) ) {
                        int LA192_9 = input.LA(4);

                        if ( (synpred13_HiveParser()) ) {
                            alt192=1;
                        }
                    }
                }
            }
            switch (alt192) {
                case 1 :
                    // HiveParser.g:1777:117: ( storedAsDirs )=> storedAsDirs
                    {
                    pushFollow(FOLLOW_storedAsDirs_in_tableSkewed10319);
                    storedAsDirs662=storedAsDirs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_storedAsDirs.add(storedAsDirs662.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: skewedCols, storedAsDirs, skewedValues
            // token labels: 
            // rule labels: skewedCols, skewedValues, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_skewedCols=new RewriteRuleSubtreeStream(adaptor,"rule skewedCols",skewedCols!=null?skewedCols.tree:null);
            RewriteRuleSubtreeStream stream_skewedValues=new RewriteRuleSubtreeStream(adaptor,"rule skewedValues",skewedValues!=null?skewedValues.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1778:5: -> ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? )
            {
                // HiveParser.g:1778:8: ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLESKEWED, "TOK_TABLESKEWED")
                , root_1);

                adaptor.addChild(root_1, stream_skewedCols.nextTree());

                adaptor.addChild(root_1, stream_skewedValues.nextTree());

                // HiveParser.g:1778:52: ( storedAsDirs )?
                if ( stream_storedAsDirs.hasNext() ) {
                    adaptor.addChild(root_1, stream_storedAsDirs.nextTree());

                }
                stream_storedAsDirs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableSkewed"


    public static class rowFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rowFormat"
    // HiveParser.g:1781:1: rowFormat : ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) );
    public final HiveParser.rowFormat_return rowFormat() throws RecognitionException {
        HiveParser.rowFormat_return retval = new HiveParser.rowFormat_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.rowFormatSerde_return rowFormatSerde663 =null;

        HiveParser.rowFormatDelimited_return rowFormatDelimited664 =null;


        RewriteRuleSubtreeStream stream_rowFormatSerde=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatSerde");
        RewriteRuleSubtreeStream stream_rowFormatDelimited=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatDelimited");
         pushMsg("serde specification", state); 
        try {
            // HiveParser.g:1784:5: ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) )
            int alt193=3;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==KW_ROW) ) {
                int LA193_1 = input.LA(2);

                if ( (LA193_1==KW_FORMAT) ) {
                    int LA193_23 = input.LA(3);

                    if ( (LA193_23==KW_SERDE) ) {
                        alt193=1;
                    }
                    else if ( (LA193_23==KW_DELIMITED) ) {
                        alt193=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 193, 23, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 193, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA193_0==EOF||LA193_0==KW_CLUSTER||LA193_0==KW_DISTRIBUTE||LA193_0==KW_FROM||LA193_0==KW_GROUP||LA193_0==KW_HAVING||LA193_0==KW_INSERT||LA193_0==KW_LATERAL||LA193_0==KW_LIMIT||LA193_0==KW_MAP||LA193_0==KW_ORDER||(LA193_0 >= KW_RECORDREADER && LA193_0 <= KW_REDUCE)||LA193_0==KW_SELECT||LA193_0==KW_SORT||LA193_0==KW_UNION||LA193_0==KW_USING||LA193_0==KW_WHERE||LA193_0==KW_WINDOW||LA193_0==RPAREN) ) {
                alt193=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 193, 0, input);

                throw nvae;

            }
            switch (alt193) {
                case 1 :
                    // HiveParser.g:1784:7: rowFormatSerde
                    {
                    pushFollow(FOLLOW_rowFormatSerde_in_rowFormat10367);
                    rowFormatSerde663=rowFormatSerde();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowFormatSerde.add(rowFormatSerde663.getTree());

                    // AST REWRITE
                    // elements: rowFormatSerde
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1784:22: -> ^( TOK_SERDE rowFormatSerde )
                    {
                        // HiveParser.g:1784:25: ^( TOK_SERDE rowFormatSerde )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SERDE, "TOK_SERDE")
                        , root_1);

                        adaptor.addChild(root_1, stream_rowFormatSerde.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1785:7: rowFormatDelimited
                    {
                    pushFollow(FOLLOW_rowFormatDelimited_in_rowFormat10383);
                    rowFormatDelimited664=rowFormatDelimited();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowFormatDelimited.add(rowFormatDelimited664.getTree());

                    // AST REWRITE
                    // elements: rowFormatDelimited
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1785:26: -> ^( TOK_SERDE rowFormatDelimited )
                    {
                        // HiveParser.g:1785:29: ^( TOK_SERDE rowFormatDelimited )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SERDE, "TOK_SERDE")
                        , root_1);

                        adaptor.addChild(root_1, stream_rowFormatDelimited.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:1786:9: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1786:9: -> ^( TOK_SERDE )
                    {
                        // HiveParser.g:1786:12: ^( TOK_SERDE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_SERDE, "TOK_SERDE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rowFormat"


    public static class recordReader_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "recordReader"
    // HiveParser.g:1789:1: recordReader : ( KW_RECORDREADER StringLiteral -> ^( TOK_RECORDREADER StringLiteral ) | -> ^( TOK_RECORDREADER ) );
    public final HiveParser.recordReader_return recordReader() throws RecognitionException {
        HiveParser.recordReader_return retval = new HiveParser.recordReader_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_RECORDREADER665=null;
        Token StringLiteral666=null;

        CommonTree KW_RECORDREADER665_tree=null;
        CommonTree StringLiteral666_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_RECORDREADER=new RewriteRuleTokenStream(adaptor,"token KW_RECORDREADER");

         pushMsg("record reader specification", state); 
        try {
            // HiveParser.g:1792:5: ( KW_RECORDREADER StringLiteral -> ^( TOK_RECORDREADER StringLiteral ) | -> ^( TOK_RECORDREADER ) )
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==KW_RECORDREADER) ) {
                alt194=1;
            }
            else if ( (LA194_0==EOF||LA194_0==KW_CLUSTER||LA194_0==KW_DISTRIBUTE||LA194_0==KW_FROM||LA194_0==KW_GROUP||LA194_0==KW_HAVING||LA194_0==KW_INSERT||LA194_0==KW_LATERAL||LA194_0==KW_LIMIT||LA194_0==KW_MAP||LA194_0==KW_ORDER||LA194_0==KW_REDUCE||LA194_0==KW_SELECT||LA194_0==KW_SORT||LA194_0==KW_UNION||LA194_0==KW_WHERE||LA194_0==KW_WINDOW||LA194_0==RPAREN) ) {
                alt194=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 194, 0, input);

                throw nvae;

            }
            switch (alt194) {
                case 1 :
                    // HiveParser.g:1792:7: KW_RECORDREADER StringLiteral
                    {
                    KW_RECORDREADER665=(Token)match(input,KW_RECORDREADER,FOLLOW_KW_RECORDREADER_in_recordReader10432); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_RECORDREADER.add(KW_RECORDREADER665);


                    StringLiteral666=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_recordReader10434); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral666);


                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1792:37: -> ^( TOK_RECORDREADER StringLiteral )
                    {
                        // HiveParser.g:1792:40: ^( TOK_RECORDREADER StringLiteral )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_RECORDREADER, "TOK_RECORDREADER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_StringLiteral.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1793:9: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1793:9: -> ^( TOK_RECORDREADER )
                    {
                        // HiveParser.g:1793:12: ^( TOK_RECORDREADER )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_RECORDREADER, "TOK_RECORDREADER")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "recordReader"


    public static class recordWriter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "recordWriter"
    // HiveParser.g:1796:1: recordWriter : ( KW_RECORDWRITER StringLiteral -> ^( TOK_RECORDWRITER StringLiteral ) | -> ^( TOK_RECORDWRITER ) );
    public final HiveParser.recordWriter_return recordWriter() throws RecognitionException {
        HiveParser.recordWriter_return retval = new HiveParser.recordWriter_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_RECORDWRITER667=null;
        Token StringLiteral668=null;

        CommonTree KW_RECORDWRITER667_tree=null;
        CommonTree StringLiteral668_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_RECORDWRITER=new RewriteRuleTokenStream(adaptor,"token KW_RECORDWRITER");

         pushMsg("record writer specification", state); 
        try {
            // HiveParser.g:1799:5: ( KW_RECORDWRITER StringLiteral -> ^( TOK_RECORDWRITER StringLiteral ) | -> ^( TOK_RECORDWRITER ) )
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==KW_RECORDWRITER) ) {
                alt195=1;
            }
            else if ( (LA195_0==KW_USING) ) {
                alt195=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;

            }
            switch (alt195) {
                case 1 :
                    // HiveParser.g:1799:7: KW_RECORDWRITER StringLiteral
                    {
                    KW_RECORDWRITER667=(Token)match(input,KW_RECORDWRITER,FOLLOW_KW_RECORDWRITER_in_recordWriter10483); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_RECORDWRITER.add(KW_RECORDWRITER667);


                    StringLiteral668=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_recordWriter10485); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral668);


                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1799:37: -> ^( TOK_RECORDWRITER StringLiteral )
                    {
                        // HiveParser.g:1799:40: ^( TOK_RECORDWRITER StringLiteral )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_RECORDWRITER, "TOK_RECORDWRITER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_StringLiteral.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1800:9: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1800:9: -> ^( TOK_RECORDWRITER )
                    {
                        // HiveParser.g:1800:12: ^( TOK_RECORDWRITER )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_RECORDWRITER, "TOK_RECORDWRITER")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "recordWriter"


    public static class rowFormatSerde_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rowFormatSerde"
    // HiveParser.g:1803:1: rowFormatSerde : KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_SERDENAME $name ( $serdeprops)? ) ;
    public final HiveParser.rowFormatSerde_return rowFormatSerde() throws RecognitionException {
        HiveParser.rowFormatSerde_return retval = new HiveParser.rowFormatSerde_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token name=null;
        Token KW_ROW669=null;
        Token KW_FORMAT670=null;
        Token KW_SERDE671=null;
        Token KW_WITH672=null;
        Token KW_SERDEPROPERTIES673=null;
        HiveParser.tableProperties_return serdeprops =null;


        CommonTree name_tree=null;
        CommonTree KW_ROW669_tree=null;
        CommonTree KW_FORMAT670_tree=null;
        CommonTree KW_SERDE671_tree=null;
        CommonTree KW_WITH672_tree=null;
        CommonTree KW_SERDEPROPERTIES673_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_ROW=new RewriteRuleTokenStream(adaptor,"token KW_ROW");
        RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
        RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");
        RewriteRuleTokenStream stream_KW_FORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FORMAT");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
         pushMsg("serde format specification", state); 
        try {
            // HiveParser.g:1806:5: ( KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_SERDENAME $name ( $serdeprops)? ) )
            // HiveParser.g:1806:7: KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
            {
            KW_ROW669=(Token)match(input,KW_ROW,FOLLOW_KW_ROW_in_rowFormatSerde10534); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ROW.add(KW_ROW669);


            KW_FORMAT670=(Token)match(input,KW_FORMAT,FOLLOW_KW_FORMAT_in_rowFormatSerde10536); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FORMAT.add(KW_FORMAT670);


            KW_SERDE671=(Token)match(input,KW_SERDE,FOLLOW_KW_SERDE_in_rowFormatSerde10538); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SERDE.add(KW_SERDE671);


            name=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_rowFormatSerde10542); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(name);


            // HiveParser.g:1806:52: ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==KW_WITH) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    // HiveParser.g:1806:53: KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties
                    {
                    KW_WITH672=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_rowFormatSerde10545); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH672);


                    KW_SERDEPROPERTIES673=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_rowFormatSerde10547); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES673);


                    pushFollow(FOLLOW_tableProperties_in_rowFormatSerde10551);
                    serdeprops=tableProperties();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableProperties.add(serdeprops.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: name, serdeprops
            // token labels: name
            // rule labels: serdeprops, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_serdeprops=new RewriteRuleSubtreeStream(adaptor,"rule serdeprops",serdeprops!=null?serdeprops.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1807:5: -> ^( TOK_SERDENAME $name ( $serdeprops)? )
            {
                // HiveParser.g:1807:8: ^( TOK_SERDENAME $name ( $serdeprops)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SERDENAME, "TOK_SERDENAME")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextNode());

                // HiveParser.g:1807:31: ( $serdeprops)?
                if ( stream_serdeprops.hasNext() ) {
                    adaptor.addChild(root_1, stream_serdeprops.nextTree());

                }
                stream_serdeprops.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rowFormatSerde"


    public static class rowFormatDelimited_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rowFormatDelimited"
    // HiveParser.g:1810:1: rowFormatDelimited : KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? ) ;
    public final HiveParser.rowFormatDelimited_return rowFormatDelimited() throws RecognitionException {
        HiveParser.rowFormatDelimited_return retval = new HiveParser.rowFormatDelimited_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_ROW674=null;
        Token KW_FORMAT675=null;
        Token KW_DELIMITED676=null;
        HiveParser.tableRowFormatFieldIdentifier_return tableRowFormatFieldIdentifier677 =null;

        HiveParser.tableRowFormatCollItemsIdentifier_return tableRowFormatCollItemsIdentifier678 =null;

        HiveParser.tableRowFormatMapKeysIdentifier_return tableRowFormatMapKeysIdentifier679 =null;

        HiveParser.tableRowFormatLinesIdentifier_return tableRowFormatLinesIdentifier680 =null;

        HiveParser.tableRowNullFormat_return tableRowNullFormat681 =null;


        CommonTree KW_ROW674_tree=null;
        CommonTree KW_FORMAT675_tree=null;
        CommonTree KW_DELIMITED676_tree=null;
        RewriteRuleTokenStream stream_KW_ROW=new RewriteRuleTokenStream(adaptor,"token KW_ROW");
        RewriteRuleTokenStream stream_KW_DELIMITED=new RewriteRuleTokenStream(adaptor,"token KW_DELIMITED");
        RewriteRuleTokenStream stream_KW_FORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FORMAT");
        RewriteRuleSubtreeStream stream_tableRowNullFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowNullFormat");
        RewriteRuleSubtreeStream stream_tableRowFormatFieldIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatFieldIdentifier");
        RewriteRuleSubtreeStream stream_tableRowFormatCollItemsIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatCollItemsIdentifier");
        RewriteRuleSubtreeStream stream_tableRowFormatMapKeysIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatMapKeysIdentifier");
        RewriteRuleSubtreeStream stream_tableRowFormatLinesIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatLinesIdentifier");
         pushMsg("serde properties specification", state); 
        try {
            // HiveParser.g:1813:5: ( KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? ) )
            // HiveParser.g:1814:7: KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )?
            {
            KW_ROW674=(Token)match(input,KW_ROW,FOLLOW_KW_ROW_in_rowFormatDelimited10603); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ROW.add(KW_ROW674);


            KW_FORMAT675=(Token)match(input,KW_FORMAT,FOLLOW_KW_FORMAT_in_rowFormatDelimited10605); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FORMAT.add(KW_FORMAT675);


            KW_DELIMITED676=(Token)match(input,KW_DELIMITED,FOLLOW_KW_DELIMITED_in_rowFormatDelimited10607); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DELIMITED.add(KW_DELIMITED676);


            // HiveParser.g:1814:37: ( tableRowFormatFieldIdentifier )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==KW_FIELDS) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // HiveParser.g:1814:37: tableRowFormatFieldIdentifier
                    {
                    pushFollow(FOLLOW_tableRowFormatFieldIdentifier_in_rowFormatDelimited10609);
                    tableRowFormatFieldIdentifier677=tableRowFormatFieldIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableRowFormatFieldIdentifier.add(tableRowFormatFieldIdentifier677.getTree());

                    }
                    break;

            }


            // HiveParser.g:1814:68: ( tableRowFormatCollItemsIdentifier )?
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==KW_COLLECTION) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    // HiveParser.g:1814:68: tableRowFormatCollItemsIdentifier
                    {
                    pushFollow(FOLLOW_tableRowFormatCollItemsIdentifier_in_rowFormatDelimited10612);
                    tableRowFormatCollItemsIdentifier678=tableRowFormatCollItemsIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableRowFormatCollItemsIdentifier.add(tableRowFormatCollItemsIdentifier678.getTree());

                    }
                    break;

            }


            // HiveParser.g:1814:103: ( tableRowFormatMapKeysIdentifier )?
            int alt199=2;
            alt199 = dfa199.predict(input);
            switch (alt199) {
                case 1 :
                    // HiveParser.g:1814:103: tableRowFormatMapKeysIdentifier
                    {
                    pushFollow(FOLLOW_tableRowFormatMapKeysIdentifier_in_rowFormatDelimited10615);
                    tableRowFormatMapKeysIdentifier679=tableRowFormatMapKeysIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableRowFormatMapKeysIdentifier.add(tableRowFormatMapKeysIdentifier679.getTree());

                    }
                    break;

            }


            // HiveParser.g:1814:136: ( tableRowFormatLinesIdentifier )?
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==KW_LINES) ) {
                alt200=1;
            }
            switch (alt200) {
                case 1 :
                    // HiveParser.g:1814:136: tableRowFormatLinesIdentifier
                    {
                    pushFollow(FOLLOW_tableRowFormatLinesIdentifier_in_rowFormatDelimited10618);
                    tableRowFormatLinesIdentifier680=tableRowFormatLinesIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableRowFormatLinesIdentifier.add(tableRowFormatLinesIdentifier680.getTree());

                    }
                    break;

            }


            // HiveParser.g:1814:167: ( tableRowNullFormat )?
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==KW_NULL) ) {
                alt201=1;
            }
            switch (alt201) {
                case 1 :
                    // HiveParser.g:1814:167: tableRowNullFormat
                    {
                    pushFollow(FOLLOW_tableRowNullFormat_in_rowFormatDelimited10621);
                    tableRowNullFormat681=tableRowNullFormat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableRowNullFormat.add(tableRowNullFormat681.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tableRowFormatCollItemsIdentifier, tableRowFormatFieldIdentifier, tableRowNullFormat, tableRowFormatMapKeysIdentifier, tableRowFormatLinesIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1815:5: -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? )
            {
                // HiveParser.g:1815:8: ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SERDEPROPS, "TOK_SERDEPROPS")
                , root_1);

                // HiveParser.g:1815:25: ( tableRowFormatFieldIdentifier )?
                if ( stream_tableRowFormatFieldIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormatFieldIdentifier.nextTree());

                }
                stream_tableRowFormatFieldIdentifier.reset();

                // HiveParser.g:1815:56: ( tableRowFormatCollItemsIdentifier )?
                if ( stream_tableRowFormatCollItemsIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormatCollItemsIdentifier.nextTree());

                }
                stream_tableRowFormatCollItemsIdentifier.reset();

                // HiveParser.g:1815:91: ( tableRowFormatMapKeysIdentifier )?
                if ( stream_tableRowFormatMapKeysIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormatMapKeysIdentifier.nextTree());

                }
                stream_tableRowFormatMapKeysIdentifier.reset();

                // HiveParser.g:1815:124: ( tableRowFormatLinesIdentifier )?
                if ( stream_tableRowFormatLinesIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormatLinesIdentifier.nextTree());

                }
                stream_tableRowFormatLinesIdentifier.reset();

                // HiveParser.g:1815:155: ( tableRowNullFormat )?
                if ( stream_tableRowNullFormat.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowNullFormat.nextTree());

                }
                stream_tableRowNullFormat.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rowFormatDelimited"


    public static class tableRowFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableRowFormat"
    // HiveParser.g:1818:1: tableRowFormat : ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) );
    public final HiveParser.tableRowFormat_return tableRowFormat() throws RecognitionException {
        HiveParser.tableRowFormat_return retval = new HiveParser.tableRowFormat_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.rowFormatDelimited_return rowFormatDelimited682 =null;

        HiveParser.rowFormatSerde_return rowFormatSerde683 =null;


        RewriteRuleSubtreeStream stream_rowFormatSerde=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatSerde");
        RewriteRuleSubtreeStream stream_rowFormatDelimited=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatDelimited");
         pushMsg("table row format specification", state); 
        try {
            // HiveParser.g:1821:5: ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) )
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==KW_ROW) ) {
                int LA202_1 = input.LA(2);

                if ( (LA202_1==KW_FORMAT) ) {
                    int LA202_2 = input.LA(3);

                    if ( (LA202_2==KW_DELIMITED) ) {
                        alt202=1;
                    }
                    else if ( (LA202_2==KW_SERDE) ) {
                        alt202=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 202, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 202, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 202, 0, input);

                throw nvae;

            }
            switch (alt202) {
                case 1 :
                    // HiveParser.g:1822:7: rowFormatDelimited
                    {
                    pushFollow(FOLLOW_rowFormatDelimited_in_tableRowFormat10680);
                    rowFormatDelimited682=rowFormatDelimited();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowFormatDelimited.add(rowFormatDelimited682.getTree());

                    // AST REWRITE
                    // elements: rowFormatDelimited
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1823:5: -> ^( TOK_TABLEROWFORMAT rowFormatDelimited )
                    {
                        // HiveParser.g:1823:8: ^( TOK_TABLEROWFORMAT rowFormatDelimited )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_TABLEROWFORMAT, "TOK_TABLEROWFORMAT")
                        , root_1);

                        adaptor.addChild(root_1, stream_rowFormatDelimited.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1824:7: rowFormatSerde
                    {
                    pushFollow(FOLLOW_rowFormatSerde_in_tableRowFormat10700);
                    rowFormatSerde683=rowFormatSerde();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowFormatSerde.add(rowFormatSerde683.getTree());

                    // AST REWRITE
                    // elements: rowFormatSerde
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1825:5: -> ^( TOK_TABLESERIALIZER rowFormatSerde )
                    {
                        // HiveParser.g:1825:8: ^( TOK_TABLESERIALIZER rowFormatSerde )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_TABLESERIALIZER, "TOK_TABLESERIALIZER")
                        , root_1);

                        adaptor.addChild(root_1, stream_rowFormatSerde.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableRowFormat"


    public static class tablePropertiesPrefixed_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tablePropertiesPrefixed"
    // HiveParser.g:1828:1: tablePropertiesPrefixed : KW_TBLPROPERTIES ! tableProperties ;
    public final HiveParser.tablePropertiesPrefixed_return tablePropertiesPrefixed() throws RecognitionException {
        HiveParser.tablePropertiesPrefixed_return retval = new HiveParser.tablePropertiesPrefixed_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_TBLPROPERTIES684=null;
        HiveParser.tableProperties_return tableProperties685 =null;


        CommonTree KW_TBLPROPERTIES684_tree=null;

         pushMsg("table properties with prefix", state); 
        try {
            // HiveParser.g:1831:5: ( KW_TBLPROPERTIES ! tableProperties )
            // HiveParser.g:1832:9: KW_TBLPROPERTIES ! tableProperties
            {
            root_0 = (CommonTree)adaptor.nil();


            KW_TBLPROPERTIES684=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_tablePropertiesPrefixed10747); if (state.failed) return retval;

            pushFollow(FOLLOW_tableProperties_in_tablePropertiesPrefixed10750);
            tableProperties685=tableProperties();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tableProperties685.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tablePropertiesPrefixed"


    public static class tableProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableProperties"
    // HiveParser.g:1835:1: tableProperties : LPAREN tablePropertiesList RPAREN -> ^( TOK_TABLEPROPERTIES tablePropertiesList ) ;
    public final HiveParser.tableProperties_return tableProperties() throws RecognitionException {
        HiveParser.tableProperties_return retval = new HiveParser.tableProperties_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token LPAREN686=null;
        Token RPAREN688=null;
        HiveParser.tablePropertiesList_return tablePropertiesList687 =null;


        CommonTree LPAREN686_tree=null;
        CommonTree RPAREN688_tree=null;
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_tablePropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesList");
         pushMsg("table properties", state); 
        try {
            // HiveParser.g:1838:5: ( LPAREN tablePropertiesList RPAREN -> ^( TOK_TABLEPROPERTIES tablePropertiesList ) )
            // HiveParser.g:1839:7: LPAREN tablePropertiesList RPAREN
            {
            LPAREN686=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableProperties10783); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN686);


            pushFollow(FOLLOW_tablePropertiesList_in_tableProperties10785);
            tablePropertiesList687=tablePropertiesList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tablePropertiesList.add(tablePropertiesList687.getTree());

            RPAREN688=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableProperties10787); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN688);


            // AST REWRITE
            // elements: tablePropertiesList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1839:41: -> ^( TOK_TABLEPROPERTIES tablePropertiesList )
            {
                // HiveParser.g:1839:44: ^( TOK_TABLEPROPERTIES tablePropertiesList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLEPROPERTIES, "TOK_TABLEPROPERTIES")
                , root_1);

                adaptor.addChild(root_1, stream_tablePropertiesList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableProperties"


    public static class tablePropertiesList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tablePropertiesList"
    // HiveParser.g:1842:1: tablePropertiesList : ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ ) | keyProperty ( COMMA keyProperty )* -> ^( TOK_TABLEPROPLIST ( keyProperty )+ ) );
    public final HiveParser.tablePropertiesList_return tablePropertiesList() throws RecognitionException {
        HiveParser.tablePropertiesList_return retval = new HiveParser.tablePropertiesList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA690=null;
        Token COMMA693=null;
        HiveParser.keyValueProperty_return keyValueProperty689 =null;

        HiveParser.keyValueProperty_return keyValueProperty691 =null;

        HiveParser.keyProperty_return keyProperty692 =null;

        HiveParser.keyProperty_return keyProperty694 =null;


        CommonTree COMMA690_tree=null;
        CommonTree COMMA693_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");
        RewriteRuleSubtreeStream stream_keyProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyProperty");
         pushMsg("table properties list", state); 
        try {
            // HiveParser.g:1845:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ ) | keyProperty ( COMMA keyProperty )* -> ^( TOK_TABLEPROPLIST ( keyProperty )+ ) )
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( (LA205_0==StringLiteral) ) {
                int LA205_1 = input.LA(2);

                if ( (LA205_1==EQUAL) ) {
                    alt205=1;
                }
                else if ( (LA205_1==COMMA||LA205_1==RPAREN) ) {
                    alt205=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 205, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 205, 0, input);

                throw nvae;

            }
            switch (alt205) {
                case 1 :
                    // HiveParser.g:1846:7: keyValueProperty ( COMMA keyValueProperty )*
                    {
                    pushFollow(FOLLOW_keyValueProperty_in_tablePropertiesList10828);
                    keyValueProperty689=keyValueProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty689.getTree());

                    // HiveParser.g:1846:24: ( COMMA keyValueProperty )*
                    loop203:
                    do {
                        int alt203=2;
                        int LA203_0 = input.LA(1);

                        if ( (LA203_0==COMMA) ) {
                            alt203=1;
                        }


                        switch (alt203) {
                    	case 1 :
                    	    // HiveParser.g:1846:25: COMMA keyValueProperty
                    	    {
                    	    COMMA690=(Token)match(input,COMMA,FOLLOW_COMMA_in_tablePropertiesList10831); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA690);


                    	    pushFollow(FOLLOW_keyValueProperty_in_tablePropertiesList10833);
                    	    keyValueProperty691=keyValueProperty();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty691.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop203;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: keyValueProperty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1846:50: -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ )
                    {
                        // HiveParser.g:1846:53: ^( TOK_TABLEPROPLIST ( keyValueProperty )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_TABLEPROPLIST, "TOK_TABLEPROPLIST")
                        , root_1);

                        if ( !(stream_keyValueProperty.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_keyValueProperty.hasNext() ) {
                            adaptor.addChild(root_1, stream_keyValueProperty.nextTree());

                        }
                        stream_keyValueProperty.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1848:7: keyProperty ( COMMA keyProperty )*
                    {
                    pushFollow(FOLLOW_keyProperty_in_tablePropertiesList10858);
                    keyProperty692=keyProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keyProperty.add(keyProperty692.getTree());

                    // HiveParser.g:1848:19: ( COMMA keyProperty )*
                    loop204:
                    do {
                        int alt204=2;
                        int LA204_0 = input.LA(1);

                        if ( (LA204_0==COMMA) ) {
                            alt204=1;
                        }


                        switch (alt204) {
                    	case 1 :
                    	    // HiveParser.g:1848:20: COMMA keyProperty
                    	    {
                    	    COMMA693=(Token)match(input,COMMA,FOLLOW_COMMA_in_tablePropertiesList10861); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA693);


                    	    pushFollow(FOLLOW_keyProperty_in_tablePropertiesList10863);
                    	    keyProperty694=keyProperty();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_keyProperty.add(keyProperty694.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop204;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: keyProperty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1848:40: -> ^( TOK_TABLEPROPLIST ( keyProperty )+ )
                    {
                        // HiveParser.g:1848:43: ^( TOK_TABLEPROPLIST ( keyProperty )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_TABLEPROPLIST, "TOK_TABLEPROPLIST")
                        , root_1);

                        if ( !(stream_keyProperty.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_keyProperty.hasNext() ) {
                            adaptor.addChild(root_1, stream_keyProperty.nextTree());

                        }
                        stream_keyProperty.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tablePropertiesList"


    public static class keyValueProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyValueProperty"
    // HiveParser.g:1851:1: keyValueProperty : key= StringLiteral EQUAL value= StringLiteral -> ^( TOK_TABLEPROPERTY $key $value) ;
    public final HiveParser.keyValueProperty_return keyValueProperty() throws RecognitionException {
        HiveParser.keyValueProperty_return retval = new HiveParser.keyValueProperty_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token key=null;
        Token value=null;
        Token EQUAL695=null;

        CommonTree key_tree=null;
        CommonTree value_tree=null;
        CommonTree EQUAL695_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");

         pushMsg("specifying key/value property", state); 
        try {
            // HiveParser.g:1854:5: (key= StringLiteral EQUAL value= StringLiteral -> ^( TOK_TABLEPROPERTY $key $value) )
            // HiveParser.g:1855:7: key= StringLiteral EQUAL value= StringLiteral
            {
            key=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_keyValueProperty10909); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(key);


            EQUAL695=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_keyValueProperty10911); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL695);


            value=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_keyValueProperty10915); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(value);


            // AST REWRITE
            // elements: key, value
            // token labels: value, key
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_value=new RewriteRuleTokenStream(adaptor,"token value",value);
            RewriteRuleTokenStream stream_key=new RewriteRuleTokenStream(adaptor,"token key",key);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1855:51: -> ^( TOK_TABLEPROPERTY $key $value)
            {
                // HiveParser.g:1855:54: ^( TOK_TABLEPROPERTY $key $value)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLEPROPERTY, "TOK_TABLEPROPERTY")
                , root_1);

                adaptor.addChild(root_1, stream_key.nextNode());

                adaptor.addChild(root_1, stream_value.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "keyValueProperty"


    public static class keyProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyProperty"
    // HiveParser.g:1858:1: keyProperty : key= StringLiteral -> ^( TOK_TABLEPROPERTY $key TOK_NULL ) ;
    public final HiveParser.keyProperty_return keyProperty() throws RecognitionException {
        HiveParser.keyProperty_return retval = new HiveParser.keyProperty_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token key=null;

        CommonTree key_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");

         pushMsg("specifying key property", state); 
        try {
            // HiveParser.g:1861:5: (key= StringLiteral -> ^( TOK_TABLEPROPERTY $key TOK_NULL ) )
            // HiveParser.g:1862:7: key= StringLiteral
            {
            key=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_keyProperty10962); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(key);


            // AST REWRITE
            // elements: key
            // token labels: key
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_key=new RewriteRuleTokenStream(adaptor,"token key",key);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1862:25: -> ^( TOK_TABLEPROPERTY $key TOK_NULL )
            {
                // HiveParser.g:1862:28: ^( TOK_TABLEPROPERTY $key TOK_NULL )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLEPROPERTY, "TOK_TABLEPROPERTY")
                , root_1);

                adaptor.addChild(root_1, stream_key.nextNode());

                adaptor.addChild(root_1, 
                (CommonTree)adaptor.create(TOK_NULL, "TOK_NULL")
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "keyProperty"


    public static class tableRowFormatFieldIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableRowFormatFieldIdentifier"
    // HiveParser.g:1865:1: tableRowFormatFieldIdentifier : KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )? -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? ) ;
    public final HiveParser.tableRowFormatFieldIdentifier_return tableRowFormatFieldIdentifier() throws RecognitionException {
        HiveParser.tableRowFormatFieldIdentifier_return retval = new HiveParser.tableRowFormatFieldIdentifier_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token fldIdnt=null;
        Token fldEscape=null;
        Token KW_FIELDS696=null;
        Token KW_TERMINATED697=null;
        Token KW_BY698=null;
        Token KW_ESCAPED699=null;
        Token KW_BY700=null;

        CommonTree fldIdnt_tree=null;
        CommonTree fldEscape_tree=null;
        CommonTree KW_FIELDS696_tree=null;
        CommonTree KW_TERMINATED697_tree=null;
        CommonTree KW_BY698_tree=null;
        CommonTree KW_ESCAPED699_tree=null;
        CommonTree KW_BY700_tree=null;
        RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_ESCAPED=new RewriteRuleTokenStream(adaptor,"token KW_ESCAPED");
        RewriteRuleTokenStream stream_KW_FIELDS=new RewriteRuleTokenStream(adaptor,"token KW_FIELDS");

         pushMsg("table row format's field separator", state); 
        try {
            // HiveParser.g:1868:5: ( KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )? -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? ) )
            // HiveParser.g:1869:7: KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )?
            {
            KW_FIELDS696=(Token)match(input,KW_FIELDS,FOLLOW_KW_FIELDS_in_tableRowFormatFieldIdentifier11006); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FIELDS.add(KW_FIELDS696);


            KW_TERMINATED697=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatFieldIdentifier11008); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TERMINATED.add(KW_TERMINATED697);


            KW_BY698=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier11010); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY698);


            fldIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier11014); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(fldIdnt);


            // HiveParser.g:1869:59: ( KW_ESCAPED KW_BY fldEscape= StringLiteral )?
            int alt206=2;
            int LA206_0 = input.LA(1);

            if ( (LA206_0==KW_ESCAPED) ) {
                alt206=1;
            }
            switch (alt206) {
                case 1 :
                    // HiveParser.g:1869:60: KW_ESCAPED KW_BY fldEscape= StringLiteral
                    {
                    KW_ESCAPED699=(Token)match(input,KW_ESCAPED,FOLLOW_KW_ESCAPED_in_tableRowFormatFieldIdentifier11017); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ESCAPED.add(KW_ESCAPED699);


                    KW_BY700=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier11019); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY700);


                    fldEscape=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier11023); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(fldEscape);


                    }
                    break;

            }


            // AST REWRITE
            // elements: fldEscape, fldIdnt
            // token labels: fldIdnt, fldEscape
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_fldIdnt=new RewriteRuleTokenStream(adaptor,"token fldIdnt",fldIdnt);
            RewriteRuleTokenStream stream_fldEscape=new RewriteRuleTokenStream(adaptor,"token fldEscape",fldEscape);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1870:5: -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? )
            {
                // HiveParser.g:1870:8: ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLEROWFORMATFIELD, "TOK_TABLEROWFORMATFIELD")
                , root_1);

                adaptor.addChild(root_1, stream_fldIdnt.nextNode());

                // HiveParser.g:1870:44: ( $fldEscape)?
                if ( stream_fldEscape.hasNext() ) {
                    adaptor.addChild(root_1, stream_fldEscape.nextNode());

                }
                stream_fldEscape.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableRowFormatFieldIdentifier"


    public static class tableRowFormatCollItemsIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableRowFormatCollItemsIdentifier"
    // HiveParser.g:1873:1: tableRowFormatCollItemsIdentifier : KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt) ;
    public final HiveParser.tableRowFormatCollItemsIdentifier_return tableRowFormatCollItemsIdentifier() throws RecognitionException {
        HiveParser.tableRowFormatCollItemsIdentifier_return retval = new HiveParser.tableRowFormatCollItemsIdentifier_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token collIdnt=null;
        Token KW_COLLECTION701=null;
        Token KW_ITEMS702=null;
        Token KW_TERMINATED703=null;
        Token KW_BY704=null;

        CommonTree collIdnt_tree=null;
        CommonTree KW_COLLECTION701_tree=null;
        CommonTree KW_ITEMS702_tree=null;
        CommonTree KW_TERMINATED703_tree=null;
        CommonTree KW_BY704_tree=null;
        RewriteRuleTokenStream stream_KW_COLLECTION=new RewriteRuleTokenStream(adaptor,"token KW_COLLECTION");
        RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
        RewriteRuleTokenStream stream_KW_ITEMS=new RewriteRuleTokenStream(adaptor,"token KW_ITEMS");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");

         pushMsg("table row format's column separator", state); 
        try {
            // HiveParser.g:1876:5: ( KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt) )
            // HiveParser.g:1877:7: KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral
            {
            KW_COLLECTION701=(Token)match(input,KW_COLLECTION,FOLLOW_KW_COLLECTION_in_tableRowFormatCollItemsIdentifier11075); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_COLLECTION.add(KW_COLLECTION701);


            KW_ITEMS702=(Token)match(input,KW_ITEMS,FOLLOW_KW_ITEMS_in_tableRowFormatCollItemsIdentifier11077); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ITEMS.add(KW_ITEMS702);


            KW_TERMINATED703=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatCollItemsIdentifier11079); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TERMINATED.add(KW_TERMINATED703);


            KW_BY704=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatCollItemsIdentifier11081); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY704);


            collIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatCollItemsIdentifier11085); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(collIdnt);


            // AST REWRITE
            // elements: collIdnt
            // token labels: collIdnt
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_collIdnt=new RewriteRuleTokenStream(adaptor,"token collIdnt",collIdnt);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1878:5: -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt)
            {
                // HiveParser.g:1878:8: ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLEROWFORMATCOLLITEMS, "TOK_TABLEROWFORMATCOLLITEMS")
                , root_1);

                adaptor.addChild(root_1, stream_collIdnt.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableRowFormatCollItemsIdentifier"


    public static class tableRowFormatMapKeysIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableRowFormatMapKeysIdentifier"
    // HiveParser.g:1881:1: tableRowFormatMapKeysIdentifier : KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt) ;
    public final HiveParser.tableRowFormatMapKeysIdentifier_return tableRowFormatMapKeysIdentifier() throws RecognitionException {
        HiveParser.tableRowFormatMapKeysIdentifier_return retval = new HiveParser.tableRowFormatMapKeysIdentifier_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token mapKeysIdnt=null;
        Token KW_MAP705=null;
        Token KW_KEYS706=null;
        Token KW_TERMINATED707=null;
        Token KW_BY708=null;

        CommonTree mapKeysIdnt_tree=null;
        CommonTree KW_MAP705_tree=null;
        CommonTree KW_KEYS706_tree=null;
        CommonTree KW_TERMINATED707_tree=null;
        CommonTree KW_BY708_tree=null;
        RewriteRuleTokenStream stream_KW_KEYS=new RewriteRuleTokenStream(adaptor,"token KW_KEYS");
        RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");

         pushMsg("table row format's map key separator", state); 
        try {
            // HiveParser.g:1884:5: ( KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt) )
            // HiveParser.g:1885:7: KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral
            {
            KW_MAP705=(Token)match(input,KW_MAP,FOLLOW_KW_MAP_in_tableRowFormatMapKeysIdentifier11131); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_MAP.add(KW_MAP705);


            KW_KEYS706=(Token)match(input,KW_KEYS,FOLLOW_KW_KEYS_in_tableRowFormatMapKeysIdentifier11133); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_KEYS.add(KW_KEYS706);


            KW_TERMINATED707=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatMapKeysIdentifier11135); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TERMINATED.add(KW_TERMINATED707);


            KW_BY708=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatMapKeysIdentifier11137); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY708);


            mapKeysIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatMapKeysIdentifier11141); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(mapKeysIdnt);


            // AST REWRITE
            // elements: mapKeysIdnt
            // token labels: mapKeysIdnt
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_mapKeysIdnt=new RewriteRuleTokenStream(adaptor,"token mapKeysIdnt",mapKeysIdnt);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1886:5: -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt)
            {
                // HiveParser.g:1886:8: ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLEROWFORMATMAPKEYS, "TOK_TABLEROWFORMATMAPKEYS")
                , root_1);

                adaptor.addChild(root_1, stream_mapKeysIdnt.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableRowFormatMapKeysIdentifier"


    public static class tableRowFormatLinesIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableRowFormatLinesIdentifier"
    // HiveParser.g:1889:1: tableRowFormatLinesIdentifier : KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATLINES $linesIdnt) ;
    public final HiveParser.tableRowFormatLinesIdentifier_return tableRowFormatLinesIdentifier() throws RecognitionException {
        HiveParser.tableRowFormatLinesIdentifier_return retval = new HiveParser.tableRowFormatLinesIdentifier_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token linesIdnt=null;
        Token KW_LINES709=null;
        Token KW_TERMINATED710=null;
        Token KW_BY711=null;

        CommonTree linesIdnt_tree=null;
        CommonTree KW_LINES709_tree=null;
        CommonTree KW_TERMINATED710_tree=null;
        CommonTree KW_BY711_tree=null;
        RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_LINES=new RewriteRuleTokenStream(adaptor,"token KW_LINES");

         pushMsg("table row format's line separator", state); 
        try {
            // HiveParser.g:1892:5: ( KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATLINES $linesIdnt) )
            // HiveParser.g:1893:7: KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral
            {
            KW_LINES709=(Token)match(input,KW_LINES,FOLLOW_KW_LINES_in_tableRowFormatLinesIdentifier11187); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_LINES.add(KW_LINES709);


            KW_TERMINATED710=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatLinesIdentifier11189); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TERMINATED.add(KW_TERMINATED710);


            KW_BY711=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatLinesIdentifier11191); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY711);


            linesIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatLinesIdentifier11195); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(linesIdnt);


            // AST REWRITE
            // elements: linesIdnt
            // token labels: linesIdnt
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_linesIdnt=new RewriteRuleTokenStream(adaptor,"token linesIdnt",linesIdnt);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1894:5: -> ^( TOK_TABLEROWFORMATLINES $linesIdnt)
            {
                // HiveParser.g:1894:8: ^( TOK_TABLEROWFORMATLINES $linesIdnt)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLEROWFORMATLINES, "TOK_TABLEROWFORMATLINES")
                , root_1);

                adaptor.addChild(root_1, stream_linesIdnt.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableRowFormatLinesIdentifier"


    public static class tableRowNullFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableRowNullFormat"
    // HiveParser.g:1897:1: tableRowNullFormat : KW_NULL KW_DEFINED KW_AS nullIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATNULL $nullIdnt) ;
    public final HiveParser.tableRowNullFormat_return tableRowNullFormat() throws RecognitionException {
        HiveParser.tableRowNullFormat_return retval = new HiveParser.tableRowNullFormat_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token nullIdnt=null;
        Token KW_NULL712=null;
        Token KW_DEFINED713=null;
        Token KW_AS714=null;

        CommonTree nullIdnt_tree=null;
        CommonTree KW_NULL712_tree=null;
        CommonTree KW_DEFINED713_tree=null;
        CommonTree KW_AS714_tree=null;
        RewriteRuleTokenStream stream_KW_NULL=new RewriteRuleTokenStream(adaptor,"token KW_NULL");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_DEFINED=new RewriteRuleTokenStream(adaptor,"token KW_DEFINED");

         pushMsg("table row format's null specifier", state); 
        try {
            // HiveParser.g:1900:5: ( KW_NULL KW_DEFINED KW_AS nullIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATNULL $nullIdnt) )
            // HiveParser.g:1901:7: KW_NULL KW_DEFINED KW_AS nullIdnt= StringLiteral
            {
            KW_NULL712=(Token)match(input,KW_NULL,FOLLOW_KW_NULL_in_tableRowNullFormat11241); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_NULL.add(KW_NULL712);


            KW_DEFINED713=(Token)match(input,KW_DEFINED,FOLLOW_KW_DEFINED_in_tableRowNullFormat11243); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DEFINED.add(KW_DEFINED713);


            KW_AS714=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableRowNullFormat11245); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS714);


            nullIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowNullFormat11249); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(nullIdnt);


            // AST REWRITE
            // elements: nullIdnt
            // token labels: nullIdnt
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_nullIdnt=new RewriteRuleTokenStream(adaptor,"token nullIdnt",nullIdnt);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1902:5: -> ^( TOK_TABLEROWFORMATNULL $nullIdnt)
            {
                // HiveParser.g:1902:8: ^( TOK_TABLEROWFORMATNULL $nullIdnt)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLEROWFORMATNULL, "TOK_TABLEROWFORMATNULL")
                , root_1);

                adaptor.addChild(root_1, stream_nullIdnt.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableRowNullFormat"


    public static class tableFileFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableFileFormat"
    // HiveParser.g:1904:1: tableFileFormat : ( ( KW_STORED KW_AS KW_INPUTFORMAT )=> KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) | KW_STORED KW_AS genericSpec= identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );
    public final HiveParser.tableFileFormat_return tableFileFormat() throws RecognitionException {
        HiveParser.tableFileFormat_return retval = new HiveParser.tableFileFormat_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token inFmt=null;
        Token outFmt=null;
        Token inDriver=null;
        Token outDriver=null;
        Token storageHandler=null;
        Token KW_STORED715=null;
        Token KW_AS716=null;
        Token KW_INPUTFORMAT717=null;
        Token KW_OUTPUTFORMAT718=null;
        Token KW_INPUTDRIVER719=null;
        Token KW_OUTPUTDRIVER720=null;
        Token KW_STORED721=null;
        Token KW_BY722=null;
        Token KW_WITH723=null;
        Token KW_SERDEPROPERTIES724=null;
        Token KW_STORED725=null;
        Token KW_AS726=null;
        HiveParser.tableProperties_return serdeprops =null;

        HiveParser_IdentifiersParser.identifier_return genericSpec =null;


        CommonTree inFmt_tree=null;
        CommonTree outFmt_tree=null;
        CommonTree inDriver_tree=null;
        CommonTree outDriver_tree=null;
        CommonTree storageHandler_tree=null;
        CommonTree KW_STORED715_tree=null;
        CommonTree KW_AS716_tree=null;
        CommonTree KW_INPUTFORMAT717_tree=null;
        CommonTree KW_OUTPUTFORMAT718_tree=null;
        CommonTree KW_INPUTDRIVER719_tree=null;
        CommonTree KW_OUTPUTDRIVER720_tree=null;
        CommonTree KW_STORED721_tree=null;
        CommonTree KW_BY722_tree=null;
        CommonTree KW_WITH723_tree=null;
        CommonTree KW_SERDEPROPERTIES724_tree=null;
        CommonTree KW_STORED725_tree=null;
        CommonTree KW_AS726_tree=null;
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleTokenStream stream_KW_INPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_INPUTFORMAT");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
        RewriteRuleTokenStream stream_KW_INPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_INPUTDRIVER");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_OUTPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTFORMAT");
        RewriteRuleTokenStream stream_KW_STORED=new RewriteRuleTokenStream(adaptor,"token KW_STORED");
        RewriteRuleTokenStream stream_KW_OUTPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTDRIVER");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
         pushMsg("table file format specification", state); 
        try {
            // HiveParser.g:1907:5: ( ( KW_STORED KW_AS KW_INPUTFORMAT )=> KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) | KW_STORED KW_AS genericSpec= identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) )
            int alt209=3;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==KW_STORED) ) {
                int LA209_1 = input.LA(2);

                if ( (LA209_1==KW_AS) ) {
                    int LA209_2 = input.LA(3);

                    if ( (LA209_2==KW_INPUTFORMAT) ) {
                        int LA209_4 = input.LA(4);

                        if ( (synpred14_HiveParser()) ) {
                            alt209=1;
                        }
                        else if ( (true) ) {
                            alt209=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 209, 4, input);

                            throw nvae;

                        }
                    }
                    else if ( ((LA209_2 >= Identifier && LA209_2 <= KW_ANALYZE)||(LA209_2 >= KW_ARCHIVE && LA209_2 <= KW_CASCADE)||LA209_2==KW_CHANGE||(LA209_2 >= KW_CLUSTER && LA209_2 <= KW_COLLECTION)||(LA209_2 >= KW_COLUMNS && LA209_2 <= KW_CONCATENATE)||(LA209_2 >= KW_CONTINUE && LA209_2 <= KW_CREATE)||LA209_2==KW_CUBE||(LA209_2 >= KW_CURRENT_DATE && LA209_2 <= KW_DATA)||(LA209_2 >= KW_DATABASES && LA209_2 <= KW_DISABLE)||(LA209_2 >= KW_DISTRIBUTE && LA209_2 <= KW_ELEM_TYPE)||LA209_2==KW_ENABLE||LA209_2==KW_ESCAPED||(LA209_2 >= KW_EXCLUSIVE && LA209_2 <= KW_EXPORT)||(LA209_2 >= KW_EXTERNAL && LA209_2 <= KW_FLOAT)||(LA209_2 >= KW_FOR && LA209_2 <= KW_FORMATTED)||LA209_2==KW_FULL||(LA209_2 >= KW_FUNCTIONS && LA209_2 <= KW_GROUPING)||(LA209_2 >= KW_HOLD_DDLTIME && LA209_2 <= KW_IDXPROPERTIES)||(LA209_2 >= KW_IGNORE && LA209_2 <= KW_INPUTDRIVER)||(LA209_2 >= KW_INSERT && LA209_2 <= KW_INTERSECT)||(LA209_2 >= KW_INTO && LA209_2 <= KW_JAR)||(LA209_2 >= KW_KEYS && LA209_2 <= KW_LEFT)||(LA209_2 >= KW_LIKE && LA209_2 <= KW_LONG)||(LA209_2 >= KW_MAPJOIN && LA209_2 <= KW_MONTH)||(LA209_2 >= KW_MSCK && LA209_2 <= KW_NOSCAN)||(LA209_2 >= KW_NO_DROP && LA209_2 <= KW_OFFLINE)||LA209_2==KW_OPTION||(LA209_2 >= KW_ORDER && LA209_2 <= KW_OUTPUTFORMAT)||(LA209_2 >= KW_OVERWRITE && LA209_2 <= KW_OWNER)||(LA209_2 >= KW_PARTITION && LA209_2 <= KW_PLUS)||(LA209_2 >= KW_PRETTY && LA209_2 <= KW_RECORDWRITER)||(LA209_2 >= KW_REGEXP && LA209_2 <= KW_SECOND)||(LA209_2 >= KW_SEMI && LA209_2 <= KW_TABLES)||(LA209_2 >= KW_TBLPROPERTIES && LA209_2 <= KW_TERMINATED)||(LA209_2 >= KW_TIMESTAMP && LA209_2 <= KW_TRANSACTIONS)||(LA209_2 >= KW_TRIGGER && LA209_2 <= KW_UNARCHIVE)||(LA209_2 >= KW_UNDO && LA209_2 <= KW_UNIONTYPE)||(LA209_2 >= KW_UNLOCK && LA209_2 <= KW_VALUE_TYPE)||LA209_2==KW_VIEW||LA209_2==KW_WHILE||(LA209_2 >= KW_WITH && LA209_2 <= KW_YEAR)) ) {
                        alt209=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 209, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA209_1==KW_BY) ) {
                    alt209=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 209, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);

                throw nvae;

            }
            switch (alt209) {
                case 1 :
                    // HiveParser.g:1908:7: ( KW_STORED KW_AS KW_INPUTFORMAT )=> KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
                    {
                    KW_STORED715=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat11304); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_STORED.add(KW_STORED715);


                    KW_AS716=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat11306); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS716);


                    KW_INPUTFORMAT717=(Token)match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_tableFileFormat11308); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_INPUTFORMAT.add(KW_INPUTFORMAT717);


                    inFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat11312); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(inFmt);


                    KW_OUTPUTFORMAT718=(Token)match(input,KW_OUTPUTFORMAT,FOLLOW_KW_OUTPUTFORMAT_in_tableFileFormat11314); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_OUTPUTFORMAT.add(KW_OUTPUTFORMAT718);


                    outFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat11318); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(outFmt);


                    // HiveParser.g:1908:131: ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
                    int alt207=2;
                    int LA207_0 = input.LA(1);

                    if ( (LA207_0==KW_INPUTDRIVER) ) {
                        alt207=1;
                    }
                    switch (alt207) {
                        case 1 :
                            // HiveParser.g:1908:132: KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral
                            {
                            KW_INPUTDRIVER719=(Token)match(input,KW_INPUTDRIVER,FOLLOW_KW_INPUTDRIVER_in_tableFileFormat11321); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_INPUTDRIVER.add(KW_INPUTDRIVER719);


                            inDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat11325); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_StringLiteral.add(inDriver);


                            KW_OUTPUTDRIVER720=(Token)match(input,KW_OUTPUTDRIVER,FOLLOW_KW_OUTPUTDRIVER_in_tableFileFormat11327); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_OUTPUTDRIVER.add(KW_OUTPUTDRIVER720);


                            outDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat11331); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_StringLiteral.add(outDriver);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: outFmt, outDriver, inFmt, inDriver
                    // token labels: inFmt, inDriver, outDriver, outFmt
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_inFmt=new RewriteRuleTokenStream(adaptor,"token inFmt",inFmt);
                    RewriteRuleTokenStream stream_inDriver=new RewriteRuleTokenStream(adaptor,"token inDriver",inDriver);
                    RewriteRuleTokenStream stream_outDriver=new RewriteRuleTokenStream(adaptor,"token outDriver",outDriver);
                    RewriteRuleTokenStream stream_outFmt=new RewriteRuleTokenStream(adaptor,"token outFmt",outFmt);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1909:7: -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
                    {
                        // HiveParser.g:1909:10: ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_TABLEFILEFORMAT, "TOK_TABLEFILEFORMAT")
                        , root_1);

                        adaptor.addChild(root_1, stream_inFmt.nextNode());

                        adaptor.addChild(root_1, stream_outFmt.nextNode());

                        // HiveParser.g:1909:48: ( $inDriver)?
                        if ( stream_inDriver.hasNext() ) {
                            adaptor.addChild(root_1, stream_inDriver.nextNode());

                        }
                        stream_inDriver.reset();

                        // HiveParser.g:1909:59: ( $outDriver)?
                        if ( stream_outDriver.hasNext() ) {
                            adaptor.addChild(root_1, stream_outDriver.nextNode());

                        }
                        stream_outDriver.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1910:9: KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
                    {
                    KW_STORED721=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat11369); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_STORED.add(KW_STORED721);


                    KW_BY722=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableFileFormat11371); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY722);


                    storageHandler=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat11375); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(storageHandler);


                    // HiveParser.g:1911:10: ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
                    int alt208=2;
                    int LA208_0 = input.LA(1);

                    if ( (LA208_0==KW_WITH) ) {
                        alt208=1;
                    }
                    switch (alt208) {
                        case 1 :
                            // HiveParser.g:1911:11: KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties
                            {
                            KW_WITH723=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_tableFileFormat11387); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH723);


                            KW_SERDEPROPERTIES724=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_tableFileFormat11389); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES724);


                            pushFollow(FOLLOW_tableProperties_in_tableFileFormat11393);
                            serdeprops=tableProperties();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tableProperties.add(serdeprops.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: storageHandler, serdeprops
                    // token labels: storageHandler
                    // rule labels: serdeprops, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_storageHandler=new RewriteRuleTokenStream(adaptor,"token storageHandler",storageHandler);
                    RewriteRuleSubtreeStream stream_serdeprops=new RewriteRuleSubtreeStream(adaptor,"rule serdeprops",serdeprops!=null?serdeprops.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1912:7: -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? )
                    {
                        // HiveParser.g:1912:10: ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_STORAGEHANDLER, "TOK_STORAGEHANDLER")
                        , root_1);

                        adaptor.addChild(root_1, stream_storageHandler.nextNode());

                        // HiveParser.g:1912:48: ( $serdeprops)?
                        if ( stream_serdeprops.hasNext() ) {
                            adaptor.addChild(root_1, stream_serdeprops.nextTree());

                        }
                        stream_serdeprops.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:1913:9: KW_STORED KW_AS genericSpec= identifier
                    {
                    KW_STORED725=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat11424); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_STORED.add(KW_STORED725);


                    KW_AS726=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat11426); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS726);


                    pushFollow(FOLLOW_identifier_in_tableFileFormat11430);
                    genericSpec=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(genericSpec.getTree());

                    // AST REWRITE
                    // elements: genericSpec
                    // token labels: 
                    // rule labels: genericSpec, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_genericSpec=new RewriteRuleSubtreeStream(adaptor,"rule genericSpec",genericSpec!=null?genericSpec.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1914:7: -> ^( TOK_FILEFORMAT_GENERIC $genericSpec)
                    {
                        // HiveParser.g:1914:10: ^( TOK_FILEFORMAT_GENERIC $genericSpec)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_FILEFORMAT_GENERIC, "TOK_FILEFORMAT_GENERIC")
                        , root_1);

                        adaptor.addChild(root_1, stream_genericSpec.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableFileFormat"


    public static class tableLocation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableLocation"
    // HiveParser.g:1917:1: tableLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_TABLELOCATION $locn) ;
    public final HiveParser.tableLocation_return tableLocation() throws RecognitionException {
        HiveParser.tableLocation_return retval = new HiveParser.tableLocation_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token locn=null;
        Token KW_LOCATION727=null;

        CommonTree locn_tree=null;
        CommonTree KW_LOCATION727_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

         pushMsg("table location specification", state); 
        try {
            // HiveParser.g:1920:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_TABLELOCATION $locn) )
            // HiveParser.g:1921:7: KW_LOCATION locn= StringLiteral
            {
            KW_LOCATION727=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_tableLocation11478); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_LOCATION.add(KW_LOCATION727);


            locn=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableLocation11482); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(locn);


            // AST REWRITE
            // elements: locn
            // token labels: locn
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1921:38: -> ^( TOK_TABLELOCATION $locn)
            {
                // HiveParser.g:1921:41: ^( TOK_TABLELOCATION $locn)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABLELOCATION, "TOK_TABLELOCATION")
                , root_1);

                adaptor.addChild(root_1, stream_locn.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableLocation"


    public static class columnNameTypeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameTypeList"
    // HiveParser.g:1924:1: columnNameTypeList : columnNameType ( COMMA columnNameType )* -> ^( TOK_TABCOLLIST ( columnNameType )+ ) ;
    public final HiveParser.columnNameTypeList_return columnNameTypeList() throws RecognitionException {
        HiveParser.columnNameTypeList_return retval = new HiveParser.columnNameTypeList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA729=null;
        HiveParser.columnNameType_return columnNameType728 =null;

        HiveParser.columnNameType_return columnNameType730 =null;


        CommonTree COMMA729_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameType");
         pushMsg("column name type list", state); 
        try {
            // HiveParser.g:1927:5: ( columnNameType ( COMMA columnNameType )* -> ^( TOK_TABCOLLIST ( columnNameType )+ ) )
            // HiveParser.g:1927:7: columnNameType ( COMMA columnNameType )*
            {
            pushFollow(FOLLOW_columnNameType_in_columnNameTypeList11518);
            columnNameType728=columnNameType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnNameType.add(columnNameType728.getTree());

            // HiveParser.g:1927:22: ( COMMA columnNameType )*
            loop210:
            do {
                int alt210=2;
                int LA210_0 = input.LA(1);

                if ( (LA210_0==COMMA) ) {
                    alt210=1;
                }


                switch (alt210) {
            	case 1 :
            	    // HiveParser.g:1927:23: COMMA columnNameType
            	    {
            	    COMMA729=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameTypeList11521); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA729);


            	    pushFollow(FOLLOW_columnNameType_in_columnNameTypeList11523);
            	    columnNameType730=columnNameType();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_columnNameType.add(columnNameType730.getTree());

            	    }
            	    break;

            	default :
            	    break loop210;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1927:46: -> ^( TOK_TABCOLLIST ( columnNameType )+ )
            {
                // HiveParser.g:1927:49: ^( TOK_TABCOLLIST ( columnNameType )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST")
                , root_1);

                if ( !(stream_columnNameType.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameType.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameType.nextTree());

                }
                stream_columnNameType.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameTypeList"


    public static class columnNameColonTypeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameColonTypeList"
    // HiveParser.g:1930:1: columnNameColonTypeList : columnNameColonType ( COMMA columnNameColonType )* -> ^( TOK_TABCOLLIST ( columnNameColonType )+ ) ;
    public final HiveParser.columnNameColonTypeList_return columnNameColonTypeList() throws RecognitionException {
        HiveParser.columnNameColonTypeList_return retval = new HiveParser.columnNameColonTypeList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA732=null;
        HiveParser.columnNameColonType_return columnNameColonType731 =null;

        HiveParser.columnNameColonType_return columnNameColonType733 =null;


        CommonTree COMMA732_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameColonType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameColonType");
         pushMsg("column name type list", state); 
        try {
            // HiveParser.g:1933:5: ( columnNameColonType ( COMMA columnNameColonType )* -> ^( TOK_TABCOLLIST ( columnNameColonType )+ ) )
            // HiveParser.g:1933:7: columnNameColonType ( COMMA columnNameColonType )*
            {
            pushFollow(FOLLOW_columnNameColonType_in_columnNameColonTypeList11561);
            columnNameColonType731=columnNameColonType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnNameColonType.add(columnNameColonType731.getTree());

            // HiveParser.g:1933:27: ( COMMA columnNameColonType )*
            loop211:
            do {
                int alt211=2;
                int LA211_0 = input.LA(1);

                if ( (LA211_0==COMMA) ) {
                    alt211=1;
                }


                switch (alt211) {
            	case 1 :
            	    // HiveParser.g:1933:28: COMMA columnNameColonType
            	    {
            	    COMMA732=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameColonTypeList11564); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA732);


            	    pushFollow(FOLLOW_columnNameColonType_in_columnNameColonTypeList11566);
            	    columnNameColonType733=columnNameColonType();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_columnNameColonType.add(columnNameColonType733.getTree());

            	    }
            	    break;

            	default :
            	    break loop211;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameColonType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1933:56: -> ^( TOK_TABCOLLIST ( columnNameColonType )+ )
            {
                // HiveParser.g:1933:59: ^( TOK_TABCOLLIST ( columnNameColonType )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST")
                , root_1);

                if ( !(stream_columnNameColonType.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameColonType.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameColonType.nextTree());

                }
                stream_columnNameColonType.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameColonTypeList"


    public static class columnNameList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameList"
    // HiveParser.g:1936:1: columnNameList : columnName ( COMMA columnName )* -> ^( TOK_TABCOLNAME ( columnName )+ ) ;
    public final HiveParser.columnNameList_return columnNameList() throws RecognitionException {
        HiveParser.columnNameList_return retval = new HiveParser.columnNameList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA735=null;
        HiveParser.columnName_return columnName734 =null;

        HiveParser.columnName_return columnName736 =null;


        CommonTree COMMA735_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnName=new RewriteRuleSubtreeStream(adaptor,"rule columnName");
         pushMsg("column name list", state); 
        try {
            // HiveParser.g:1939:5: ( columnName ( COMMA columnName )* -> ^( TOK_TABCOLNAME ( columnName )+ ) )
            // HiveParser.g:1939:7: columnName ( COMMA columnName )*
            {
            pushFollow(FOLLOW_columnName_in_columnNameList11604);
            columnName734=columnName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnName.add(columnName734.getTree());

            // HiveParser.g:1939:18: ( COMMA columnName )*
            loop212:
            do {
                int alt212=2;
                int LA212_0 = input.LA(1);

                if ( (LA212_0==COMMA) ) {
                    alt212=1;
                }


                switch (alt212) {
            	case 1 :
            	    // HiveParser.g:1939:19: COMMA columnName
            	    {
            	    COMMA735=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameList11607); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA735);


            	    pushFollow(FOLLOW_columnName_in_columnNameList11609);
            	    columnName736=columnName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_columnName.add(columnName736.getTree());

            	    }
            	    break;

            	default :
            	    break loop212;
                }
            } while (true);


            // AST REWRITE
            // elements: columnName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1939:38: -> ^( TOK_TABCOLNAME ( columnName )+ )
            {
                // HiveParser.g:1939:41: ^( TOK_TABCOLNAME ( columnName )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME")
                , root_1);

                if ( !(stream_columnName.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnName.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnName.nextTree());

                }
                stream_columnName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameList"


    public static class columnName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnName"
    // HiveParser.g:1942:1: columnName : identifier ;
    public final HiveParser.columnName_return columnName() throws RecognitionException {
        HiveParser.columnName_return retval = new HiveParser.columnName_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser_IdentifiersParser.identifier_return identifier737 =null;



         pushMsg("column name", state); 
        try {
            // HiveParser.g:1945:5: ( identifier )
            // HiveParser.g:1946:7: identifier
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_columnName11653);
            identifier737=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier737.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnName"


    public static class columnNameOrderList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameOrderList"
    // HiveParser.g:1949:1: columnNameOrderList : columnNameOrder ( COMMA columnNameOrder )* -> ^( TOK_TABCOLNAME ( columnNameOrder )+ ) ;
    public final HiveParser.columnNameOrderList_return columnNameOrderList() throws RecognitionException {
        HiveParser.columnNameOrderList_return retval = new HiveParser.columnNameOrderList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA739=null;
        HiveParser.columnNameOrder_return columnNameOrder738 =null;

        HiveParser.columnNameOrder_return columnNameOrder740 =null;


        CommonTree COMMA739_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameOrder=new RewriteRuleSubtreeStream(adaptor,"rule columnNameOrder");
         pushMsg("column name order list", state); 
        try {
            // HiveParser.g:1952:5: ( columnNameOrder ( COMMA columnNameOrder )* -> ^( TOK_TABCOLNAME ( columnNameOrder )+ ) )
            // HiveParser.g:1952:7: columnNameOrder ( COMMA columnNameOrder )*
            {
            pushFollow(FOLLOW_columnNameOrder_in_columnNameOrderList11680);
            columnNameOrder738=columnNameOrder();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnNameOrder.add(columnNameOrder738.getTree());

            // HiveParser.g:1952:23: ( COMMA columnNameOrder )*
            loop213:
            do {
                int alt213=2;
                int LA213_0 = input.LA(1);

                if ( (LA213_0==COMMA) ) {
                    alt213=1;
                }


                switch (alt213) {
            	case 1 :
            	    // HiveParser.g:1952:24: COMMA columnNameOrder
            	    {
            	    COMMA739=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameOrderList11683); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA739);


            	    pushFollow(FOLLOW_columnNameOrder_in_columnNameOrderList11685);
            	    columnNameOrder740=columnNameOrder();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_columnNameOrder.add(columnNameOrder740.getTree());

            	    }
            	    break;

            	default :
            	    break loop213;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameOrder
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1952:48: -> ^( TOK_TABCOLNAME ( columnNameOrder )+ )
            {
                // HiveParser.g:1952:51: ^( TOK_TABCOLNAME ( columnNameOrder )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME")
                , root_1);

                if ( !(stream_columnNameOrder.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameOrder.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameOrder.nextTree());

                }
                stream_columnNameOrder.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameOrderList"


    public static class skewedValueElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "skewedValueElement"
    // HiveParser.g:1955:1: skewedValueElement : ( skewedColumnValues | skewedColumnValuePairList );
    public final HiveParser.skewedValueElement_return skewedValueElement() throws RecognitionException {
        HiveParser.skewedValueElement_return retval = new HiveParser.skewedValueElement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.skewedColumnValues_return skewedColumnValues741 =null;

        HiveParser.skewedColumnValuePairList_return skewedColumnValuePairList742 =null;



         pushMsg("skewed value element", state); 
        try {
            // HiveParser.g:1958:5: ( skewedColumnValues | skewedColumnValuePairList )
            int alt214=2;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==BigintLiteral||LA214_0==CharSetName||LA214_0==DecimalLiteral||(LA214_0 >= KW_CURRENT_DATE && LA214_0 <= KW_CURRENT_TIMESTAMP)||LA214_0==KW_DATE||LA214_0==KW_FALSE||LA214_0==KW_INTERVAL||LA214_0==KW_TIMESTAMP||LA214_0==KW_TRUE||LA214_0==Number||(LA214_0 >= SmallintLiteral && LA214_0 <= StringLiteral)||LA214_0==TinyintLiteral) ) {
                alt214=1;
            }
            else if ( (LA214_0==LPAREN) ) {
                alt214=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 214, 0, input);

                throw nvae;

            }
            switch (alt214) {
                case 1 :
                    // HiveParser.g:1959:7: skewedColumnValues
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_skewedColumnValues_in_skewedValueElement11729);
                    skewedColumnValues741=skewedColumnValues();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, skewedColumnValues741.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:1960:8: skewedColumnValuePairList
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_skewedColumnValuePairList_in_skewedValueElement11738);
                    skewedColumnValuePairList742=skewedColumnValuePairList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, skewedColumnValuePairList742.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "skewedValueElement"


    public static class skewedColumnValuePairList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "skewedColumnValuePairList"
    // HiveParser.g:1963:1: skewedColumnValuePairList : skewedColumnValuePair ( COMMA skewedColumnValuePair )* -> ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ ) ;
    public final HiveParser.skewedColumnValuePairList_return skewedColumnValuePairList() throws RecognitionException {
        HiveParser.skewedColumnValuePairList_return retval = new HiveParser.skewedColumnValuePairList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA744=null;
        HiveParser.skewedColumnValuePair_return skewedColumnValuePair743 =null;

        HiveParser.skewedColumnValuePair_return skewedColumnValuePair745 =null;


        CommonTree COMMA744_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_skewedColumnValuePair=new RewriteRuleSubtreeStream(adaptor,"rule skewedColumnValuePair");
         pushMsg("column value pair list", state); 
        try {
            // HiveParser.g:1966:5: ( skewedColumnValuePair ( COMMA skewedColumnValuePair )* -> ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ ) )
            // HiveParser.g:1966:7: skewedColumnValuePair ( COMMA skewedColumnValuePair )*
            {
            pushFollow(FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList11765);
            skewedColumnValuePair743=skewedColumnValuePair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_skewedColumnValuePair.add(skewedColumnValuePair743.getTree());

            // HiveParser.g:1966:29: ( COMMA skewedColumnValuePair )*
            loop215:
            do {
                int alt215=2;
                int LA215_0 = input.LA(1);

                if ( (LA215_0==COMMA) ) {
                    alt215=1;
                }


                switch (alt215) {
            	case 1 :
            	    // HiveParser.g:1966:30: COMMA skewedColumnValuePair
            	    {
            	    COMMA744=(Token)match(input,COMMA,FOLLOW_COMMA_in_skewedColumnValuePairList11768); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA744);


            	    pushFollow(FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList11770);
            	    skewedColumnValuePair745=skewedColumnValuePair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_skewedColumnValuePair.add(skewedColumnValuePair745.getTree());

            	    }
            	    break;

            	default :
            	    break loop215;
                }
            } while (true);


            // AST REWRITE
            // elements: skewedColumnValuePair
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1966:60: -> ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ )
            {
                // HiveParser.g:1966:63: ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOLVALUE_PAIR, "TOK_TABCOLVALUE_PAIR")
                , root_1);

                if ( !(stream_skewedColumnValuePair.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_skewedColumnValuePair.hasNext() ) {
                    adaptor.addChild(root_1, stream_skewedColumnValuePair.nextTree());

                }
                stream_skewedColumnValuePair.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "skewedColumnValuePairList"


    public static class skewedColumnValuePair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "skewedColumnValuePair"
    // HiveParser.g:1969:1: skewedColumnValuePair : LPAREN colValues= skewedColumnValues RPAREN -> ^( TOK_TABCOLVALUES $colValues) ;
    public final HiveParser.skewedColumnValuePair_return skewedColumnValuePair() throws RecognitionException {
        HiveParser.skewedColumnValuePair_return retval = new HiveParser.skewedColumnValuePair_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token LPAREN746=null;
        Token RPAREN747=null;
        HiveParser.skewedColumnValues_return colValues =null;


        CommonTree LPAREN746_tree=null;
        CommonTree RPAREN747_tree=null;
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_skewedColumnValues=new RewriteRuleSubtreeStream(adaptor,"rule skewedColumnValues");
         pushMsg("column value pair", state); 
        try {
            // HiveParser.g:1972:5: ( LPAREN colValues= skewedColumnValues RPAREN -> ^( TOK_TABCOLVALUES $colValues) )
            // HiveParser.g:1973:7: LPAREN colValues= skewedColumnValues RPAREN
            {
            LPAREN746=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_skewedColumnValuePair11814); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN746);


            pushFollow(FOLLOW_skewedColumnValues_in_skewedColumnValuePair11818);
            colValues=skewedColumnValues();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_skewedColumnValues.add(colValues.getTree());

            RPAREN747=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_skewedColumnValuePair11820); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN747);


            // AST REWRITE
            // elements: colValues
            // token labels: 
            // rule labels: colValues, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_colValues=new RewriteRuleSubtreeStream(adaptor,"rule colValues",colValues!=null?colValues.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1974:7: -> ^( TOK_TABCOLVALUES $colValues)
            {
                // HiveParser.g:1974:10: ^( TOK_TABCOLVALUES $colValues)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOLVALUES, "TOK_TABCOLVALUES")
                , root_1);

                adaptor.addChild(root_1, stream_colValues.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "skewedColumnValuePair"


    public static class skewedColumnValues_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "skewedColumnValues"
    // HiveParser.g:1977:1: skewedColumnValues : skewedColumnValue ( COMMA skewedColumnValue )* -> ^( TOK_TABCOLVALUE ( skewedColumnValue )+ ) ;
    public final HiveParser.skewedColumnValues_return skewedColumnValues() throws RecognitionException {
        HiveParser.skewedColumnValues_return retval = new HiveParser.skewedColumnValues_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA749=null;
        HiveParser.skewedColumnValue_return skewedColumnValue748 =null;

        HiveParser.skewedColumnValue_return skewedColumnValue750 =null;


        CommonTree COMMA749_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_skewedColumnValue=new RewriteRuleSubtreeStream(adaptor,"rule skewedColumnValue");
         pushMsg("column values", state); 
        try {
            // HiveParser.g:1980:5: ( skewedColumnValue ( COMMA skewedColumnValue )* -> ^( TOK_TABCOLVALUE ( skewedColumnValue )+ ) )
            // HiveParser.g:1980:7: skewedColumnValue ( COMMA skewedColumnValue )*
            {
            pushFollow(FOLLOW_skewedColumnValue_in_skewedColumnValues11862);
            skewedColumnValue748=skewedColumnValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_skewedColumnValue.add(skewedColumnValue748.getTree());

            // HiveParser.g:1980:25: ( COMMA skewedColumnValue )*
            loop216:
            do {
                int alt216=2;
                int LA216_0 = input.LA(1);

                if ( (LA216_0==COMMA) ) {
                    alt216=1;
                }


                switch (alt216) {
            	case 1 :
            	    // HiveParser.g:1980:26: COMMA skewedColumnValue
            	    {
            	    COMMA749=(Token)match(input,COMMA,FOLLOW_COMMA_in_skewedColumnValues11865); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA749);


            	    pushFollow(FOLLOW_skewedColumnValue_in_skewedColumnValues11867);
            	    skewedColumnValue750=skewedColumnValue();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_skewedColumnValue.add(skewedColumnValue750.getTree());

            	    }
            	    break;

            	default :
            	    break loop216;
                }
            } while (true);


            // AST REWRITE
            // elements: skewedColumnValue
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1980:52: -> ^( TOK_TABCOLVALUE ( skewedColumnValue )+ )
            {
                // HiveParser.g:1980:55: ^( TOK_TABCOLVALUE ( skewedColumnValue )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOLVALUE, "TOK_TABCOLVALUE")
                , root_1);

                if ( !(stream_skewedColumnValue.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_skewedColumnValue.hasNext() ) {
                    adaptor.addChild(root_1, stream_skewedColumnValue.nextTree());

                }
                stream_skewedColumnValue.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "skewedColumnValues"


    public static class skewedColumnValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "skewedColumnValue"
    // HiveParser.g:1983:1: skewedColumnValue : constant ;
    public final HiveParser.skewedColumnValue_return skewedColumnValue() throws RecognitionException {
        HiveParser.skewedColumnValue_return retval = new HiveParser.skewedColumnValue_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser_IdentifiersParser.constant_return constant751 =null;



         pushMsg("column value", state); 
        try {
            // HiveParser.g:1986:5: ( constant )
            // HiveParser.g:1987:7: constant
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_constant_in_skewedColumnValue11911);
            constant751=constant();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constant751.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "skewedColumnValue"


    public static class skewedValueLocationElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "skewedValueLocationElement"
    // HiveParser.g:1990:1: skewedValueLocationElement : ( skewedColumnValue | skewedColumnValuePair );
    public final HiveParser.skewedValueLocationElement_return skewedValueLocationElement() throws RecognitionException {
        HiveParser.skewedValueLocationElement_return retval = new HiveParser.skewedValueLocationElement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.skewedColumnValue_return skewedColumnValue752 =null;

        HiveParser.skewedColumnValuePair_return skewedColumnValuePair753 =null;



         pushMsg("skewed value location element", state); 
        try {
            // HiveParser.g:1993:5: ( skewedColumnValue | skewedColumnValuePair )
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==BigintLiteral||LA217_0==CharSetName||LA217_0==DecimalLiteral||(LA217_0 >= KW_CURRENT_DATE && LA217_0 <= KW_CURRENT_TIMESTAMP)||LA217_0==KW_DATE||LA217_0==KW_FALSE||LA217_0==KW_INTERVAL||LA217_0==KW_TIMESTAMP||LA217_0==KW_TRUE||LA217_0==Number||(LA217_0 >= SmallintLiteral && LA217_0 <= StringLiteral)||LA217_0==TinyintLiteral) ) {
                alt217=1;
            }
            else if ( (LA217_0==LPAREN) ) {
                alt217=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 217, 0, input);

                throw nvae;

            }
            switch (alt217) {
                case 1 :
                    // HiveParser.g:1994:7: skewedColumnValue
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_skewedColumnValue_in_skewedValueLocationElement11944);
                    skewedColumnValue752=skewedColumnValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, skewedColumnValue752.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:1995:8: skewedColumnValuePair
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_skewedColumnValuePair_in_skewedValueLocationElement11953);
                    skewedColumnValuePair753=skewedColumnValuePair();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, skewedColumnValuePair753.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "skewedValueLocationElement"


    public static class columnNameOrder_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameOrder"
    // HiveParser.g:1998:1: columnNameOrder : identifier (asc= KW_ASC |desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC identifier ) -> ^( TOK_TABSORTCOLNAMEDESC identifier ) ;
    public final HiveParser.columnNameOrder_return columnNameOrder() throws RecognitionException {
        HiveParser.columnNameOrder_return retval = new HiveParser.columnNameOrder_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token asc=null;
        Token desc=null;
        HiveParser_IdentifiersParser.identifier_return identifier754 =null;


        CommonTree asc_tree=null;
        CommonTree desc_tree=null;
        RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
        RewriteRuleTokenStream stream_KW_ASC=new RewriteRuleTokenStream(adaptor,"token KW_ASC");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
         pushMsg("column name order", state); 
        try {
            // HiveParser.g:2001:5: ( identifier (asc= KW_ASC |desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC identifier ) -> ^( TOK_TABSORTCOLNAMEDESC identifier ) )
            // HiveParser.g:2001:7: identifier (asc= KW_ASC |desc= KW_DESC )?
            {
            pushFollow(FOLLOW_identifier_in_columnNameOrder11980);
            identifier754=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(identifier754.getTree());

            // HiveParser.g:2001:18: (asc= KW_ASC |desc= KW_DESC )?
            int alt218=3;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==KW_ASC) ) {
                alt218=1;
            }
            else if ( (LA218_0==KW_DESC) ) {
                alt218=2;
            }
            switch (alt218) {
                case 1 :
                    // HiveParser.g:2001:19: asc= KW_ASC
                    {
                    asc=(Token)match(input,KW_ASC,FOLLOW_KW_ASC_in_columnNameOrder11985); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ASC.add(asc);


                    }
                    break;
                case 2 :
                    // HiveParser.g:2001:32: desc= KW_DESC
                    {
                    desc=(Token)match(input,KW_DESC,FOLLOW_KW_DESC_in_columnNameOrder11991); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DESC.add(desc);


                    }
                    break;

            }


            // AST REWRITE
            // elements: identifier, identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2002:5: -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC identifier )
            if (desc == null) {
                // HiveParser.g:2002:25: ^( TOK_TABSORTCOLNAMEASC identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC")
                , root_1);

                adaptor.addChild(root_1, stream_identifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2003:5: -> ^( TOK_TABSORTCOLNAMEDESC identifier )
            {
                // HiveParser.g:2003:25: ^( TOK_TABSORTCOLNAMEDESC identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC")
                , root_1);

                adaptor.addChild(root_1, stream_identifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameOrder"


    public static class columnNameCommentList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameCommentList"
    // HiveParser.g:2006:1: columnNameCommentList : columnNameComment ( COMMA columnNameComment )* -> ^( TOK_TABCOLNAME ( columnNameComment )+ ) ;
    public final HiveParser.columnNameCommentList_return columnNameCommentList() throws RecognitionException {
        HiveParser.columnNameCommentList_return retval = new HiveParser.columnNameCommentList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA756=null;
        HiveParser.columnNameComment_return columnNameComment755 =null;

        HiveParser.columnNameComment_return columnNameComment757 =null;


        CommonTree COMMA756_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameComment=new RewriteRuleSubtreeStream(adaptor,"rule columnNameComment");
         pushMsg("column name comment list", state); 
        try {
            // HiveParser.g:2009:5: ( columnNameComment ( COMMA columnNameComment )* -> ^( TOK_TABCOLNAME ( columnNameComment )+ ) )
            // HiveParser.g:2009:7: columnNameComment ( COMMA columnNameComment )*
            {
            pushFollow(FOLLOW_columnNameComment_in_columnNameCommentList12063);
            columnNameComment755=columnNameComment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnNameComment.add(columnNameComment755.getTree());

            // HiveParser.g:2009:25: ( COMMA columnNameComment )*
            loop219:
            do {
                int alt219=2;
                int LA219_0 = input.LA(1);

                if ( (LA219_0==COMMA) ) {
                    alt219=1;
                }


                switch (alt219) {
            	case 1 :
            	    // HiveParser.g:2009:26: COMMA columnNameComment
            	    {
            	    COMMA756=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameCommentList12066); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA756);


            	    pushFollow(FOLLOW_columnNameComment_in_columnNameCommentList12068);
            	    columnNameComment757=columnNameComment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_columnNameComment.add(columnNameComment757.getTree());

            	    }
            	    break;

            	default :
            	    break loop219;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameComment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2009:52: -> ^( TOK_TABCOLNAME ( columnNameComment )+ )
            {
                // HiveParser.g:2009:55: ^( TOK_TABCOLNAME ( columnNameComment )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME")
                , root_1);

                if ( !(stream_columnNameComment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameComment.nextTree());

                }
                stream_columnNameComment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameCommentList"


    public static class columnNameComment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameComment"
    // HiveParser.g:2012:1: columnNameComment : colName= identifier ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? ) ;
    public final HiveParser.columnNameComment_return columnNameComment() throws RecognitionException {
        HiveParser.columnNameComment_return retval = new HiveParser.columnNameComment_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token comment=null;
        Token KW_COMMENT758=null;
        HiveParser_IdentifiersParser.identifier_return colName =null;


        CommonTree comment_tree=null;
        CommonTree KW_COMMENT758_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
         pushMsg("column name comment", state); 
        try {
            // HiveParser.g:2015:5: (colName= identifier ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? ) )
            // HiveParser.g:2015:7: colName= identifier ( KW_COMMENT comment= StringLiteral )?
            {
            pushFollow(FOLLOW_identifier_in_columnNameComment12108);
            colName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());

            // HiveParser.g:2015:26: ( KW_COMMENT comment= StringLiteral )?
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==KW_COMMENT) ) {
                alt220=1;
            }
            switch (alt220) {
                case 1 :
                    // HiveParser.g:2015:27: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT758=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameComment12111); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT758);


                    comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameComment12115); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(comment);


                    }
                    break;

            }


            // AST REWRITE
            // elements: colName, comment
            // token labels: comment
            // rule labels: colName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2016:5: -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? )
            {
                // HiveParser.g:2016:8: ^( TOK_TABCOL $colName TOK_NULL ( $comment)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOL, "TOK_TABCOL")
                , root_1);

                adaptor.addChild(root_1, stream_colName.nextTree());

                adaptor.addChild(root_1, 
                (CommonTree)adaptor.create(TOK_NULL, "TOK_NULL")
                );

                // HiveParser.g:2016:40: ( $comment)?
                if ( stream_comment.hasNext() ) {
                    adaptor.addChild(root_1, stream_comment.nextNode());

                }
                stream_comment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameComment"


    public static class columnRefOrder_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnRefOrder"
    // HiveParser.g:2019:1: columnRefOrder : expression (asc= KW_ASC |desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC expression ) -> ^( TOK_TABSORTCOLNAMEDESC expression ) ;
    public final HiveParser.columnRefOrder_return columnRefOrder() throws RecognitionException {
        HiveParser.columnRefOrder_return retval = new HiveParser.columnRefOrder_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token asc=null;
        Token desc=null;
        HiveParser_IdentifiersParser.expression_return expression759 =null;


        CommonTree asc_tree=null;
        CommonTree desc_tree=null;
        RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
        RewriteRuleTokenStream stream_KW_ASC=new RewriteRuleTokenStream(adaptor,"token KW_ASC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         pushMsg("column order", state); 
        try {
            // HiveParser.g:2022:5: ( expression (asc= KW_ASC |desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC expression ) -> ^( TOK_TABSORTCOLNAMEDESC expression ) )
            // HiveParser.g:2022:7: expression (asc= KW_ASC |desc= KW_DESC )?
            {
            pushFollow(FOLLOW_expression_in_columnRefOrder12163);
            expression759=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression759.getTree());

            // HiveParser.g:2022:18: (asc= KW_ASC |desc= KW_DESC )?
            int alt221=3;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==KW_ASC) ) {
                alt221=1;
            }
            else if ( (LA221_0==KW_DESC) ) {
                alt221=2;
            }
            switch (alt221) {
                case 1 :
                    // HiveParser.g:2022:19: asc= KW_ASC
                    {
                    asc=(Token)match(input,KW_ASC,FOLLOW_KW_ASC_in_columnRefOrder12168); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ASC.add(asc);


                    }
                    break;
                case 2 :
                    // HiveParser.g:2022:32: desc= KW_DESC
                    {
                    desc=(Token)match(input,KW_DESC,FOLLOW_KW_DESC_in_columnRefOrder12174); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DESC.add(desc);


                    }
                    break;

            }


            // AST REWRITE
            // elements: expression, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2023:5: -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC expression )
            if (desc == null) {
                // HiveParser.g:2023:25: ^( TOK_TABSORTCOLNAMEASC expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC")
                , root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2024:5: -> ^( TOK_TABSORTCOLNAMEDESC expression )
            {
                // HiveParser.g:2024:25: ^( TOK_TABSORTCOLNAMEDESC expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC")
                , root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnRefOrder"


    public static class columnNameType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameType"
    // HiveParser.g:2027:1: columnNameType : colName= identifier colType ( KW_COMMENT comment= StringLiteral )? -> {containExcludedCharForCreateTableColumnName($colName.text)}? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) ;
    public final HiveParser.columnNameType_return columnNameType() throws RecognitionException {
        HiveParser.columnNameType_return retval = new HiveParser.columnNameType_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token comment=null;
        Token KW_COMMENT761=null;
        HiveParser_IdentifiersParser.identifier_return colName =null;

        HiveParser.colType_return colType760 =null;


        CommonTree comment_tree=null;
        CommonTree KW_COMMENT761_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
         pushMsg("column specification", state); 
        try {
            // HiveParser.g:2030:5: (colName= identifier colType ( KW_COMMENT comment= StringLiteral )? -> {containExcludedCharForCreateTableColumnName($colName.text)}? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) )
            // HiveParser.g:2030:7: colName= identifier colType ( KW_COMMENT comment= StringLiteral )?
            {
            pushFollow(FOLLOW_identifier_in_columnNameType12248);
            colName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());

            pushFollow(FOLLOW_colType_in_columnNameType12250);
            colType760=colType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_colType.add(colType760.getTree());

            // HiveParser.g:2030:34: ( KW_COMMENT comment= StringLiteral )?
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==KW_COMMENT) ) {
                alt222=1;
            }
            switch (alt222) {
                case 1 :
                    // HiveParser.g:2030:35: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT761=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameType12253); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT761);


                    comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameType12257); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(comment);


                    }
                    break;

            }


            // AST REWRITE
            // elements: colName, colType, colName, colType, comment
            // token labels: comment
            // rule labels: colName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2031:5: -> {containExcludedCharForCreateTableColumnName($colName.text)}?
            if (containExcludedCharForCreateTableColumnName((colName!=null?input.toString(colName.start,colName.stop):null))) {
                adaptor.addChild(root_0, throwColumnNameException());

            }

            else // 2032:5: -> {$comment == null}? ^( TOK_TABCOL $colName colType )
            if (comment == null) {
                // HiveParser.g:2032:28: ^( TOK_TABCOL $colName colType )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOL, "TOK_TABCOL")
                , root_1);

                adaptor.addChild(root_1, stream_colName.nextTree());

                adaptor.addChild(root_1, stream_colType.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2033:5: -> ^( TOK_TABCOL $colName colType $comment)
            {
                // HiveParser.g:2033:28: ^( TOK_TABCOL $colName colType $comment)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOL, "TOK_TABCOL")
                , root_1);

                adaptor.addChild(root_1, stream_colName.nextTree());

                adaptor.addChild(root_1, stream_colType.nextTree());

                adaptor.addChild(root_1, stream_comment.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameType"


    public static class columnNameColonType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameColonType"
    // HiveParser.g:2036:1: columnNameColonType : colName= identifier COLON colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) ;
    public final HiveParser.columnNameColonType_return columnNameColonType() throws RecognitionException {
        HiveParser.columnNameColonType_return retval = new HiveParser.columnNameColonType_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token comment=null;
        Token COLON762=null;
        Token KW_COMMENT764=null;
        HiveParser_IdentifiersParser.identifier_return colName =null;

        HiveParser.colType_return colType763 =null;


        CommonTree comment_tree=null;
        CommonTree COLON762_tree=null;
        CommonTree KW_COMMENT764_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
         pushMsg("column specification", state); 
        try {
            // HiveParser.g:2039:5: (colName= identifier COLON colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) )
            // HiveParser.g:2039:7: colName= identifier COLON colType ( KW_COMMENT comment= StringLiteral )?
            {
            pushFollow(FOLLOW_identifier_in_columnNameColonType12353);
            colName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());

            COLON762=(Token)match(input,COLON,FOLLOW_COLON_in_columnNameColonType12355); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON762);


            pushFollow(FOLLOW_colType_in_columnNameColonType12357);
            colType763=colType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_colType.add(colType763.getTree());

            // HiveParser.g:2039:40: ( KW_COMMENT comment= StringLiteral )?
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==KW_COMMENT) ) {
                alt223=1;
            }
            switch (alt223) {
                case 1 :
                    // HiveParser.g:2039:41: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT764=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameColonType12360); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT764);


                    comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameColonType12364); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(comment);


                    }
                    break;

            }


            // AST REWRITE
            // elements: colName, colName, colType, colType, comment
            // token labels: comment
            // rule labels: colName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2040:5: -> {$comment == null}? ^( TOK_TABCOL $colName colType )
            if (comment == null) {
                // HiveParser.g:2040:28: ^( TOK_TABCOL $colName colType )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOL, "TOK_TABCOL")
                , root_1);

                adaptor.addChild(root_1, stream_colName.nextTree());

                adaptor.addChild(root_1, stream_colType.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2041:5: -> ^( TOK_TABCOL $colName colType $comment)
            {
                // HiveParser.g:2041:28: ^( TOK_TABCOL $colName colType $comment)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_TABCOL, "TOK_TABCOL")
                , root_1);

                adaptor.addChild(root_1, stream_colName.nextTree());

                adaptor.addChild(root_1, stream_colType.nextTree());

                adaptor.addChild(root_1, stream_comment.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameColonType"


    public static class colType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "colType"
    // HiveParser.g:2044:1: colType : type ;
    public final HiveParser.colType_return colType() throws RecognitionException {
        HiveParser.colType_return retval = new HiveParser.colType_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.type_return type765 =null;



         pushMsg("column type", state); 
        try {
            // HiveParser.g:2047:5: ( type )
            // HiveParser.g:2047:7: type
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_type_in_colType12448);
            type765=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type765.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "colType"


    public static class colTypeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "colTypeList"
    // HiveParser.g:2050:1: colTypeList : colType ( COMMA colType )* -> ^( TOK_COLTYPELIST ( colType )+ ) ;
    public final HiveParser.colTypeList_return colTypeList() throws RecognitionException {
        HiveParser.colTypeList_return retval = new HiveParser.colTypeList_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token COMMA767=null;
        HiveParser.colType_return colType766 =null;

        HiveParser.colType_return colType768 =null;


        CommonTree COMMA767_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
         pushMsg("column type list", state); 
        try {
            // HiveParser.g:2053:5: ( colType ( COMMA colType )* -> ^( TOK_COLTYPELIST ( colType )+ ) )
            // HiveParser.g:2053:7: colType ( COMMA colType )*
            {
            pushFollow(FOLLOW_colType_in_colTypeList12475);
            colType766=colType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_colType.add(colType766.getTree());

            // HiveParser.g:2053:15: ( COMMA colType )*
            loop224:
            do {
                int alt224=2;
                int LA224_0 = input.LA(1);

                if ( (LA224_0==COMMA) ) {
                    alt224=1;
                }


                switch (alt224) {
            	case 1 :
            	    // HiveParser.g:2053:16: COMMA colType
            	    {
            	    COMMA767=(Token)match(input,COMMA,FOLLOW_COMMA_in_colTypeList12478); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA767);


            	    pushFollow(FOLLOW_colType_in_colTypeList12480);
            	    colType768=colType();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_colType.add(colType768.getTree());

            	    }
            	    break;

            	default :
            	    break loop224;
                }
            } while (true);


            // AST REWRITE
            // elements: colType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2053:32: -> ^( TOK_COLTYPELIST ( colType )+ )
            {
                // HiveParser.g:2053:35: ^( TOK_COLTYPELIST ( colType )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_COLTYPELIST, "TOK_COLTYPELIST")
                , root_1);

                if ( !(stream_colType.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_colType.hasNext() ) {
                    adaptor.addChild(root_1, stream_colType.nextTree());

                }
                stream_colType.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "colTypeList"


    public static class type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type"
    // HiveParser.g:2056:1: type : ( primitiveType | listType | structType | mapType | unionType );
    public final HiveParser.type_return type() throws RecognitionException {
        HiveParser.type_return retval = new HiveParser.type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.primitiveType_return primitiveType769 =null;

        HiveParser.listType_return listType770 =null;

        HiveParser.structType_return structType771 =null;

        HiveParser.mapType_return mapType772 =null;

        HiveParser.unionType_return unionType773 =null;



        try {
            // HiveParser.g:2057:5: ( primitiveType | listType | structType | mapType | unionType )
            int alt225=5;
            switch ( input.LA(1) ) {
            case KW_BIGINT:
            case KW_BINARY:
            case KW_BOOLEAN:
            case KW_CHAR:
            case KW_DATE:
            case KW_DATETIME:
            case KW_DECIMAL:
            case KW_DOUBLE:
            case KW_FLOAT:
            case KW_INT:
            case KW_SMALLINT:
            case KW_STRING:
            case KW_TIMESTAMP:
            case KW_TINYINT:
            case KW_VARCHAR:
                {
                alt225=1;
                }
                break;
            case KW_ARRAY:
                {
                alt225=2;
                }
                break;
            case KW_STRUCT:
                {
                alt225=3;
                }
                break;
            case KW_MAP:
                {
                alt225=4;
                }
                break;
            case KW_UNIONTYPE:
                {
                alt225=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 225, 0, input);

                throw nvae;

            }

            switch (alt225) {
                case 1 :
                    // HiveParser.g:2057:7: primitiveType
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_primitiveType_in_type12508);
                    primitiveType769=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType769.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:2058:7: listType
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_listType_in_type12516);
                    listType770=listType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, listType770.getTree());

                    }
                    break;
                case 3 :
                    // HiveParser.g:2059:7: structType
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_structType_in_type12524);
                    structType771=structType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, structType771.getTree());

                    }
                    break;
                case 4 :
                    // HiveParser.g:2060:7: mapType
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_mapType_in_type12532);
                    mapType772=mapType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mapType772.getTree());

                    }
                    break;
                case 5 :
                    // HiveParser.g:2061:7: unionType
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_unionType_in_type12540);
                    unionType773=unionType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unionType773.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type"


    public static class primitiveType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "primitiveType"
    // HiveParser.g:2063:1: primitiveType : ( KW_TINYINT -> TOK_TINYINT | KW_SMALLINT -> TOK_SMALLINT | KW_INT -> TOK_INT | KW_BIGINT -> TOK_BIGINT | KW_BOOLEAN -> TOK_BOOLEAN | KW_FLOAT -> TOK_FLOAT | KW_DOUBLE -> TOK_DOUBLE | KW_DATE -> TOK_DATE | KW_DATETIME -> TOK_DATETIME | KW_TIMESTAMP -> TOK_TIMESTAMP | KW_STRING -> TOK_STRING | KW_BINARY -> TOK_BINARY | KW_DECIMAL ( LPAREN prec= Number ( COMMA scale= Number )? RPAREN )? -> ^( TOK_DECIMAL ( $prec)? ( $scale)? ) | KW_VARCHAR LPAREN length= Number RPAREN -> ^( TOK_VARCHAR $length) | KW_CHAR LPAREN length= Number RPAREN -> ^( TOK_CHAR $length) );
    public final HiveParser.primitiveType_return primitiveType() throws RecognitionException {
        HiveParser.primitiveType_return retval = new HiveParser.primitiveType_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token prec=null;
        Token scale=null;
        Token length=null;
        Token KW_TINYINT774=null;
        Token KW_SMALLINT775=null;
        Token KW_INT776=null;
        Token KW_BIGINT777=null;
        Token KW_BOOLEAN778=null;
        Token KW_FLOAT779=null;
        Token KW_DOUBLE780=null;
        Token KW_DATE781=null;
        Token KW_DATETIME782=null;
        Token KW_TIMESTAMP783=null;
        Token KW_STRING784=null;
        Token KW_BINARY785=null;
        Token KW_DECIMAL786=null;
        Token LPAREN787=null;
        Token COMMA788=null;
        Token RPAREN789=null;
        Token KW_VARCHAR790=null;
        Token LPAREN791=null;
        Token RPAREN792=null;
        Token KW_CHAR793=null;
        Token LPAREN794=null;
        Token RPAREN795=null;

        CommonTree prec_tree=null;
        CommonTree scale_tree=null;
        CommonTree length_tree=null;
        CommonTree KW_TINYINT774_tree=null;
        CommonTree KW_SMALLINT775_tree=null;
        CommonTree KW_INT776_tree=null;
        CommonTree KW_BIGINT777_tree=null;
        CommonTree KW_BOOLEAN778_tree=null;
        CommonTree KW_FLOAT779_tree=null;
        CommonTree KW_DOUBLE780_tree=null;
        CommonTree KW_DATE781_tree=null;
        CommonTree KW_DATETIME782_tree=null;
        CommonTree KW_TIMESTAMP783_tree=null;
        CommonTree KW_STRING784_tree=null;
        CommonTree KW_BINARY785_tree=null;
        CommonTree KW_DECIMAL786_tree=null;
        CommonTree LPAREN787_tree=null;
        CommonTree COMMA788_tree=null;
        CommonTree RPAREN789_tree=null;
        CommonTree KW_VARCHAR790_tree=null;
        CommonTree LPAREN791_tree=null;
        CommonTree RPAREN792_tree=null;
        CommonTree KW_CHAR793_tree=null;
        CommonTree LPAREN794_tree=null;
        CommonTree RPAREN795_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_SMALLINT=new RewriteRuleTokenStream(adaptor,"token KW_SMALLINT");
        RewriteRuleTokenStream stream_KW_DATE=new RewriteRuleTokenStream(adaptor,"token KW_DATE");
        RewriteRuleTokenStream stream_KW_DATETIME=new RewriteRuleTokenStream(adaptor,"token KW_DATETIME");
        RewriteRuleTokenStream stream_KW_TIMESTAMP=new RewriteRuleTokenStream(adaptor,"token KW_TIMESTAMP");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_BOOLEAN=new RewriteRuleTokenStream(adaptor,"token KW_BOOLEAN");
        RewriteRuleTokenStream stream_KW_DOUBLE=new RewriteRuleTokenStream(adaptor,"token KW_DOUBLE");
        RewriteRuleTokenStream stream_KW_BIGINT=new RewriteRuleTokenStream(adaptor,"token KW_BIGINT");
        RewriteRuleTokenStream stream_KW_CHAR=new RewriteRuleTokenStream(adaptor,"token KW_CHAR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_INT=new RewriteRuleTokenStream(adaptor,"token KW_INT");
        RewriteRuleTokenStream stream_KW_STRING=new RewriteRuleTokenStream(adaptor,"token KW_STRING");
        RewriteRuleTokenStream stream_KW_DECIMAL=new RewriteRuleTokenStream(adaptor,"token KW_DECIMAL");
        RewriteRuleTokenStream stream_KW_VARCHAR=new RewriteRuleTokenStream(adaptor,"token KW_VARCHAR");
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_KW_FLOAT=new RewriteRuleTokenStream(adaptor,"token KW_FLOAT");
        RewriteRuleTokenStream stream_KW_TINYINT=new RewriteRuleTokenStream(adaptor,"token KW_TINYINT");
        RewriteRuleTokenStream stream_KW_BINARY=new RewriteRuleTokenStream(adaptor,"token KW_BINARY");

         pushMsg("primitive type specification", state); 
        try {
            // HiveParser.g:2066:5: ( KW_TINYINT -> TOK_TINYINT | KW_SMALLINT -> TOK_SMALLINT | KW_INT -> TOK_INT | KW_BIGINT -> TOK_BIGINT | KW_BOOLEAN -> TOK_BOOLEAN | KW_FLOAT -> TOK_FLOAT | KW_DOUBLE -> TOK_DOUBLE | KW_DATE -> TOK_DATE | KW_DATETIME -> TOK_DATETIME | KW_TIMESTAMP -> TOK_TIMESTAMP | KW_STRING -> TOK_STRING | KW_BINARY -> TOK_BINARY | KW_DECIMAL ( LPAREN prec= Number ( COMMA scale= Number )? RPAREN )? -> ^( TOK_DECIMAL ( $prec)? ( $scale)? ) | KW_VARCHAR LPAREN length= Number RPAREN -> ^( TOK_VARCHAR $length) | KW_CHAR LPAREN length= Number RPAREN -> ^( TOK_CHAR $length) )
            int alt228=15;
            switch ( input.LA(1) ) {
            case KW_TINYINT:
                {
                alt228=1;
                }
                break;
            case KW_SMALLINT:
                {
                alt228=2;
                }
                break;
            case KW_INT:
                {
                alt228=3;
                }
                break;
            case KW_BIGINT:
                {
                alt228=4;
                }
                break;
            case KW_BOOLEAN:
                {
                alt228=5;
                }
                break;
            case KW_FLOAT:
                {
                alt228=6;
                }
                break;
            case KW_DOUBLE:
                {
                alt228=7;
                }
                break;
            case KW_DATE:
                {
                alt228=8;
                }
                break;
            case KW_DATETIME:
                {
                alt228=9;
                }
                break;
            case KW_TIMESTAMP:
                {
                alt228=10;
                }
                break;
            case KW_STRING:
                {
                alt228=11;
                }
                break;
            case KW_BINARY:
                {
                alt228=12;
                }
                break;
            case KW_DECIMAL:
                {
                alt228=13;
                }
                break;
            case KW_VARCHAR:
                {
                alt228=14;
                }
                break;
            case KW_CHAR:
                {
                alt228=15;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 228, 0, input);

                throw nvae;

            }

            switch (alt228) {
                case 1 :
                    // HiveParser.g:2066:7: KW_TINYINT
                    {
                    KW_TINYINT774=(Token)match(input,KW_TINYINT,FOLLOW_KW_TINYINT_in_primitiveType12562); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TINYINT.add(KW_TINYINT774);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2066:24: -> TOK_TINYINT
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_TINYINT, "TOK_TINYINT")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:2067:7: KW_SMALLINT
                    {
                    KW_SMALLINT775=(Token)match(input,KW_SMALLINT,FOLLOW_KW_SMALLINT_in_primitiveType12583); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SMALLINT.add(KW_SMALLINT775);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2067:24: -> TOK_SMALLINT
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_SMALLINT, "TOK_SMALLINT")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:2068:7: KW_INT
                    {
                    KW_INT776=(Token)match(input,KW_INT,FOLLOW_KW_INT_in_primitiveType12603); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_INT.add(KW_INT776);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2068:24: -> TOK_INT
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_INT, "TOK_INT")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // HiveParser.g:2069:7: KW_BIGINT
                    {
                    KW_BIGINT777=(Token)match(input,KW_BIGINT,FOLLOW_KW_BIGINT_in_primitiveType12628); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_BIGINT.add(KW_BIGINT777);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2069:24: -> TOK_BIGINT
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_BIGINT, "TOK_BIGINT")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // HiveParser.g:2070:7: KW_BOOLEAN
                    {
                    KW_BOOLEAN778=(Token)match(input,KW_BOOLEAN,FOLLOW_KW_BOOLEAN_in_primitiveType12650); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_BOOLEAN.add(KW_BOOLEAN778);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2070:24: -> TOK_BOOLEAN
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_BOOLEAN, "TOK_BOOLEAN")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // HiveParser.g:2071:7: KW_FLOAT
                    {
                    KW_FLOAT779=(Token)match(input,KW_FLOAT,FOLLOW_KW_FLOAT_in_primitiveType12671); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_FLOAT.add(KW_FLOAT779);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2071:24: -> TOK_FLOAT
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_FLOAT, "TOK_FLOAT")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // HiveParser.g:2072:7: KW_DOUBLE
                    {
                    KW_DOUBLE780=(Token)match(input,KW_DOUBLE,FOLLOW_KW_DOUBLE_in_primitiveType12694); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DOUBLE.add(KW_DOUBLE780);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2072:24: -> TOK_DOUBLE
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_DOUBLE, "TOK_DOUBLE")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // HiveParser.g:2073:7: KW_DATE
                    {
                    KW_DATE781=(Token)match(input,KW_DATE,FOLLOW_KW_DATE_in_primitiveType12716); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DATE.add(KW_DATE781);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2073:24: -> TOK_DATE
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_DATE, "TOK_DATE")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 9 :
                    // HiveParser.g:2074:7: KW_DATETIME
                    {
                    KW_DATETIME782=(Token)match(input,KW_DATETIME,FOLLOW_KW_DATETIME_in_primitiveType12740); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DATETIME.add(KW_DATETIME782);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2074:24: -> TOK_DATETIME
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_DATETIME, "TOK_DATETIME")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 10 :
                    // HiveParser.g:2075:7: KW_TIMESTAMP
                    {
                    KW_TIMESTAMP783=(Token)match(input,KW_TIMESTAMP,FOLLOW_KW_TIMESTAMP_in_primitiveType12760); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TIMESTAMP.add(KW_TIMESTAMP783);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2075:24: -> TOK_TIMESTAMP
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_TIMESTAMP, "TOK_TIMESTAMP")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 11 :
                    // HiveParser.g:2079:7: KW_STRING
                    {
                    KW_STRING784=(Token)match(input,KW_STRING,FOLLOW_KW_STRING_in_primitiveType12794); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_STRING.add(KW_STRING784);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2079:24: -> TOK_STRING
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_STRING, "TOK_STRING")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 12 :
                    // HiveParser.g:2080:7: KW_BINARY
                    {
                    KW_BINARY785=(Token)match(input,KW_BINARY,FOLLOW_KW_BINARY_in_primitiveType12816); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_BINARY.add(KW_BINARY785);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2080:24: -> TOK_BINARY
                    {
                        adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(TOK_BINARY, "TOK_BINARY")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 13 :
                    // HiveParser.g:2081:7: KW_DECIMAL ( LPAREN prec= Number ( COMMA scale= Number )? RPAREN )?
                    {
                    KW_DECIMAL786=(Token)match(input,KW_DECIMAL,FOLLOW_KW_DECIMAL_in_primitiveType12838); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DECIMAL.add(KW_DECIMAL786);


                    // HiveParser.g:2081:18: ( LPAREN prec= Number ( COMMA scale= Number )? RPAREN )?
                    int alt227=2;
                    int LA227_0 = input.LA(1);

                    if ( (LA227_0==LPAREN) ) {
                        alt227=1;
                    }
                    switch (alt227) {
                        case 1 :
                            // HiveParser.g:2081:19: LPAREN prec= Number ( COMMA scale= Number )? RPAREN
                            {
                            LPAREN787=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_primitiveType12841); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN787);


                            prec=(Token)match(input,Number,FOLLOW_Number_in_primitiveType12845); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Number.add(prec);


                            // HiveParser.g:2081:38: ( COMMA scale= Number )?
                            int alt226=2;
                            int LA226_0 = input.LA(1);

                            if ( (LA226_0==COMMA) ) {
                                alt226=1;
                            }
                            switch (alt226) {
                                case 1 :
                                    // HiveParser.g:2081:39: COMMA scale= Number
                                    {
                                    COMMA788=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitiveType12848); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA788);


                                    scale=(Token)match(input,Number,FOLLOW_Number_in_primitiveType12852); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_Number.add(scale);


                                    }
                                    break;

                            }


                            RPAREN789=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_primitiveType12856); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN789);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: prec, scale
                    // token labels: prec, scale
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_prec=new RewriteRuleTokenStream(adaptor,"token prec",prec);
                    RewriteRuleTokenStream stream_scale=new RewriteRuleTokenStream(adaptor,"token scale",scale);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2081:69: -> ^( TOK_DECIMAL ( $prec)? ( $scale)? )
                    {
                        // HiveParser.g:2081:72: ^( TOK_DECIMAL ( $prec)? ( $scale)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_DECIMAL, "TOK_DECIMAL")
                        , root_1);

                        // HiveParser.g:2081:87: ( $prec)?
                        if ( stream_prec.hasNext() ) {
                            adaptor.addChild(root_1, stream_prec.nextNode());

                        }
                        stream_prec.reset();

                        // HiveParser.g:2081:94: ( $scale)?
                        if ( stream_scale.hasNext() ) {
                            adaptor.addChild(root_1, stream_scale.nextNode());

                        }
                        stream_scale.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 14 :
                    // HiveParser.g:2082:7: KW_VARCHAR LPAREN length= Number RPAREN
                    {
                    KW_VARCHAR790=(Token)match(input,KW_VARCHAR,FOLLOW_KW_VARCHAR_in_primitiveType12880); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_VARCHAR.add(KW_VARCHAR790);


                    LPAREN791=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_primitiveType12882); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN791);


                    length=(Token)match(input,Number,FOLLOW_Number_in_primitiveType12886); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Number.add(length);


                    RPAREN792=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_primitiveType12888); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN792);


                    // AST REWRITE
                    // elements: length
                    // token labels: length
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_length=new RewriteRuleTokenStream(adaptor,"token length",length);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2082:51: -> ^( TOK_VARCHAR $length)
                    {
                        // HiveParser.g:2082:57: ^( TOK_VARCHAR $length)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_VARCHAR, "TOK_VARCHAR")
                        , root_1);

                        adaptor.addChild(root_1, stream_length.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 15 :
                    // HiveParser.g:2083:7: KW_CHAR LPAREN length= Number RPAREN
                    {
                    KW_CHAR793=(Token)match(input,KW_CHAR,FOLLOW_KW_CHAR_in_primitiveType12913); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_CHAR.add(KW_CHAR793);


                    LPAREN794=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_primitiveType12915); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN794);


                    length=(Token)match(input,Number,FOLLOW_Number_in_primitiveType12919); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Number.add(length);


                    RPAREN795=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_primitiveType12921); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN795);


                    // AST REWRITE
                    // elements: length
                    // token labels: length
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_length=new RewriteRuleTokenStream(adaptor,"token length",length);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2083:48: -> ^( TOK_CHAR $length)
                    {
                        // HiveParser.g:2083:54: ^( TOK_CHAR $length)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_CHAR, "TOK_CHAR")
                        , root_1);

                        adaptor.addChild(root_1, stream_length.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "primitiveType"


    public static class listType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "listType"
    // HiveParser.g:2086:1: listType : KW_ARRAY LESSTHAN type GREATERTHAN -> ^( TOK_LIST type ) ;
    public final HiveParser.listType_return listType() throws RecognitionException {
        HiveParser.listType_return retval = new HiveParser.listType_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_ARRAY796=null;
        Token LESSTHAN797=null;
        Token GREATERTHAN799=null;
        HiveParser.type_return type798 =null;


        CommonTree KW_ARRAY796_tree=null;
        CommonTree LESSTHAN797_tree=null;
        CommonTree GREATERTHAN799_tree=null;
        RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
        RewriteRuleTokenStream stream_KW_ARRAY=new RewriteRuleTokenStream(adaptor,"token KW_ARRAY");
        RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
         pushMsg("list type", state); 
        try {
            // HiveParser.g:2089:5: ( KW_ARRAY LESSTHAN type GREATERTHAN -> ^( TOK_LIST type ) )
            // HiveParser.g:2089:7: KW_ARRAY LESSTHAN type GREATERTHAN
            {
            KW_ARRAY796=(Token)match(input,KW_ARRAY,FOLLOW_KW_ARRAY_in_listType12965); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ARRAY.add(KW_ARRAY796);


            LESSTHAN797=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_listType12967); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESSTHAN.add(LESSTHAN797);


            pushFollow(FOLLOW_type_in_listType12969);
            type798=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type798.getTree());

            GREATERTHAN799=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_listType12971); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GREATERTHAN.add(GREATERTHAN799);


            // AST REWRITE
            // elements: type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2089:44: -> ^( TOK_LIST type )
            {
                // HiveParser.g:2089:47: ^( TOK_LIST type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_LIST, "TOK_LIST")
                , root_1);

                adaptor.addChild(root_1, stream_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "listType"


    public static class structType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "structType"
    // HiveParser.g:2092:1: structType : KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN -> ^( TOK_STRUCT columnNameColonTypeList ) ;
    public final HiveParser.structType_return structType() throws RecognitionException {
        HiveParser.structType_return retval = new HiveParser.structType_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_STRUCT800=null;
        Token LESSTHAN801=null;
        Token GREATERTHAN803=null;
        HiveParser.columnNameColonTypeList_return columnNameColonTypeList802 =null;


        CommonTree KW_STRUCT800_tree=null;
        CommonTree LESSTHAN801_tree=null;
        CommonTree GREATERTHAN803_tree=null;
        RewriteRuleTokenStream stream_KW_STRUCT=new RewriteRuleTokenStream(adaptor,"token KW_STRUCT");
        RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
        RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
        RewriteRuleSubtreeStream stream_columnNameColonTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameColonTypeList");
         pushMsg("struct type", state); 
        try {
            // HiveParser.g:2095:5: ( KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN -> ^( TOK_STRUCT columnNameColonTypeList ) )
            // HiveParser.g:2095:7: KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN
            {
            KW_STRUCT800=(Token)match(input,KW_STRUCT,FOLLOW_KW_STRUCT_in_structType13008); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_STRUCT.add(KW_STRUCT800);


            LESSTHAN801=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_structType13010); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESSTHAN.add(LESSTHAN801);


            pushFollow(FOLLOW_columnNameColonTypeList_in_structType13012);
            columnNameColonTypeList802=columnNameColonTypeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnNameColonTypeList.add(columnNameColonTypeList802.getTree());

            GREATERTHAN803=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_structType13014); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GREATERTHAN.add(GREATERTHAN803);


            // AST REWRITE
            // elements: columnNameColonTypeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2095:62: -> ^( TOK_STRUCT columnNameColonTypeList )
            {
                // HiveParser.g:2095:65: ^( TOK_STRUCT columnNameColonTypeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_STRUCT, "TOK_STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_columnNameColonTypeList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "structType"


    public static class mapType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "mapType"
    // HiveParser.g:2098:1: mapType : KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN -> ^( TOK_MAP $left $right) ;
    public final HiveParser.mapType_return mapType() throws RecognitionException {
        HiveParser.mapType_return retval = new HiveParser.mapType_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_MAP804=null;
        Token LESSTHAN805=null;
        Token COMMA806=null;
        Token GREATERTHAN807=null;
        HiveParser.primitiveType_return left =null;

        HiveParser.type_return right =null;


        CommonTree KW_MAP804_tree=null;
        CommonTree LESSTHAN805_tree=null;
        CommonTree COMMA806_tree=null;
        CommonTree GREATERTHAN807_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");
        RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
        RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
         pushMsg("map type", state); 
        try {
            // HiveParser.g:2101:5: ( KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN -> ^( TOK_MAP $left $right) )
            // HiveParser.g:2101:7: KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN
            {
            KW_MAP804=(Token)match(input,KW_MAP,FOLLOW_KW_MAP_in_mapType13049); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_MAP.add(KW_MAP804);


            LESSTHAN805=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_mapType13051); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESSTHAN.add(LESSTHAN805);


            pushFollow(FOLLOW_primitiveType_in_mapType13055);
            left=primitiveType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_primitiveType.add(left.getTree());

            COMMA806=(Token)match(input,COMMA,FOLLOW_COMMA_in_mapType13057); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA806);


            pushFollow(FOLLOW_type_in_mapType13061);
            right=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(right.getTree());

            GREATERTHAN807=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_mapType13063); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GREATERTHAN.add(GREATERTHAN807);


            // AST REWRITE
            // elements: left, right
            // token labels: 
            // rule labels: left, right, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"rule left",left!=null?left.tree:null);
            RewriteRuleSubtreeStream stream_right=new RewriteRuleSubtreeStream(adaptor,"rule right",right!=null?right.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2102:5: -> ^( TOK_MAP $left $right)
            {
                // HiveParser.g:2102:8: ^( TOK_MAP $left $right)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_MAP, "TOK_MAP")
                , root_1);

                adaptor.addChild(root_1, stream_left.nextTree());

                adaptor.addChild(root_1, stream_right.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "mapType"


    public static class unionType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unionType"
    // HiveParser.g:2105:1: unionType : KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN -> ^( TOK_UNIONTYPE colTypeList ) ;
    public final HiveParser.unionType_return unionType() throws RecognitionException {
        HiveParser.unionType_return retval = new HiveParser.unionType_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_UNIONTYPE808=null;
        Token LESSTHAN809=null;
        Token GREATERTHAN811=null;
        HiveParser.colTypeList_return colTypeList810 =null;


        CommonTree KW_UNIONTYPE808_tree=null;
        CommonTree LESSTHAN809_tree=null;
        CommonTree GREATERTHAN811_tree=null;
        RewriteRuleTokenStream stream_KW_UNIONTYPE=new RewriteRuleTokenStream(adaptor,"token KW_UNIONTYPE");
        RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
        RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
        RewriteRuleSubtreeStream stream_colTypeList=new RewriteRuleSubtreeStream(adaptor,"rule colTypeList");
         pushMsg("uniontype type", state); 
        try {
            // HiveParser.g:2108:5: ( KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN -> ^( TOK_UNIONTYPE colTypeList ) )
            // HiveParser.g:2108:7: KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN
            {
            KW_UNIONTYPE808=(Token)match(input,KW_UNIONTYPE,FOLLOW_KW_UNIONTYPE_in_unionType13106); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_UNIONTYPE.add(KW_UNIONTYPE808);


            LESSTHAN809=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_unionType13108); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESSTHAN.add(LESSTHAN809);


            pushFollow(FOLLOW_colTypeList_in_unionType13110);
            colTypeList810=colTypeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_colTypeList.add(colTypeList810.getTree());

            GREATERTHAN811=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_unionType13112); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GREATERTHAN.add(GREATERTHAN811);


            // AST REWRITE
            // elements: colTypeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2108:53: -> ^( TOK_UNIONTYPE colTypeList )
            {
                // HiveParser.g:2108:56: ^( TOK_UNIONTYPE colTypeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_UNIONTYPE, "TOK_UNIONTYPE")
                , root_1);

                adaptor.addChild(root_1, stream_colTypeList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unionType"


    public static class setOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "setOperator"
    // HiveParser.g:2111:1: setOperator : ( KW_UNION KW_ALL -> ^( TOK_UNIONALL ) | KW_UNION ( KW_DISTINCT )? -> ^( TOK_UNIONDISTINCT ) );
    public final HiveParser.setOperator_return setOperator() throws RecognitionException {
        HiveParser.setOperator_return retval = new HiveParser.setOperator_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_UNION812=null;
        Token KW_ALL813=null;
        Token KW_UNION814=null;
        Token KW_DISTINCT815=null;

        CommonTree KW_UNION812_tree=null;
        CommonTree KW_ALL813_tree=null;
        CommonTree KW_UNION814_tree=null;
        CommonTree KW_DISTINCT815_tree=null;
        RewriteRuleTokenStream stream_KW_UNION=new RewriteRuleTokenStream(adaptor,"token KW_UNION");
        RewriteRuleTokenStream stream_KW_DISTINCT=new RewriteRuleTokenStream(adaptor,"token KW_DISTINCT");
        RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");

         pushMsg("set operator", state); 
        try {
            // HiveParser.g:2114:5: ( KW_UNION KW_ALL -> ^( TOK_UNIONALL ) | KW_UNION ( KW_DISTINCT )? -> ^( TOK_UNIONDISTINCT ) )
            int alt230=2;
            int LA230_0 = input.LA(1);

            if ( (LA230_0==KW_UNION) ) {
                int LA230_1 = input.LA(2);

                if ( (LA230_1==KW_ALL) ) {
                    alt230=1;
                }
                else if ( (LA230_1==KW_DISTINCT||LA230_1==KW_FROM||LA230_1==KW_MAP||LA230_1==KW_REDUCE||LA230_1==KW_SELECT) ) {
                    alt230=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 230, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 230, 0, input);

                throw nvae;

            }
            switch (alt230) {
                case 1 :
                    // HiveParser.g:2114:7: KW_UNION KW_ALL
                    {
                    KW_UNION812=(Token)match(input,KW_UNION,FOLLOW_KW_UNION_in_setOperator13147); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_UNION.add(KW_UNION812);


                    KW_ALL813=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_setOperator13149); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ALL.add(KW_ALL813);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2114:23: -> ^( TOK_UNIONALL )
                    {
                        // HiveParser.g:2114:26: ^( TOK_UNIONALL )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_UNIONALL, "TOK_UNIONALL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:2115:7: KW_UNION ( KW_DISTINCT )?
                    {
                    KW_UNION814=(Token)match(input,KW_UNION,FOLLOW_KW_UNION_in_setOperator13163); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_UNION.add(KW_UNION814);


                    // HiveParser.g:2115:16: ( KW_DISTINCT )?
                    int alt229=2;
                    int LA229_0 = input.LA(1);

                    if ( (LA229_0==KW_DISTINCT) ) {
                        alt229=1;
                    }
                    switch (alt229) {
                        case 1 :
                            // HiveParser.g:2115:16: KW_DISTINCT
                            {
                            KW_DISTINCT815=(Token)match(input,KW_DISTINCT,FOLLOW_KW_DISTINCT_in_setOperator13165); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_DISTINCT.add(KW_DISTINCT815);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2115:29: -> ^( TOK_UNIONDISTINCT )
                    {
                        // HiveParser.g:2115:32: ^( TOK_UNIONDISTINCT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_UNIONDISTINCT, "TOK_UNIONDISTINCT")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "setOperator"


    public static class queryStatementExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "queryStatementExpression"
    // HiveParser.g:2118:1: queryStatementExpression[boolean topLevel] : (w= withClause {...}?)? queryStatementExpressionBody[topLevel] -> queryStatementExpressionBody ;
    public final HiveParser.queryStatementExpression_return queryStatementExpression(boolean topLevel) throws RecognitionException {
        HiveParser.queryStatementExpression_return retval = new HiveParser.queryStatementExpression_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.withClause_return w =null;

        HiveParser.queryStatementExpressionBody_return queryStatementExpressionBody816 =null;


        RewriteRuleSubtreeStream stream_withClause=new RewriteRuleSubtreeStream(adaptor,"rule withClause");
        RewriteRuleSubtreeStream stream_queryStatementExpressionBody=new RewriteRuleSubtreeStream(adaptor,"rule queryStatementExpressionBody");
        try {
            // HiveParser.g:2119:5: ( (w= withClause {...}?)? queryStatementExpressionBody[topLevel] -> queryStatementExpressionBody )
            // HiveParser.g:2124:5: (w= withClause {...}?)? queryStatementExpressionBody[topLevel]
            {
            // HiveParser.g:2124:5: (w= withClause {...}?)?
            int alt231=2;
            int LA231_0 = input.LA(1);

            if ( (LA231_0==KW_WITH) ) {
                alt231=1;
            }
            switch (alt231) {
                case 1 :
                    // HiveParser.g:2124:6: w= withClause {...}?
                    {
                    pushFollow(FOLLOW_withClause_in_queryStatementExpression13203);
                    w=withClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_withClause.add(w.getTree());

                    if ( !((topLevel)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "queryStatementExpression", "topLevel");
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_queryStatementExpressionBody_in_queryStatementExpression13213);
            queryStatementExpressionBody816=queryStatementExpressionBody(topLevel);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_queryStatementExpressionBody.add(queryStatementExpressionBody816.getTree());

            if ( state.backtracking==0 ) {
                  if ((w!=null?((CommonTree)w.tree):null) != null) {
                  adaptor.addChild((queryStatementExpressionBody816!=null?((CommonTree)queryStatementExpressionBody816.tree):null), (w!=null?((CommonTree)w.tree):null));
                  }
                }

            // AST REWRITE
            // elements: queryStatementExpressionBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2130:5: -> queryStatementExpressionBody
            {
                adaptor.addChild(root_0, stream_queryStatementExpressionBody.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "queryStatementExpression"


    public static class queryStatementExpressionBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "queryStatementExpressionBody"
    // HiveParser.g:2133:1: queryStatementExpressionBody[boolean topLevel] : ( fromStatement[topLevel] | regularBody[topLevel] );
    public final HiveParser.queryStatementExpressionBody_return queryStatementExpressionBody(boolean topLevel) throws RecognitionException {
        HiveParser.queryStatementExpressionBody_return retval = new HiveParser.queryStatementExpressionBody_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.fromStatement_return fromStatement817 =null;

        HiveParser.regularBody_return regularBody818 =null;



        try {
            // HiveParser.g:2134:5: ( fromStatement[topLevel] | regularBody[topLevel] )
            int alt232=2;
            int LA232_0 = input.LA(1);

            if ( (LA232_0==KW_FROM) ) {
                alt232=1;
            }
            else if ( (LA232_0==KW_INSERT||LA232_0==KW_MAP||LA232_0==KW_REDUCE||LA232_0==KW_SELECT) ) {
                alt232=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 232, 0, input);

                throw nvae;

            }
            switch (alt232) {
                case 1 :
                    // HiveParser.g:2135:5: fromStatement[topLevel]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_fromStatement_in_queryStatementExpressionBody13247);
                    fromStatement817=fromStatement(topLevel);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromStatement817.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:2136:7: regularBody[topLevel]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_regularBody_in_queryStatementExpressionBody13256);
                    regularBody818=regularBody(topLevel);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularBody818.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "queryStatementExpressionBody"


    public static class withClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "withClause"
    // HiveParser.g:2139:1: withClause : KW_WITH cteStatement ( COMMA cteStatement )* -> ^( TOK_CTE ( cteStatement )+ ) ;
    public final HiveParser.withClause_return withClause() throws RecognitionException {
        HiveParser.withClause_return retval = new HiveParser.withClause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_WITH819=null;
        Token COMMA821=null;
        HiveParser.cteStatement_return cteStatement820 =null;

        HiveParser.cteStatement_return cteStatement822 =null;


        CommonTree KW_WITH819_tree=null;
        CommonTree COMMA821_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleSubtreeStream stream_cteStatement=new RewriteRuleSubtreeStream(adaptor,"rule cteStatement");
        try {
            // HiveParser.g:2140:3: ( KW_WITH cteStatement ( COMMA cteStatement )* -> ^( TOK_CTE ( cteStatement )+ ) )
            // HiveParser.g:2141:3: KW_WITH cteStatement ( COMMA cteStatement )*
            {
            KW_WITH819=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_withClause13274); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH819);


            pushFollow(FOLLOW_cteStatement_in_withClause13276);
            cteStatement820=cteStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cteStatement.add(cteStatement820.getTree());

            // HiveParser.g:2141:24: ( COMMA cteStatement )*
            loop233:
            do {
                int alt233=2;
                int LA233_0 = input.LA(1);

                if ( (LA233_0==COMMA) ) {
                    alt233=1;
                }


                switch (alt233) {
            	case 1 :
            	    // HiveParser.g:2141:25: COMMA cteStatement
            	    {
            	    COMMA821=(Token)match(input,COMMA,FOLLOW_COMMA_in_withClause13279); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA821);


            	    pushFollow(FOLLOW_cteStatement_in_withClause13281);
            	    cteStatement822=cteStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cteStatement.add(cteStatement822.getTree());

            	    }
            	    break;

            	default :
            	    break loop233;
                }
            } while (true);


            // AST REWRITE
            // elements: cteStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2141:46: -> ^( TOK_CTE ( cteStatement )+ )
            {
                // HiveParser.g:2141:49: ^( TOK_CTE ( cteStatement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_CTE, "TOK_CTE")
                , root_1);

                if ( !(stream_cteStatement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cteStatement.hasNext() ) {
                    adaptor.addChild(root_1, stream_cteStatement.nextTree());

                }
                stream_cteStatement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "withClause"


    public static class cteStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cteStatement"
    // HiveParser.g:2144:1: cteStatement : identifier KW_AS LPAREN queryStatementExpression[false] RPAREN -> ^( TOK_SUBQUERY queryStatementExpression identifier ) ;
    public final HiveParser.cteStatement_return cteStatement() throws RecognitionException {
        HiveParser.cteStatement_return retval = new HiveParser.cteStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_AS824=null;
        Token LPAREN825=null;
        Token RPAREN827=null;
        HiveParser_IdentifiersParser.identifier_return identifier823 =null;

        HiveParser.queryStatementExpression_return queryStatementExpression826 =null;


        CommonTree KW_AS824_tree=null;
        CommonTree LPAREN825_tree=null;
        CommonTree RPAREN827_tree=null;
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_queryStatementExpression=new RewriteRuleSubtreeStream(adaptor,"rule queryStatementExpression");
        try {
            // HiveParser.g:2145:4: ( identifier KW_AS LPAREN queryStatementExpression[false] RPAREN -> ^( TOK_SUBQUERY queryStatementExpression identifier ) )
            // HiveParser.g:2146:4: identifier KW_AS LPAREN queryStatementExpression[false] RPAREN
            {
            pushFollow(FOLLOW_identifier_in_cteStatement13307);
            identifier823=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(identifier823.getTree());

            KW_AS824=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_cteStatement13309); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS824);


            LPAREN825=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cteStatement13311); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN825);


            pushFollow(FOLLOW_queryStatementExpression_in_cteStatement13313);
            queryStatementExpression826=queryStatementExpression(false);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_queryStatementExpression.add(queryStatementExpression826.getTree());

            RPAREN827=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cteStatement13316); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN827);


            // AST REWRITE
            // elements: queryStatementExpression, identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2147:4: -> ^( TOK_SUBQUERY queryStatementExpression identifier )
            {
                // HiveParser.g:2147:7: ^( TOK_SUBQUERY queryStatementExpression identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY")
                , root_1);

                adaptor.addChild(root_1, stream_queryStatementExpression.nextTree());

                adaptor.addChild(root_1, stream_identifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cteStatement"


    public static class fromStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fromStatement"
    // HiveParser.g:2150:1: fromStatement[boolean topLevel] : ( singleFromStatement -> singleFromStatement ) (u= setOperator r= singleFromStatement -> ^( $u $r) )* -> {u != null && topLevel}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) ->;
    public final HiveParser.fromStatement_return fromStatement(boolean topLevel) throws RecognitionException {
        HiveParser.fromStatement_return retval = new HiveParser.fromStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.setOperator_return u =null;

        HiveParser.singleFromStatement_return r =null;

        HiveParser.singleFromStatement_return singleFromStatement828 =null;


        RewriteRuleSubtreeStream stream_setOperator=new RewriteRuleSubtreeStream(adaptor,"rule setOperator");
        RewriteRuleSubtreeStream stream_singleFromStatement=new RewriteRuleSubtreeStream(adaptor,"rule singleFromStatement");
        try {
            // HiveParser.g:2151:3: ( ( singleFromStatement -> singleFromStatement ) (u= setOperator r= singleFromStatement -> ^( $u $r) )* -> {u != null && topLevel}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) ->)
            // HiveParser.g:2151:3: ( singleFromStatement -> singleFromStatement ) (u= setOperator r= singleFromStatement -> ^( $u $r) )*
            {
            // HiveParser.g:2151:3: ( singleFromStatement -> singleFromStatement )
            // HiveParser.g:2151:4: singleFromStatement
            {
            pushFollow(FOLLOW_singleFromStatement_in_fromStatement13340);
            singleFromStatement828=singleFromStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_singleFromStatement.add(singleFromStatement828.getTree());

            // AST REWRITE
            // elements: singleFromStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2151:25: -> singleFromStatement
            {
                adaptor.addChild(root_0, stream_singleFromStatement.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // HiveParser.g:2152:2: (u= setOperator r= singleFromStatement -> ^( $u $r) )*
            loop234:
            do {
                int alt234=2;
                int LA234_0 = input.LA(1);

                if ( (LA234_0==KW_UNION) ) {
                    alt234=1;
                }


                switch (alt234) {
            	case 1 :
            	    // HiveParser.g:2152:3: u= setOperator r= singleFromStatement
            	    {
            	    pushFollow(FOLLOW_setOperator_in_fromStatement13352);
            	    u=setOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_setOperator.add(u.getTree());

            	    pushFollow(FOLLOW_singleFromStatement_in_fromStatement13356);
            	    r=singleFromStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_singleFromStatement.add(r.getTree());

            	    // AST REWRITE
            	    // elements: r, u
            	    // token labels: 
            	    // rule labels: r, u, retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_r=new RewriteRuleSubtreeStream(adaptor,"rule r",r!=null?r.tree:null);
            	    RewriteRuleSubtreeStream stream_u=new RewriteRuleSubtreeStream(adaptor,"rule u",u!=null?u.tree:null);
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 2153:4: -> ^( $u $r)
            	    {
            	        // HiveParser.g:2153:7: ^( $u $r)
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(stream_u.nextNode(), root_1);

            	        adaptor.addChild(root_1, ((CommonTree)retval.tree));

            	        adaptor.addChild(root_1, stream_r.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop234;
                }
            } while (true);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2155:3: -> {u != null && topLevel}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) )
            if (u != null && topLevel) {
                // HiveParser.g:2155:31: ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY")
                , root_1);

                // HiveParser.g:2156:9: ^( TOK_FROM ^( TOK_SUBQUERY ) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_FROM, "TOK_FROM")
                , root_2);

                // HiveParser.g:2157:11: ^( TOK_SUBQUERY )
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY")
                , root_3);

                adaptor.addChild(root_3, ((CommonTree)retval.tree));

                adaptor.addChild(root_3, adaptor.create(Identifier, generateUnionAlias()));

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                // HiveParser.g:2162:9: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT")
                , root_2);

                // HiveParser.g:2163:12: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION")
                , root_3);

                // HiveParser.g:2163:30: ^( TOK_DIR TOK_TMP_FILE )
                {
                CommonTree root_4 = (CommonTree)adaptor.nil();
                root_4 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DIR, "TOK_DIR")
                , root_4);

                adaptor.addChild(root_4, 
                (CommonTree)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE")
                );

                adaptor.addChild(root_3, root_4);
                }

                adaptor.addChild(root_2, root_3);
                }

                // HiveParser.g:2164:12: ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) )
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SELECT, "TOK_SELECT")
                , root_3);

                // HiveParser.g:2164:25: ^( TOK_SELEXPR TOK_ALLCOLREF )
                {
                CommonTree root_4 = (CommonTree)adaptor.nil();
                root_4 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR")
                , root_4);

                adaptor.addChild(root_4, 
                (CommonTree)adaptor.create(TOK_ALLCOLREF, "TOK_ALLCOLREF")
                );

                adaptor.addChild(root_3, root_4);
                }

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2167:5: ->
            {
                adaptor.addChild(root_0, ((CommonTree)retval.tree));

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fromStatement"


    public static class singleFromStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "singleFromStatement"
    // HiveParser.g:2171:1: singleFromStatement : fromClause (b+= body )+ -> ^( TOK_QUERY fromClause ( body )+ ) ;
    public final HiveParser.singleFromStatement_return singleFromStatement() throws RecognitionException {
        HiveParser.singleFromStatement_return retval = new HiveParser.singleFromStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        List list_b=null;
        HiveParser_FromClauseParser.fromClause_return fromClause829 =null;

        RuleReturnScope b = null;
        RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
        RewriteRuleSubtreeStream stream_body=new RewriteRuleSubtreeStream(adaptor,"rule body");
        try {
            // HiveParser.g:2172:5: ( fromClause (b+= body )+ -> ^( TOK_QUERY fromClause ( body )+ ) )
            // HiveParser.g:2173:5: fromClause (b+= body )+
            {
            pushFollow(FOLLOW_fromClause_in_singleFromStatement13562);
            fromClause829=fromClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fromClause.add(fromClause829.getTree());

            // HiveParser.g:2174:5: (b+= body )+
            int cnt235=0;
            loop235:
            do {
                int alt235=2;
                int LA235_0 = input.LA(1);

                if ( (LA235_0==KW_INSERT||LA235_0==KW_MAP||LA235_0==KW_REDUCE||LA235_0==KW_SELECT) ) {
                    alt235=1;
                }


                switch (alt235) {
            	case 1 :
            	    // HiveParser.g:2174:7: b+= body
            	    {
            	    pushFollow(FOLLOW_body_in_singleFromStatement13572);
            	    b=body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_body.add(b.getTree());
            	    if (list_b==null) list_b=new ArrayList();
            	    list_b.add(b.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt235 >= 1 ) break loop235;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(235, input);
                        throw eee;
                }
                cnt235++;
            } while (true);


            // AST REWRITE
            // elements: fromClause, body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2174:18: -> ^( TOK_QUERY fromClause ( body )+ )
            {
                // HiveParser.g:2174:21: ^( TOK_QUERY fromClause ( body )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY")
                , root_1);

                adaptor.addChild(root_1, stream_fromClause.nextTree());

                if ( !(stream_body.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_body.hasNext() ) {
                    adaptor.addChild(root_1, stream_body.nextTree());

                }
                stream_body.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "singleFromStatement"


    public static class regularBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "regularBody"
    // HiveParser.g:2184:1: regularBody[boolean topLevel] : (i= insertClause (s= selectStatement[topLevel] {...}? ->| valuesClause -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_VIRTUAL_TABLE ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) ) valuesClause ) ) ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) ) | selectStatement[topLevel] );
    public final HiveParser.regularBody_return regularBody(boolean topLevel) throws RecognitionException {
        HiveParser.regularBody_return retval = new HiveParser.regularBody_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.insertClause_return i =null;

        HiveParser.selectStatement_return s =null;

        HiveParser_FromClauseParser.valuesClause_return valuesClause830 =null;

        HiveParser.selectStatement_return selectStatement831 =null;


        RewriteRuleSubtreeStream stream_insertClause=new RewriteRuleSubtreeStream(adaptor,"rule insertClause");
        RewriteRuleSubtreeStream stream_valuesClause=new RewriteRuleSubtreeStream(adaptor,"rule valuesClause");
        RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
        try {
            // HiveParser.g:2185:4: (i= insertClause (s= selectStatement[topLevel] {...}? ->| valuesClause -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_VIRTUAL_TABLE ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) ) valuesClause ) ) ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) ) | selectStatement[topLevel] )
            int alt237=2;
            int LA237_0 = input.LA(1);

            if ( (LA237_0==KW_INSERT) ) {
                alt237=1;
            }
            else if ( (LA237_0==KW_MAP||LA237_0==KW_REDUCE||LA237_0==KW_SELECT) ) {
                alt237=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 237, 0, input);

                throw nvae;

            }
            switch (alt237) {
                case 1 :
                    // HiveParser.g:2186:4: i= insertClause (s= selectStatement[topLevel] {...}? ->| valuesClause -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_VIRTUAL_TABLE ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) ) valuesClause ) ) ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) )
                    {
                    pushFollow(FOLLOW_insertClause_in_regularBody13610);
                    i=insertClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertClause.add(i.getTree());

                    // HiveParser.g:2187:4: (s= selectStatement[topLevel] {...}? ->| valuesClause -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_VIRTUAL_TABLE ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) ) valuesClause ) ) ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) )
                    int alt236=2;
                    int LA236_0 = input.LA(1);

                    if ( (LA236_0==KW_MAP||LA236_0==KW_REDUCE||LA236_0==KW_SELECT) ) {
                        alt236=1;
                    }
                    else if ( (LA236_0==KW_VALUES) ) {
                        alt236=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 236, 0, input);

                        throw nvae;

                    }
                    switch (alt236) {
                        case 1 :
                            // HiveParser.g:2188:4: s= selectStatement[topLevel] {...}?
                            {
                            pushFollow(FOLLOW_selectStatement_in_regularBody13622);
                            s=selectStatement(topLevel);

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_selectStatement.add(s.getTree());

                            if ( !(((s!=null?((CommonTree)s.tree):null).getChild(1) !=null)) ) {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                throw new FailedPredicateException(input, "regularBody", "$s.tree.getChild(1) !=null");
                            }

                            if ( state.backtracking==0 ) {(s!=null?((CommonTree)s.tree):null).getChild(1).replaceChildren(0, 0, (i!=null?((CommonTree)i.tree):null));}

                            // AST REWRITE
                            // elements: 
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 2189:90: ->
                            {
                                adaptor.addChild(root_0, (s!=null?((CommonTree)s.tree):null));

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;
                        case 2 :
                            // HiveParser.g:2191:6: valuesClause
                            {
                            pushFollow(FOLLOW_valuesClause_in_regularBody13650);
                            valuesClause830=valuesClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_valuesClause.add(valuesClause830.getTree());

                            // AST REWRITE
                            // elements: valuesClause
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 2192:7: -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_VIRTUAL_TABLE ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) ) valuesClause ) ) ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) )
                            {
                                // HiveParser.g:2192:10: ^( TOK_QUERY ^( TOK_FROM ^( TOK_VIRTUAL_TABLE ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) ) valuesClause ) ) ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(
                                (CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY")
                                , root_1);

                                // HiveParser.g:2193:13: ^( TOK_FROM ^( TOK_VIRTUAL_TABLE ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) ) valuesClause ) )
                                {
                                CommonTree root_2 = (CommonTree)adaptor.nil();
                                root_2 = (CommonTree)adaptor.becomeRoot(
                                (CommonTree)adaptor.create(TOK_FROM, "TOK_FROM")
                                , root_2);

                                // HiveParser.g:2194:15: ^( TOK_VIRTUAL_TABLE ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) ) valuesClause )
                                {
                                CommonTree root_3 = (CommonTree)adaptor.nil();
                                root_3 = (CommonTree)adaptor.becomeRoot(
                                (CommonTree)adaptor.create(TOK_VIRTUAL_TABLE, "TOK_VIRTUAL_TABLE")
                                , root_3);

                                // HiveParser.g:2194:35: ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) )
                                {
                                CommonTree root_4 = (CommonTree)adaptor.nil();
                                root_4 = (CommonTree)adaptor.becomeRoot(
                                (CommonTree)adaptor.create(TOK_VIRTUAL_TABREF, "TOK_VIRTUAL_TABREF")
                                , root_4);

                                // HiveParser.g:2194:56: ^( TOK_ANONYMOUS )
                                {
                                CommonTree root_5 = (CommonTree)adaptor.nil();
                                root_5 = (CommonTree)adaptor.becomeRoot(
                                (CommonTree)adaptor.create(TOK_ANONYMOUS, "TOK_ANONYMOUS")
                                , root_5);

                                adaptor.addChild(root_4, root_5);
                                }

                                adaptor.addChild(root_3, root_4);
                                }

                                adaptor.addChild(root_3, stream_valuesClause.nextTree());

                                adaptor.addChild(root_2, root_3);
                                }

                                adaptor.addChild(root_1, root_2);
                                }

                                // HiveParser.g:2196:13: ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) )
                                {
                                CommonTree root_2 = (CommonTree)adaptor.nil();
                                root_2 = (CommonTree)adaptor.becomeRoot(
                                (CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT")
                                , root_2);

                                adaptor.addChild(root_2, (i!=null?((CommonTree)i.tree):null));

                                // HiveParser.g:2196:36: ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) )
                                {
                                CommonTree root_3 = (CommonTree)adaptor.nil();
                                root_3 = (CommonTree)adaptor.becomeRoot(
                                (CommonTree)adaptor.create(TOK_SELECT, "TOK_SELECT")
                                , root_3);

                                // HiveParser.g:2196:49: ^( TOK_SELEXPR TOK_ALLCOLREF )
                                {
                                CommonTree root_4 = (CommonTree)adaptor.nil();
                                root_4 = (CommonTree)adaptor.becomeRoot(
                                (CommonTree)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR")
                                , root_4);

                                adaptor.addChild(root_4, 
                                (CommonTree)adaptor.create(TOK_ALLCOLREF, "TOK_ALLCOLREF")
                                );

                                adaptor.addChild(root_3, root_4);
                                }

                                adaptor.addChild(root_2, root_3);
                                }

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // HiveParser.g:2200:4: selectStatement[topLevel]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_selectStatement_in_regularBody13774);
                    selectStatement831=selectStatement(topLevel);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectStatement831.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "regularBody"


    public static class selectStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selectStatement"
    // HiveParser.g:2203:1: selectStatement[boolean topLevel] : (s= selectClause (f= fromClause )? (w= whereClause )? (g= groupByClause )? (h= havingClause )? (o= orderByClause )? (c= clusterByClause )? (d= distributeByClause )? (sort= sortByClause )? (win= window_clause )? (l= limitClause )? -> ^( TOK_QUERY ( $f)? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $o)? ( $c)? ( $d)? ( $sort)? ( $win)? ( $l)? ) ) ) (set= setOpSelectStatement[$selectStatement.tree, topLevel] )? -> {set == null}? -> {o==null && c==null && d==null && sort==null && l==null}? ->;
    public final HiveParser.selectStatement_return selectStatement(boolean topLevel) throws RecognitionException {
        HiveParser.selectStatement_return retval = new HiveParser.selectStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser_SelectClauseParser.selectClause_return s =null;

        HiveParser_FromClauseParser.fromClause_return f =null;

        HiveParser_FromClauseParser.whereClause_return w =null;

        HiveParser_IdentifiersParser.groupByClause_return g =null;

        HiveParser_IdentifiersParser.havingClause_return h =null;

        HiveParser_IdentifiersParser.orderByClause_return o =null;

        HiveParser_IdentifiersParser.clusterByClause_return c =null;

        HiveParser_IdentifiersParser.distributeByClause_return d =null;

        HiveParser_IdentifiersParser.sortByClause_return sort =null;

        HiveParser_SelectClauseParser.window_clause_return win =null;

        HiveParser.limitClause_return l =null;

        HiveParser.setOpSelectStatement_return set =null;


        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
        RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
        RewriteRuleSubtreeStream stream_setOpSelectStatement=new RewriteRuleSubtreeStream(adaptor,"rule setOpSelectStatement");
        RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
        RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
        RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
        RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
        RewriteRuleSubtreeStream stream_window_clause=new RewriteRuleSubtreeStream(adaptor,"rule window_clause");
        try {
            // HiveParser.g:2204:4: ( (s= selectClause (f= fromClause )? (w= whereClause )? (g= groupByClause )? (h= havingClause )? (o= orderByClause )? (c= clusterByClause )? (d= distributeByClause )? (sort= sortByClause )? (win= window_clause )? (l= limitClause )? -> ^( TOK_QUERY ( $f)? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $o)? ( $c)? ( $d)? ( $sort)? ( $win)? ( $l)? ) ) ) (set= setOpSelectStatement[$selectStatement.tree, topLevel] )? -> {set == null}? -> {o==null && c==null && d==null && sort==null && l==null}? ->)
            // HiveParser.g:2205:4: (s= selectClause (f= fromClause )? (w= whereClause )? (g= groupByClause )? (h= havingClause )? (o= orderByClause )? (c= clusterByClause )? (d= distributeByClause )? (sort= sortByClause )? (win= window_clause )? (l= limitClause )? -> ^( TOK_QUERY ( $f)? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $o)? ( $c)? ( $d)? ( $sort)? ( $win)? ( $l)? ) ) ) (set= setOpSelectStatement[$selectStatement.tree, topLevel] )?
            {
            // HiveParser.g:2205:4: (s= selectClause (f= fromClause )? (w= whereClause )? (g= groupByClause )? (h= havingClause )? (o= orderByClause )? (c= clusterByClause )? (d= distributeByClause )? (sort= sortByClause )? (win= window_clause )? (l= limitClause )? -> ^( TOK_QUERY ( $f)? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $o)? ( $c)? ( $d)? ( $sort)? ( $win)? ( $l)? ) ) )
            // HiveParser.g:2206:4: s= selectClause (f= fromClause )? (w= whereClause )? (g= groupByClause )? (h= havingClause )? (o= orderByClause )? (c= clusterByClause )? (d= distributeByClause )? (sort= sortByClause )? (win= window_clause )? (l= limitClause )?
            {
            pushFollow(FOLLOW_selectClause_in_selectStatement13801);
            s=selectClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectClause.add(s.getTree());

            // HiveParser.g:2207:5: (f= fromClause )?
            int alt238=2;
            int LA238_0 = input.LA(1);

            if ( (LA238_0==KW_FROM) ) {
                alt238=1;
            }
            switch (alt238) {
                case 1 :
                    // HiveParser.g:2207:5: f= fromClause
                    {
                    pushFollow(FOLLOW_fromClause_in_selectStatement13808);
                    f=fromClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fromClause.add(f.getTree());

                    }
                    break;

            }


            // HiveParser.g:2208:5: (w= whereClause )?
            int alt239=2;
            int LA239_0 = input.LA(1);

            if ( (LA239_0==KW_WHERE) ) {
                alt239=1;
            }
            switch (alt239) {
                case 1 :
                    // HiveParser.g:2208:5: w= whereClause
                    {
                    pushFollow(FOLLOW_whereClause_in_selectStatement13816);
                    w=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(w.getTree());

                    }
                    break;

            }


            // HiveParser.g:2209:5: (g= groupByClause )?
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( (LA240_0==KW_GROUP) ) {
                alt240=1;
            }
            switch (alt240) {
                case 1 :
                    // HiveParser.g:2209:5: g= groupByClause
                    {
                    pushFollow(FOLLOW_groupByClause_in_selectStatement13824);
                    g=groupByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByClause.add(g.getTree());

                    }
                    break;

            }


            // HiveParser.g:2210:5: (h= havingClause )?
            int alt241=2;
            int LA241_0 = input.LA(1);

            if ( (LA241_0==KW_HAVING) ) {
                alt241=1;
            }
            switch (alt241) {
                case 1 :
                    // HiveParser.g:2210:5: h= havingClause
                    {
                    pushFollow(FOLLOW_havingClause_in_selectStatement13832);
                    h=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(h.getTree());

                    }
                    break;

            }


            // HiveParser.g:2211:5: (o= orderByClause )?
            int alt242=2;
            int LA242_0 = input.LA(1);

            if ( (LA242_0==KW_ORDER) ) {
                alt242=1;
            }
            switch (alt242) {
                case 1 :
                    // HiveParser.g:2211:5: o= orderByClause
                    {
                    pushFollow(FOLLOW_orderByClause_in_selectStatement13840);
                    o=orderByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByClause.add(o.getTree());

                    }
                    break;

            }


            // HiveParser.g:2212:5: (c= clusterByClause )?
            int alt243=2;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==KW_CLUSTER) ) {
                alt243=1;
            }
            switch (alt243) {
                case 1 :
                    // HiveParser.g:2212:5: c= clusterByClause
                    {
                    pushFollow(FOLLOW_clusterByClause_in_selectStatement13848);
                    c=clusterByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_clusterByClause.add(c.getTree());

                    }
                    break;

            }


            // HiveParser.g:2213:5: (d= distributeByClause )?
            int alt244=2;
            int LA244_0 = input.LA(1);

            if ( (LA244_0==KW_DISTRIBUTE) ) {
                alt244=1;
            }
            switch (alt244) {
                case 1 :
                    // HiveParser.g:2213:5: d= distributeByClause
                    {
                    pushFollow(FOLLOW_distributeByClause_in_selectStatement13856);
                    d=distributeByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_distributeByClause.add(d.getTree());

                    }
                    break;

            }


            // HiveParser.g:2214:8: (sort= sortByClause )?
            int alt245=2;
            int LA245_0 = input.LA(1);

            if ( (LA245_0==KW_SORT) ) {
                alt245=1;
            }
            switch (alt245) {
                case 1 :
                    // HiveParser.g:2214:8: sort= sortByClause
                    {
                    pushFollow(FOLLOW_sortByClause_in_selectStatement13864);
                    sort=sortByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sortByClause.add(sort.getTree());

                    }
                    break;

            }


            // HiveParser.g:2215:7: (win= window_clause )?
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==KW_WINDOW) ) {
                alt246=1;
            }
            switch (alt246) {
                case 1 :
                    // HiveParser.g:2215:7: win= window_clause
                    {
                    pushFollow(FOLLOW_window_clause_in_selectStatement13872);
                    win=window_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_window_clause.add(win.getTree());

                    }
                    break;

            }


            // HiveParser.g:2216:5: (l= limitClause )?
            int alt247=2;
            int LA247_0 = input.LA(1);

            if ( (LA247_0==KW_LIMIT) ) {
                alt247=1;
            }
            switch (alt247) {
                case 1 :
                    // HiveParser.g:2216:5: l= limitClause
                    {
                    pushFollow(FOLLOW_limitClause_in_selectStatement13880);
                    l=limitClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_limitClause.add(l.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: win, sort, l, w, d, g, o, h, c, f, s
            // token labels: 
            // rule labels: c, s, d, f, w, g, h, sort, l, win, retval, o
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.tree:null);
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.tree:null);
            RewriteRuleSubtreeStream stream_f=new RewriteRuleSubtreeStream(adaptor,"rule f",f!=null?f.tree:null);
            RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.tree:null);
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
            RewriteRuleSubtreeStream stream_h=new RewriteRuleSubtreeStream(adaptor,"rule h",h!=null?h.tree:null);
            RewriteRuleSubtreeStream stream_sort=new RewriteRuleSubtreeStream(adaptor,"rule sort",sort!=null?sort.tree:null);
            RewriteRuleSubtreeStream stream_l=new RewriteRuleSubtreeStream(adaptor,"rule l",l!=null?l.tree:null);
            RewriteRuleSubtreeStream stream_win=new RewriteRuleSubtreeStream(adaptor,"rule win",win!=null?win.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_o=new RewriteRuleSubtreeStream(adaptor,"rule o",o!=null?o.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2217:4: -> ^( TOK_QUERY ( $f)? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $o)? ( $c)? ( $d)? ( $sort)? ( $win)? ( $l)? ) )
            {
                // HiveParser.g:2217:7: ^( TOK_QUERY ( $f)? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $o)? ( $c)? ( $d)? ( $sort)? ( $win)? ( $l)? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY")
                , root_1);

                // HiveParser.g:2217:20: ( $f)?
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextTree());

                }
                stream_f.reset();

                // HiveParser.g:2217:23: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $o)? ( $c)? ( $d)? ( $sort)? ( $win)? ( $l)? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT")
                , root_2);

                // HiveParser.g:2217:36: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION")
                , root_3);

                // HiveParser.g:2217:54: ^( TOK_DIR TOK_TMP_FILE )
                {
                CommonTree root_4 = (CommonTree)adaptor.nil();
                root_4 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DIR, "TOK_DIR")
                , root_4);

                adaptor.addChild(root_4, 
                (CommonTree)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE")
                );

                adaptor.addChild(root_3, root_4);
                }

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_2, stream_s.nextTree());

                // HiveParser.g:2218:26: ( $w)?
                if ( stream_w.hasNext() ) {
                    adaptor.addChild(root_2, stream_w.nextTree());

                }
                stream_w.reset();

                // HiveParser.g:2218:30: ( $g)?
                if ( stream_g.hasNext() ) {
                    adaptor.addChild(root_2, stream_g.nextTree());

                }
                stream_g.reset();

                // HiveParser.g:2218:34: ( $h)?
                if ( stream_h.hasNext() ) {
                    adaptor.addChild(root_2, stream_h.nextTree());

                }
                stream_h.reset();

                // HiveParser.g:2218:38: ( $o)?
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_2, stream_o.nextTree());

                }
                stream_o.reset();

                // HiveParser.g:2218:42: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_2, stream_c.nextTree());

                }
                stream_c.reset();

                // HiveParser.g:2219:23: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_2, stream_d.nextTree());

                }
                stream_d.reset();

                // HiveParser.g:2219:27: ( $sort)?
                if ( stream_sort.hasNext() ) {
                    adaptor.addChild(root_2, stream_sort.nextTree());

                }
                stream_sort.reset();

                // HiveParser.g:2219:34: ( $win)?
                if ( stream_win.hasNext() ) {
                    adaptor.addChild(root_2, stream_win.nextTree());

                }
                stream_win.reset();

                // HiveParser.g:2219:40: ( $l)?
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_2, stream_l.nextTree());

                }
                stream_l.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }


            // HiveParser.g:2221:4: (set= setOpSelectStatement[$selectStatement.tree, topLevel] )?
            int alt248=2;
            int LA248_0 = input.LA(1);

            if ( (LA248_0==KW_UNION) ) {
                alt248=1;
            }
            switch (alt248) {
                case 1 :
                    // HiveParser.g:2221:5: set= setOpSelectStatement[$selectStatement.tree, topLevel]
                    {
                    pushFollow(FOLLOW_setOpSelectStatement_in_selectStatement14002);
                    set=setOpSelectStatement(((CommonTree)retval.tree), topLevel);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_setOpSelectStatement.add(set.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2222:4: -> {set == null}?
            if (set == null) {
                adaptor.addChild(root_0, ((CommonTree)retval.tree));

            }

            else // 2224:4: -> {o==null && c==null && d==null && sort==null && l==null}?
            if (o==null && c==null && d==null && sort==null && l==null) {
                adaptor.addChild(root_0, (set!=null?((CommonTree)set.tree):null));

            }

            else // 2226:4: ->
            {
                adaptor.addChild(root_0, throwSetOpException());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selectStatement"


    public static class setOpSelectStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "setOpSelectStatement"
    // HiveParser.g:2229:1: setOpSelectStatement[CommonTree t, boolean topLevel] : (u= setOperator b= simpleSelectStatement -> {$setOpSelectStatement.tree != null && u.tree.getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) -> {$setOpSelectStatement.tree != null && u.tree.getType()!=HiveParser.TOK_UNIONDISTINCT}? ^( TOK_UNIONALL $b) -> {$setOpSelectStatement.tree == null && u.tree.getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) -> ^( TOK_UNIONALL $b) )+ (o= orderByClause )? (c= clusterByClause )? (d= distributeByClause )? (sort= sortByClause )? (win= window_clause )? (l= limitClause )? -> {o==null && c==null && d==null && sort==null && win==null && l==null && !topLevel}? -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ( $o)? ( $c)? ( $d)? ( $sort)? ( $win)? ( $l)? ) ) ;
    public final HiveParser.setOpSelectStatement_return setOpSelectStatement(CommonTree t, boolean topLevel) throws RecognitionException {
        HiveParser.setOpSelectStatement_return retval = new HiveParser.setOpSelectStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.setOperator_return u =null;

        HiveParser.simpleSelectStatement_return b =null;

        HiveParser_IdentifiersParser.orderByClause_return o =null;

        HiveParser_IdentifiersParser.clusterByClause_return c =null;

        HiveParser_IdentifiersParser.distributeByClause_return d =null;

        HiveParser_IdentifiersParser.sortByClause_return sort =null;

        HiveParser_SelectClauseParser.window_clause_return win =null;

        HiveParser.limitClause_return l =null;


        RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
        RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
        RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
        RewriteRuleSubtreeStream stream_setOperator=new RewriteRuleSubtreeStream(adaptor,"rule setOperator");
        RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
        RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
        RewriteRuleSubtreeStream stream_simpleSelectStatement=new RewriteRuleSubtreeStream(adaptor,"rule simpleSelectStatement");
        RewriteRuleSubtreeStream stream_window_clause=new RewriteRuleSubtreeStream(adaptor,"rule window_clause");
        try {
            // HiveParser.g:2230:4: ( (u= setOperator b= simpleSelectStatement -> {$setOpSelectStatement.tree != null && u.tree.getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) -> {$setOpSelectStatement.tree != null && u.tree.getType()!=HiveParser.TOK_UNIONDISTINCT}? ^( TOK_UNIONALL $b) -> {$setOpSelectStatement.tree == null && u.tree.getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) -> ^( TOK_UNIONALL $b) )+ (o= orderByClause )? (c= clusterByClause )? (d= distributeByClause )? (sort= sortByClause )? (win= window_clause )? (l= limitClause )? -> {o==null && c==null && d==null && sort==null && win==null && l==null && !topLevel}? -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ( $o)? ( $c)? ( $d)? ( $sort)? ( $win)? ( $l)? ) ) )
            // HiveParser.g:2231:4: (u= setOperator b= simpleSelectStatement -> {$setOpSelectStatement.tree != null && u.tree.getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) -> {$setOpSelectStatement.tree != null && u.tree.getType()!=HiveParser.TOK_UNIONDISTINCT}? ^( TOK_UNIONALL $b) -> {$setOpSelectStatement.tree == null && u.tree.getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) -> ^( TOK_UNIONALL $b) )+ (o= orderByClause )? (c= clusterByClause )? (d= distributeByClause )? (sort= sortByClause )? (win= window_clause )? (l= limitClause )?
            {
            // HiveParser.g:2231:4: (u= setOperator b= simpleSelectStatement -> {$setOpSelectStatement.tree != null && u.tree.getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) -> {$setOpSelectStatement.tree != null && u.tree.getType()!=HiveParser.TOK_UNIONDISTINCT}? ^( TOK_UNIONALL $b) -> {$setOpSelectStatement.tree == null && u.tree.getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) -> ^( TOK_UNIONALL $b) )+
            int cnt249=0;
            loop249:
            do {
                int alt249=2;
                int LA249_0 = input.LA(1);

                if ( (LA249_0==KW_UNION) ) {
                    alt249=1;
                }


                switch (alt249) {
            	case 1 :
            	    // HiveParser.g:2231:5: u= setOperator b= simpleSelectStatement
            	    {
            	    pushFollow(FOLLOW_setOperator_in_setOpSelectStatement14064);
            	    u=setOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_setOperator.add(u.getTree());

            	    pushFollow(FOLLOW_simpleSelectStatement_in_setOpSelectStatement14068);
            	    b=simpleSelectStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_simpleSelectStatement.add(b.getTree());

            	    // AST REWRITE
            	    // elements: b, b, b, b
            	    // token labels: 
            	    // rule labels: b, retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.tree:null);
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 2232:4: -> {$setOpSelectStatement.tree != null && u.tree.getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) )
            	    if (((CommonTree)retval.tree) != null && u.tree.getType()==HiveParser.TOK_UNIONDISTINCT) {
            	        // HiveParser.g:2233:7: ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) )
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY")
            	        , root_1);

            	        // HiveParser.g:2234:11: ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) )
            	        {
            	        CommonTree root_2 = (CommonTree)adaptor.nil();
            	        root_2 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(TOK_FROM, "TOK_FROM")
            	        , root_2);

            	        // HiveParser.g:2235:13: ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) )
            	        {
            	        CommonTree root_3 = (CommonTree)adaptor.nil();
            	        root_3 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY")
            	        , root_3);

            	        // HiveParser.g:2236:15: ^( TOK_UNIONALL $b)
            	        {
            	        CommonTree root_4 = (CommonTree)adaptor.nil();
            	        root_4 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(TOK_UNIONALL, "TOK_UNIONALL")
            	        , root_4);

            	        adaptor.addChild(root_4, ((CommonTree)retval.tree));

            	        adaptor.addChild(root_4, stream_b.nextTree());

            	        adaptor.addChild(root_3, root_4);
            	        }

            	        adaptor.addChild(root_3, adaptor.create(Identifier, generateUnionAlias()));

            	        adaptor.addChild(root_2, root_3);
            	        }

            	        adaptor.addChild(root_1, root_2);
            	        }

            	        // HiveParser.g:2240:11: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) )
            	        {
            	        CommonTree root_2 = (CommonTree)adaptor.nil();
            	        root_2 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT")
            	        , root_2);

            	        // HiveParser.g:2241:14: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
            	        {
            	        CommonTree root_3 = (CommonTree)adaptor.nil();
            	        root_3 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION")
            	        , root_3);

            	        // HiveParser.g:2241:32: ^( TOK_DIR TOK_TMP_FILE )
            	        {
            	        CommonTree root_4 = (CommonTree)adaptor.nil();
            	        root_4 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(TOK_DIR, "TOK_DIR")
            	        , root_4);

            	        adaptor.addChild(root_4, 
            	        (CommonTree)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE")
            	        );

            	        adaptor.addChild(root_3, root_4);
            	        }

            	        adaptor.addChild(root_2, root_3);
            	        }

            	        // HiveParser.g:2242:14: ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) )
            	        {
            	        CommonTree root_3 = (CommonTree)adaptor.nil();
            	        root_3 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(TOK_SELECTDI, "TOK_SELECTDI")
            	        , root_3);

            	        // HiveParser.g:2242:29: ^( TOK_SELEXPR TOK_ALLCOLREF )
            	        {
            	        CommonTree root_4 = (CommonTree)adaptor.nil();
            	        root_4 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR")
            	        , root_4);

            	        adaptor.addChild(root_4, 
            	        (CommonTree)adaptor.create(TOK_ALLCOLREF, "TOK_ALLCOLREF")
            	        );

            	        adaptor.addChild(root_3, root_4);
            	        }

            	        adaptor.addChild(root_2, root_3);
            	        }

            	        adaptor.addChild(root_1, root_2);
            	        }

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    else // 2245:4: -> {$setOpSelectStatement.tree != null && u.tree.getType()!=HiveParser.TOK_UNIONDISTINCT}? ^( TOK_UNIONALL $b)
            	    if (((CommonTree)retval.tree) != null && u.tree.getType()!=HiveParser.TOK_UNIONDISTINCT) {
            	        // HiveParser.g:2246:7: ^( TOK_UNIONALL $b)
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(TOK_UNIONALL, "TOK_UNIONALL")
            	        , root_1);

            	        adaptor.addChild(root_1, ((CommonTree)retval.tree));

            	        adaptor.addChild(root_1, stream_b.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    else // 2247:4: -> {$setOpSelectStatement.tree == null && u.tree.getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) )
            	    if (((CommonTree)retval.tree) == null && u.tree.getType()==HiveParser.TOK_UNIONDISTINCT) {
            	        // HiveParser.g:2248:7: ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) )
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY")
            	        , root_1);

            	        // HiveParser.g:2249:11: ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) )
            	        {
            	        CommonTree root_2 = (CommonTree)adaptor.nil();
            	        root_2 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(TOK_FROM, "TOK_FROM")
            	        , root_2);

            	        // HiveParser.g:2250:13: ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) )
            	        {
            	        CommonTree root_3 = (CommonTree)adaptor.nil();
            	        root_3 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY")
            	        , root_3);

            	        // HiveParser.g:2251:15: ^( TOK_UNIONALL $b)
            	        {
            	        CommonTree root_4 = (CommonTree)adaptor.nil();
            	        root_4 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(TOK_UNIONALL, "TOK_UNIONALL")
            	        , root_4);

            	        adaptor.addChild(root_4, t);

            	        adaptor.addChild(root_4, stream_b.nextTree());

            	        adaptor.addChild(root_3, root_4);
            	        }

            	        adaptor.addChild(root_3, adaptor.create(Identifier, generateUnionAlias()));

            	        adaptor.addChild(root_2, root_3);
            	        }

            	        adaptor.addChild(root_1, root_2);
            	        }

            	        // HiveParser.g:2255:11: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) ) )
            	        {
            	        CommonTree root_2 = (CommonTree)adaptor.nil();
            	        root_2 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT")
            	        , root_2);

            	        // HiveParser.g:2256:13: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
            	        {
            	        CommonTree root_3 = (CommonTree)adaptor.nil();
            	        root_3 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION")
            	        , root_3);

            	        // HiveParser.g:2256:31: ^( TOK_DIR TOK_TMP_FILE )
            	        {
            	        CommonTree root_4 = (CommonTree)adaptor.nil();
            	        root_4 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(TOK_DIR, "TOK_DIR")
            	        , root_4);

            	        adaptor.addChild(root_4, 
            	        (CommonTree)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE")
            	        );

            	        adaptor.addChild(root_3, root_4);
            	        }

            	        adaptor.addChild(root_2, root_3);
            	        }

            	        // HiveParser.g:2257:13: ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_ALLCOLREF ) )
            	        {
            	        CommonTree root_3 = (CommonTree)adaptor.nil();
            	        root_3 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(TOK_SELECTDI, "TOK_SELECTDI")
            	        , root_3);

            	        // HiveParser.g:2257:28: ^( TOK_SELEXPR TOK_ALLCOLREF )
            	        {
            	        CommonTree root_4 = (CommonTree)adaptor.nil();
            	        root_4 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR")
            	        , root_4);

            	        adaptor.addChild(root_4, 
            	        (CommonTree)adaptor.create(TOK_ALLCOLREF, "TOK_ALLCOLREF")
            	        );

            	        adaptor.addChild(root_3, root_4);
            	        }

            	        adaptor.addChild(root_2, root_3);
            	        }

            	        adaptor.addChild(root_1, root_2);
            	        }

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    else // 2260:4: -> ^( TOK_UNIONALL $b)
            	    {
            	        // HiveParser.g:2260:7: ^( TOK_UNIONALL $b)
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(TOK_UNIONALL, "TOK_UNIONALL")
            	        , root_1);

            	        adaptor.addChild(root_1, t);

            	        adaptor.addChild(root_1, stream_b.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt249 >= 1 ) break loop249;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(249, input);
                        throw eee;
                }
                cnt249++;
            } while (true);


            // HiveParser.g:2262:5: (o= orderByClause )?
            int alt250=2;
            int LA250_0 = input.LA(1);

            if ( (LA250_0==KW_ORDER) ) {
                alt250=1;
            }
            switch (alt250) {
                case 1 :
                    // HiveParser.g:2262:5: o= orderByClause
                    {
                    pushFollow(FOLLOW_orderByClause_in_setOpSelectStatement14495);
                    o=orderByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByClause.add(o.getTree());

                    }
                    break;

            }


            // HiveParser.g:2263:5: (c= clusterByClause )?
            int alt251=2;
            int LA251_0 = input.LA(1);

            if ( (LA251_0==KW_CLUSTER) ) {
                alt251=1;
            }
            switch (alt251) {
                case 1 :
                    // HiveParser.g:2263:5: c= clusterByClause
                    {
                    pushFollow(FOLLOW_clusterByClause_in_setOpSelectStatement14503);
                    c=clusterByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_clusterByClause.add(c.getTree());

                    }
                    break;

            }


            // HiveParser.g:2264:5: (d= distributeByClause )?
            int alt252=2;
            int LA252_0 = input.LA(1);

            if ( (LA252_0==KW_DISTRIBUTE) ) {
                alt252=1;
            }
            switch (alt252) {
                case 1 :
                    // HiveParser.g:2264:5: d= distributeByClause
                    {
                    pushFollow(FOLLOW_distributeByClause_in_setOpSelectStatement14511);
                    d=distributeByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_distributeByClause.add(d.getTree());

                    }
                    break;

            }


            // HiveParser.g:2265:8: (sort= sortByClause )?
            int alt253=2;
            int LA253_0 = input.LA(1);

            if ( (LA253_0==KW_SORT) ) {
                alt253=1;
            }
            switch (alt253) {
                case 1 :
                    // HiveParser.g:2265:8: sort= sortByClause
                    {
                    pushFollow(FOLLOW_sortByClause_in_setOpSelectStatement14519);
                    sort=sortByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sortByClause.add(sort.getTree());

                    }
                    break;

            }


            // HiveParser.g:2266:7: (win= window_clause )?
            int alt254=2;
            int LA254_0 = input.LA(1);

            if ( (LA254_0==KW_WINDOW) ) {
                alt254=1;
            }
            switch (alt254) {
                case 1 :
                    // HiveParser.g:2266:7: win= window_clause
                    {
                    pushFollow(FOLLOW_window_clause_in_setOpSelectStatement14527);
                    win=window_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_window_clause.add(win.getTree());

                    }
                    break;

            }


            // HiveParser.g:2267:5: (l= limitClause )?
            int alt255=2;
            int LA255_0 = input.LA(1);

            if ( (LA255_0==KW_LIMIT) ) {
                alt255=1;
            }
            switch (alt255) {
                case 1 :
                    // HiveParser.g:2267:5: l= limitClause
                    {
                    pushFollow(FOLLOW_limitClause_in_setOpSelectStatement14535);
                    l=limitClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_limitClause.add(l.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: sort, l, c, win, o, d
            // token labels: 
            // rule labels: c, d, sort, l, win, retval, o
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.tree:null);
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.tree:null);
            RewriteRuleSubtreeStream stream_sort=new RewriteRuleSubtreeStream(adaptor,"rule sort",sort!=null?sort.tree:null);
            RewriteRuleSubtreeStream stream_l=new RewriteRuleSubtreeStream(adaptor,"rule l",l!=null?l.tree:null);
            RewriteRuleSubtreeStream stream_win=new RewriteRuleSubtreeStream(adaptor,"rule win",win!=null?win.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_o=new RewriteRuleSubtreeStream(adaptor,"rule o",o!=null?o.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2268:4: -> {o==null && c==null && d==null && sort==null && win==null && l==null && !topLevel}?
            if (o==null && c==null && d==null && sort==null && win==null && l==null && !topLevel) {
                adaptor.addChild(root_0, ((CommonTree)retval.tree));

            }

            else // 2270:4: -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ( $o)? ( $c)? ( $d)? ( $sort)? ( $win)? ( $l)? ) )
            {
                // HiveParser.g:2270:7: ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ( $o)? ( $c)? ( $d)? ( $sort)? ( $win)? ( $l)? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY")
                , root_1);

                // HiveParser.g:2271:11: ^( TOK_FROM ^( TOK_SUBQUERY ) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_FROM, "TOK_FROM")
                , root_2);

                // HiveParser.g:2272:13: ^( TOK_SUBQUERY )
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY")
                , root_3);

                adaptor.addChild(root_3, ((CommonTree)retval.tree));

                adaptor.addChild(root_3, adaptor.create(Identifier, generateUnionAlias()));

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                // HiveParser.g:2277:11: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ( $o)? ( $c)? ( $d)? ( $sort)? ( $win)? ( $l)? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT")
                , root_2);

                // HiveParser.g:2278:14: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION")
                , root_3);

                // HiveParser.g:2278:32: ^( TOK_DIR TOK_TMP_FILE )
                {
                CommonTree root_4 = (CommonTree)adaptor.nil();
                root_4 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DIR, "TOK_DIR")
                , root_4);

                adaptor.addChild(root_4, 
                (CommonTree)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE")
                );

                adaptor.addChild(root_3, root_4);
                }

                adaptor.addChild(root_2, root_3);
                }

                // HiveParser.g:2279:14: ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) )
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SELECT, "TOK_SELECT")
                , root_3);

                // HiveParser.g:2279:27: ^( TOK_SELEXPR TOK_ALLCOLREF )
                {
                CommonTree root_4 = (CommonTree)adaptor.nil();
                root_4 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR")
                , root_4);

                adaptor.addChild(root_4, 
                (CommonTree)adaptor.create(TOK_ALLCOLREF, "TOK_ALLCOLREF")
                );

                adaptor.addChild(root_3, root_4);
                }

                adaptor.addChild(root_2, root_3);
                }

                // HiveParser.g:2280:15: ( $o)?
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_2, stream_o.nextTree());

                }
                stream_o.reset();

                // HiveParser.g:2280:19: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_2, stream_c.nextTree());

                }
                stream_c.reset();

                // HiveParser.g:2280:23: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_2, stream_d.nextTree());

                }
                stream_d.reset();

                // HiveParser.g:2280:27: ( $sort)?
                if ( stream_sort.hasNext() ) {
                    adaptor.addChild(root_2, stream_sort.nextTree());

                }
                stream_sort.reset();

                // HiveParser.g:2280:34: ( $win)?
                if ( stream_win.hasNext() ) {
                    adaptor.addChild(root_2, stream_win.nextTree());

                }
                stream_win.reset();

                // HiveParser.g:2280:40: ( $l)?
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_2, stream_l.nextTree());

                }
                stream_l.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "setOpSelectStatement"


    public static class simpleSelectStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simpleSelectStatement"
    // HiveParser.g:2285:1: simpleSelectStatement : selectClause ( fromClause )? ( whereClause )? ( groupByClause )? ( havingClause )? ( ( window_clause )=> window_clause )? -> ^( TOK_QUERY ( fromClause )? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ) ) ;
    public final HiveParser.simpleSelectStatement_return simpleSelectStatement() throws RecognitionException {
        HiveParser.simpleSelectStatement_return retval = new HiveParser.simpleSelectStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser_SelectClauseParser.selectClause_return selectClause832 =null;

        HiveParser_FromClauseParser.fromClause_return fromClause833 =null;

        HiveParser_FromClauseParser.whereClause_return whereClause834 =null;

        HiveParser_IdentifiersParser.groupByClause_return groupByClause835 =null;

        HiveParser_IdentifiersParser.havingClause_return havingClause836 =null;

        HiveParser_SelectClauseParser.window_clause_return window_clause837 =null;


        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
        RewriteRuleSubtreeStream stream_window_clause=new RewriteRuleSubtreeStream(adaptor,"rule window_clause");
        try {
            // HiveParser.g:2286:4: ( selectClause ( fromClause )? ( whereClause )? ( groupByClause )? ( havingClause )? ( ( window_clause )=> window_clause )? -> ^( TOK_QUERY ( fromClause )? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ) ) )
            // HiveParser.g:2287:4: selectClause ( fromClause )? ( whereClause )? ( groupByClause )? ( havingClause )? ( ( window_clause )=> window_clause )?
            {
            pushFollow(FOLLOW_selectClause_in_simpleSelectStatement14781);
            selectClause832=selectClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectClause.add(selectClause832.getTree());

            // HiveParser.g:2288:4: ( fromClause )?
            int alt256=2;
            int LA256_0 = input.LA(1);

            if ( (LA256_0==KW_FROM) ) {
                alt256=1;
            }
            switch (alt256) {
                case 1 :
                    // HiveParser.g:2288:4: fromClause
                    {
                    pushFollow(FOLLOW_fromClause_in_simpleSelectStatement14786);
                    fromClause833=fromClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fromClause.add(fromClause833.getTree());

                    }
                    break;

            }


            // HiveParser.g:2289:4: ( whereClause )?
            int alt257=2;
            int LA257_0 = input.LA(1);

            if ( (LA257_0==KW_WHERE) ) {
                alt257=1;
            }
            switch (alt257) {
                case 1 :
                    // HiveParser.g:2289:4: whereClause
                    {
                    pushFollow(FOLLOW_whereClause_in_simpleSelectStatement14792);
                    whereClause834=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause834.getTree());

                    }
                    break;

            }


            // HiveParser.g:2290:4: ( groupByClause )?
            int alt258=2;
            int LA258_0 = input.LA(1);

            if ( (LA258_0==KW_GROUP) ) {
                alt258=1;
            }
            switch (alt258) {
                case 1 :
                    // HiveParser.g:2290:4: groupByClause
                    {
                    pushFollow(FOLLOW_groupByClause_in_simpleSelectStatement14798);
                    groupByClause835=groupByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByClause.add(groupByClause835.getTree());

                    }
                    break;

            }


            // HiveParser.g:2291:4: ( havingClause )?
            int alt259=2;
            int LA259_0 = input.LA(1);

            if ( (LA259_0==KW_HAVING) ) {
                alt259=1;
            }
            switch (alt259) {
                case 1 :
                    // HiveParser.g:2291:4: havingClause
                    {
                    pushFollow(FOLLOW_havingClause_in_simpleSelectStatement14804);
                    havingClause836=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause836.getTree());

                    }
                    break;

            }


            // HiveParser.g:2292:4: ( ( window_clause )=> window_clause )?
            int alt260=2;
            int LA260_0 = input.LA(1);

            if ( (LA260_0==KW_WINDOW) ) {
                int LA260_1 = input.LA(2);

                if ( (LA260_1==Identifier) ) {
                    int LA260_10 = input.LA(3);

                    if ( (LA260_10==KW_AS) ) {
                        int LA260_11 = input.LA(4);

                        if ( (synpred15_HiveParser()) ) {
                            alt260=1;
                        }
                    }
                }
            }
            switch (alt260) {
                case 1 :
                    // HiveParser.g:2292:5: ( window_clause )=> window_clause
                    {
                    pushFollow(FOLLOW_window_clause_in_simpleSelectStatement14817);
                    window_clause837=window_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_window_clause.add(window_clause837.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: havingClause, whereClause, fromClause, groupByClause, selectClause, window_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2293:4: -> ^( TOK_QUERY ( fromClause )? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ) )
            {
                // HiveParser.g:2293:7: ^( TOK_QUERY ( fromClause )? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY")
                , root_1);

                // HiveParser.g:2293:19: ( fromClause )?
                if ( stream_fromClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_fromClause.nextTree());

                }
                stream_fromClause.reset();

                // HiveParser.g:2293:31: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT")
                , root_2);

                // HiveParser.g:2293:44: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION")
                , root_3);

                // HiveParser.g:2293:62: ^( TOK_DIR TOK_TMP_FILE )
                {
                CommonTree root_4 = (CommonTree)adaptor.nil();
                root_4 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DIR, "TOK_DIR")
                , root_4);

                adaptor.addChild(root_4, 
                (CommonTree)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE")
                );

                adaptor.addChild(root_3, root_4);
                }

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_2, stream_selectClause.nextTree());

                // HiveParser.g:2294:35: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                // HiveParser.g:2294:48: ( groupByClause )?
                if ( stream_groupByClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_groupByClause.nextTree());

                }
                stream_groupByClause.reset();

                // HiveParser.g:2294:63: ( havingClause )?
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_havingClause.nextTree());

                }
                stream_havingClause.reset();

                // HiveParser.g:2294:77: ( window_clause )?
                if ( stream_window_clause.hasNext() ) {
                    adaptor.addChild(root_2, stream_window_clause.nextTree());

                }
                stream_window_clause.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simpleSelectStatement"


    public static class selectStatementWithCTE_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selectStatementWithCTE"
    // HiveParser.g:2297:1: selectStatementWithCTE : (w= withClause )? selectStatement[true] -> selectStatement ;
    public final HiveParser.selectStatementWithCTE_return selectStatementWithCTE() throws RecognitionException {
        HiveParser.selectStatementWithCTE_return retval = new HiveParser.selectStatementWithCTE_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.withClause_return w =null;

        HiveParser.selectStatement_return selectStatement838 =null;


        RewriteRuleSubtreeStream stream_withClause=new RewriteRuleSubtreeStream(adaptor,"rule withClause");
        RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
        try {
            // HiveParser.g:2298:5: ( (w= withClause )? selectStatement[true] -> selectStatement )
            // HiveParser.g:2299:5: (w= withClause )? selectStatement[true]
            {
            // HiveParser.g:2299:5: (w= withClause )?
            int alt261=2;
            int LA261_0 = input.LA(1);

            if ( (LA261_0==KW_WITH) ) {
                alt261=1;
            }
            switch (alt261) {
                case 1 :
                    // HiveParser.g:2299:6: w= withClause
                    {
                    pushFollow(FOLLOW_withClause_in_selectStatementWithCTE14903);
                    w=withClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_withClause.add(w.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_selectStatement_in_selectStatementWithCTE14911);
            selectStatement838=selectStatement(true);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectStatement.add(selectStatement838.getTree());

            if ( state.backtracking==0 ) {
                  if ((w!=null?((CommonTree)w.tree):null) != null) {
                  adaptor.addChild((selectStatement838!=null?((CommonTree)selectStatement838.tree):null), (w!=null?((CommonTree)w.tree):null));
                  }
                }

            // AST REWRITE
            // elements: selectStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2305:5: -> selectStatement
            {
                adaptor.addChild(root_0, stream_selectStatement.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selectStatementWithCTE"


    public static class body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "body"
    // HiveParser.g:2308:1: body : ( insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? -> ^( TOK_INSERT insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? ) | selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? ) );
    public final HiveParser.body_return body() throws RecognitionException {
        HiveParser.body_return retval = new HiveParser.body_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        HiveParser.insertClause_return insertClause839 =null;

        HiveParser_SelectClauseParser.selectClause_return selectClause840 =null;

        HiveParser_FromClauseParser.lateralView_return lateralView841 =null;

        HiveParser_FromClauseParser.whereClause_return whereClause842 =null;

        HiveParser_IdentifiersParser.groupByClause_return groupByClause843 =null;

        HiveParser_IdentifiersParser.havingClause_return havingClause844 =null;

        HiveParser_IdentifiersParser.orderByClause_return orderByClause845 =null;

        HiveParser_IdentifiersParser.clusterByClause_return clusterByClause846 =null;

        HiveParser_IdentifiersParser.distributeByClause_return distributeByClause847 =null;

        HiveParser_IdentifiersParser.sortByClause_return sortByClause848 =null;

        HiveParser_SelectClauseParser.window_clause_return window_clause849 =null;

        HiveParser.limitClause_return limitClause850 =null;

        HiveParser_SelectClauseParser.selectClause_return selectClause851 =null;

        HiveParser_FromClauseParser.lateralView_return lateralView852 =null;

        HiveParser_FromClauseParser.whereClause_return whereClause853 =null;

        HiveParser_IdentifiersParser.groupByClause_return groupByClause854 =null;

        HiveParser_IdentifiersParser.havingClause_return havingClause855 =null;

        HiveParser_IdentifiersParser.orderByClause_return orderByClause856 =null;

        HiveParser_IdentifiersParser.clusterByClause_return clusterByClause857 =null;

        HiveParser_IdentifiersParser.distributeByClause_return distributeByClause858 =null;

        HiveParser_IdentifiersParser.sortByClause_return sortByClause859 =null;

        HiveParser_SelectClauseParser.window_clause_return window_clause860 =null;

        HiveParser.limitClause_return limitClause861 =null;


        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
        RewriteRuleSubtreeStream stream_lateralView=new RewriteRuleSubtreeStream(adaptor,"rule lateralView");
        RewriteRuleSubtreeStream stream_insertClause=new RewriteRuleSubtreeStream(adaptor,"rule insertClause");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
        RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
        RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
        RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
        RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
        RewriteRuleSubtreeStream stream_window_clause=new RewriteRuleSubtreeStream(adaptor,"rule window_clause");
        try {
            // HiveParser.g:2309:4: ( insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? -> ^( TOK_INSERT insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? ) | selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? ) )
            int alt282=2;
            int LA282_0 = input.LA(1);

            if ( (LA282_0==KW_INSERT) ) {
                alt282=1;
            }
            else if ( (LA282_0==KW_MAP||LA282_0==KW_REDUCE||LA282_0==KW_SELECT) ) {
                alt282=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 282, 0, input);

                throw nvae;

            }
            switch (alt282) {
                case 1 :
                    // HiveParser.g:2310:4: insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )?
                    {
                    pushFollow(FOLLOW_insertClause_in_body14942);
                    insertClause839=insertClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertClause.add(insertClause839.getTree());

                    pushFollow(FOLLOW_selectClause_in_body14947);
                    selectClause840=selectClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_selectClause.add(selectClause840.getTree());

                    // HiveParser.g:2312:4: ( lateralView )?
                    int alt262=2;
                    int LA262_0 = input.LA(1);

                    if ( (LA262_0==KW_LATERAL) ) {
                        alt262=1;
                    }
                    switch (alt262) {
                        case 1 :
                            // HiveParser.g:2312:4: lateralView
                            {
                            pushFollow(FOLLOW_lateralView_in_body14952);
                            lateralView841=lateralView();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_lateralView.add(lateralView841.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2313:4: ( whereClause )?
                    int alt263=2;
                    int LA263_0 = input.LA(1);

                    if ( (LA263_0==KW_WHERE) ) {
                        alt263=1;
                    }
                    switch (alt263) {
                        case 1 :
                            // HiveParser.g:2313:4: whereClause
                            {
                            pushFollow(FOLLOW_whereClause_in_body14958);
                            whereClause842=whereClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause842.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2314:4: ( groupByClause )?
                    int alt264=2;
                    int LA264_0 = input.LA(1);

                    if ( (LA264_0==KW_GROUP) ) {
                        alt264=1;
                    }
                    switch (alt264) {
                        case 1 :
                            // HiveParser.g:2314:4: groupByClause
                            {
                            pushFollow(FOLLOW_groupByClause_in_body14964);
                            groupByClause843=groupByClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_groupByClause.add(groupByClause843.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2315:4: ( havingClause )?
                    int alt265=2;
                    int LA265_0 = input.LA(1);

                    if ( (LA265_0==KW_HAVING) ) {
                        alt265=1;
                    }
                    switch (alt265) {
                        case 1 :
                            // HiveParser.g:2315:4: havingClause
                            {
                            pushFollow(FOLLOW_havingClause_in_body14970);
                            havingClause844=havingClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_havingClause.add(havingClause844.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2316:4: ( orderByClause )?
                    int alt266=2;
                    int LA266_0 = input.LA(1);

                    if ( (LA266_0==KW_ORDER) ) {
                        alt266=1;
                    }
                    switch (alt266) {
                        case 1 :
                            // HiveParser.g:2316:4: orderByClause
                            {
                            pushFollow(FOLLOW_orderByClause_in_body14976);
                            orderByClause845=orderByClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_orderByClause.add(orderByClause845.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2317:4: ( clusterByClause )?
                    int alt267=2;
                    int LA267_0 = input.LA(1);

                    if ( (LA267_0==KW_CLUSTER) ) {
                        alt267=1;
                    }
                    switch (alt267) {
                        case 1 :
                            // HiveParser.g:2317:4: clusterByClause
                            {
                            pushFollow(FOLLOW_clusterByClause_in_body14982);
                            clusterByClause846=clusterByClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_clusterByClause.add(clusterByClause846.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2318:4: ( distributeByClause )?
                    int alt268=2;
                    int LA268_0 = input.LA(1);

                    if ( (LA268_0==KW_DISTRIBUTE) ) {
                        alt268=1;
                    }
                    switch (alt268) {
                        case 1 :
                            // HiveParser.g:2318:4: distributeByClause
                            {
                            pushFollow(FOLLOW_distributeByClause_in_body14988);
                            distributeByClause847=distributeByClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distributeByClause.add(distributeByClause847.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2319:4: ( sortByClause )?
                    int alt269=2;
                    int LA269_0 = input.LA(1);

                    if ( (LA269_0==KW_SORT) ) {
                        alt269=1;
                    }
                    switch (alt269) {
                        case 1 :
                            // HiveParser.g:2319:4: sortByClause
                            {
                            pushFollow(FOLLOW_sortByClause_in_body14994);
                            sortByClause848=sortByClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sortByClause.add(sortByClause848.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2320:4: ( window_clause )?
                    int alt270=2;
                    int LA270_0 = input.LA(1);

                    if ( (LA270_0==KW_WINDOW) ) {
                        alt270=1;
                    }
                    switch (alt270) {
                        case 1 :
                            // HiveParser.g:2320:4: window_clause
                            {
                            pushFollow(FOLLOW_window_clause_in_body15000);
                            window_clause849=window_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_window_clause.add(window_clause849.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2321:4: ( limitClause )?
                    int alt271=2;
                    int LA271_0 = input.LA(1);

                    if ( (LA271_0==KW_LIMIT) ) {
                        alt271=1;
                    }
                    switch (alt271) {
                        case 1 :
                            // HiveParser.g:2321:4: limitClause
                            {
                            pushFollow(FOLLOW_limitClause_in_body15006);
                            limitClause850=limitClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_limitClause.add(limitClause850.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: orderByClause, selectClause, groupByClause, limitClause, distributeByClause, insertClause, window_clause, sortByClause, havingClause, whereClause, clusterByClause, lateralView
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2321:17: -> ^( TOK_INSERT insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? )
                    {
                        // HiveParser.g:2321:20: ^( TOK_INSERT insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT")
                        , root_1);

                        adaptor.addChild(root_1, stream_insertClause.nextTree());

                        adaptor.addChild(root_1, stream_selectClause.nextTree());

                        // HiveParser.g:2322:35: ( lateralView )?
                        if ( stream_lateralView.hasNext() ) {
                            adaptor.addChild(root_1, stream_lateralView.nextTree());

                        }
                        stream_lateralView.reset();

                        // HiveParser.g:2322:48: ( whereClause )?
                        if ( stream_whereClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whereClause.nextTree());

                        }
                        stream_whereClause.reset();

                        // HiveParser.g:2322:61: ( groupByClause )?
                        if ( stream_groupByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_groupByClause.nextTree());

                        }
                        stream_groupByClause.reset();

                        // HiveParser.g:2322:76: ( havingClause )?
                        if ( stream_havingClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_havingClause.nextTree());

                        }
                        stream_havingClause.reset();

                        // HiveParser.g:2322:90: ( orderByClause )?
                        if ( stream_orderByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_orderByClause.nextTree());

                        }
                        stream_orderByClause.reset();

                        // HiveParser.g:2322:105: ( clusterByClause )?
                        if ( stream_clusterByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_clusterByClause.nextTree());

                        }
                        stream_clusterByClause.reset();

                        // HiveParser.g:2323:22: ( distributeByClause )?
                        if ( stream_distributeByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_distributeByClause.nextTree());

                        }
                        stream_distributeByClause.reset();

                        // HiveParser.g:2323:42: ( sortByClause )?
                        if ( stream_sortByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_sortByClause.nextTree());

                        }
                        stream_sortByClause.reset();

                        // HiveParser.g:2323:56: ( window_clause )?
                        if ( stream_window_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_window_clause.nextTree());

                        }
                        stream_window_clause.reset();

                        // HiveParser.g:2323:71: ( limitClause )?
                        if ( stream_limitClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_limitClause.nextTree());

                        }
                        stream_limitClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:2325:4: selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )?
                    {
                    pushFollow(FOLLOW_selectClause_in_body15099);
                    selectClause851=selectClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_selectClause.add(selectClause851.getTree());

                    // HiveParser.g:2326:4: ( lateralView )?
                    int alt272=2;
                    int LA272_0 = input.LA(1);

                    if ( (LA272_0==KW_LATERAL) ) {
                        alt272=1;
                    }
                    switch (alt272) {
                        case 1 :
                            // HiveParser.g:2326:4: lateralView
                            {
                            pushFollow(FOLLOW_lateralView_in_body15104);
                            lateralView852=lateralView();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_lateralView.add(lateralView852.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2327:4: ( whereClause )?
                    int alt273=2;
                    int LA273_0 = input.LA(1);

                    if ( (LA273_0==KW_WHERE) ) {
                        alt273=1;
                    }
                    switch (alt273) {
                        case 1 :
                            // HiveParser.g:2327:4: whereClause
                            {
                            pushFollow(FOLLOW_whereClause_in_body15110);
                            whereClause853=whereClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause853.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2328:4: ( groupByClause )?
                    int alt274=2;
                    int LA274_0 = input.LA(1);

                    if ( (LA274_0==KW_GROUP) ) {
                        alt274=1;
                    }
                    switch (alt274) {
                        case 1 :
                            // HiveParser.g:2328:4: groupByClause
                            {
                            pushFollow(FOLLOW_groupByClause_in_body15116);
                            groupByClause854=groupByClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_groupByClause.add(groupByClause854.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2329:4: ( havingClause )?
                    int alt275=2;
                    int LA275_0 = input.LA(1);

                    if ( (LA275_0==KW_HAVING) ) {
                        alt275=1;
                    }
                    switch (alt275) {
                        case 1 :
                            // HiveParser.g:2329:4: havingClause
                            {
                            pushFollow(FOLLOW_havingClause_in_body15122);
                            havingClause855=havingClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_havingClause.add(havingClause855.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2330:4: ( orderByClause )?
                    int alt276=2;
                    int LA276_0 = input.LA(1);

                    if ( (LA276_0==KW_ORDER) ) {
                        alt276=1;
                    }
                    switch (alt276) {
                        case 1 :
                            // HiveParser.g:2330:4: orderByClause
                            {
                            pushFollow(FOLLOW_orderByClause_in_body15128);
                            orderByClause856=orderByClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_orderByClause.add(orderByClause856.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2331:4: ( clusterByClause )?
                    int alt277=2;
                    int LA277_0 = input.LA(1);

                    if ( (LA277_0==KW_CLUSTER) ) {
                        alt277=1;
                    }
                    switch (alt277) {
                        case 1 :
                            // HiveParser.g:2331:4: clusterByClause
                            {
                            pushFollow(FOLLOW_clusterByClause_in_body15134);
                            clusterByClause857=clusterByClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_clusterByClause.add(clusterByClause857.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2332:4: ( distributeByClause )?
                    int alt278=2;
                    int LA278_0 = input.LA(1);

                    if ( (LA278_0==KW_DISTRIBUTE) ) {
                        alt278=1;
                    }
                    switch (alt278) {
                        case 1 :
                            // HiveParser.g:2332:4: distributeByClause
                            {
                            pushFollow(FOLLOW_distributeByClause_in_body15140);
                            distributeByClause858=distributeByClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distributeByClause.add(distributeByClause858.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2333:4: ( sortByClause )?
                    int alt279=2;
                    int LA279_0 = input.LA(1);

                    if ( (LA279_0==KW_SORT) ) {
                        alt279=1;
                    }
                    switch (alt279) {
                        case 1 :
                            // HiveParser.g:2333:4: sortByClause
                            {
                            pushFollow(FOLLOW_sortByClause_in_body15146);
                            sortByClause859=sortByClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sortByClause.add(sortByClause859.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2334:4: ( window_clause )?
                    int alt280=2;
                    int LA280_0 = input.LA(1);

                    if ( (LA280_0==KW_WINDOW) ) {
                        alt280=1;
                    }
                    switch (alt280) {
                        case 1 :
                            // HiveParser.g:2334:4: window_clause
                            {
                            pushFollow(FOLLOW_window_clause_in_body15152);
                            window_clause860=window_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_window_clause.add(window_clause860.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2335:4: ( limitClause )?
                    int alt281=2;
                    int LA281_0 = input.LA(1);

                    if ( (LA281_0==KW_LIMIT) ) {
                        alt281=1;
                    }
                    switch (alt281) {
                        case 1 :
                            // HiveParser.g:2335:4: limitClause
                            {
                            pushFollow(FOLLOW_limitClause_in_body15158);
                            limitClause861=limitClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_limitClause.add(limitClause861.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: selectClause, groupByClause, havingClause, limitClause, window_clause, orderByClause, whereClause, lateralView, distributeByClause, clusterByClause, sortByClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2335:17: -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? )
                    {
                        // HiveParser.g:2335:20: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT")
                        , root_1);

                        // HiveParser.g:2335:33: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION")
                        , root_2);

                        // HiveParser.g:2335:51: ^( TOK_DIR TOK_TMP_FILE )
                        {
                        CommonTree root_3 = (CommonTree)adaptor.nil();
                        root_3 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_DIR, "TOK_DIR")
                        , root_3);

                        adaptor.addChild(root_3, 
                        (CommonTree)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE")
                        );

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_selectClause.nextTree());

                        // HiveParser.g:2336:35: ( lateralView )?
                        if ( stream_lateralView.hasNext() ) {
                            adaptor.addChild(root_1, stream_lateralView.nextTree());

                        }
                        stream_lateralView.reset();

                        // HiveParser.g:2336:48: ( whereClause )?
                        if ( stream_whereClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whereClause.nextTree());

                        }
                        stream_whereClause.reset();

                        // HiveParser.g:2336:61: ( groupByClause )?
                        if ( stream_groupByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_groupByClause.nextTree());

                        }
                        stream_groupByClause.reset();

                        // HiveParser.g:2336:76: ( havingClause )?
                        if ( stream_havingClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_havingClause.nextTree());

                        }
                        stream_havingClause.reset();

                        // HiveParser.g:2336:90: ( orderByClause )?
                        if ( stream_orderByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_orderByClause.nextTree());

                        }
                        stream_orderByClause.reset();

                        // HiveParser.g:2336:105: ( clusterByClause )?
                        if ( stream_clusterByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_clusterByClause.nextTree());

                        }
                        stream_clusterByClause.reset();

                        // HiveParser.g:2337:22: ( distributeByClause )?
                        if ( stream_distributeByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_distributeByClause.nextTree());

                        }
                        stream_distributeByClause.reset();

                        // HiveParser.g:2337:42: ( sortByClause )?
                        if ( stream_sortByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_sortByClause.nextTree());

                        }
                        stream_sortByClause.reset();

                        // HiveParser.g:2337:56: ( window_clause )?
                        if ( stream_window_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_window_clause.nextTree());

                        }
                        stream_window_clause.reset();

                        // HiveParser.g:2337:71: ( limitClause )?
                        if ( stream_limitClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_limitClause.nextTree());

                        }
                        stream_limitClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "body"


    public static class insertClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "insertClause"
    // HiveParser.g:2340:1: insertClause : ( KW_INSERT KW_OVERWRITE destination ( ifNotExists )? -> ^( TOK_DESTINATION destination ( ifNotExists )? ) | KW_INSERT KW_INTO ( KW_TABLE )? tableOrPartition ( LPAREN targetCols= columnNameList RPAREN )? -> ^( TOK_INSERT_INTO tableOrPartition ( $targetCols)? ) );
    public final HiveParser.insertClause_return insertClause() throws RecognitionException {
        HiveParser.insertClause_return retval = new HiveParser.insertClause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_INSERT862=null;
        Token KW_OVERWRITE863=null;
        Token KW_INSERT866=null;
        Token KW_INTO867=null;
        Token KW_TABLE868=null;
        Token LPAREN870=null;
        Token RPAREN871=null;
        HiveParser.columnNameList_return targetCols =null;

        HiveParser.destination_return destination864 =null;

        HiveParser.ifNotExists_return ifNotExists865 =null;

        HiveParser_IdentifiersParser.tableOrPartition_return tableOrPartition869 =null;


        CommonTree KW_INSERT862_tree=null;
        CommonTree KW_OVERWRITE863_tree=null;
        CommonTree KW_INSERT866_tree=null;
        CommonTree KW_INTO867_tree=null;
        CommonTree KW_TABLE868_tree=null;
        CommonTree LPAREN870_tree=null;
        CommonTree RPAREN871_tree=null;
        RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_INSERT=new RewriteRuleTokenStream(adaptor,"token KW_INSERT");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_OVERWRITE=new RewriteRuleTokenStream(adaptor,"token KW_OVERWRITE");
        RewriteRuleSubtreeStream stream_destination=new RewriteRuleSubtreeStream(adaptor,"rule destination");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
         pushMsg("insert clause", state); 
        try {
            // HiveParser.g:2343:4: ( KW_INSERT KW_OVERWRITE destination ( ifNotExists )? -> ^( TOK_DESTINATION destination ( ifNotExists )? ) | KW_INSERT KW_INTO ( KW_TABLE )? tableOrPartition ( LPAREN targetCols= columnNameList RPAREN )? -> ^( TOK_INSERT_INTO tableOrPartition ( $targetCols)? ) )
            int alt286=2;
            int LA286_0 = input.LA(1);

            if ( (LA286_0==KW_INSERT) ) {
                int LA286_1 = input.LA(2);

                if ( (LA286_1==KW_OVERWRITE) ) {
                    alt286=1;
                }
                else if ( (LA286_1==KW_INTO) ) {
                    alt286=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 286, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 286, 0, input);

                throw nvae;

            }
            switch (alt286) {
                case 1 :
                    // HiveParser.g:2344:6: KW_INSERT KW_OVERWRITE destination ( ifNotExists )?
                    {
                    KW_INSERT862=(Token)match(input,KW_INSERT,FOLLOW_KW_INSERT_in_insertClause15279); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_INSERT.add(KW_INSERT862);


                    KW_OVERWRITE863=(Token)match(input,KW_OVERWRITE,FOLLOW_KW_OVERWRITE_in_insertClause15281); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_OVERWRITE.add(KW_OVERWRITE863);


                    pushFollow(FOLLOW_destination_in_insertClause15283);
                    destination864=destination();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_destination.add(destination864.getTree());

                    // HiveParser.g:2344:41: ( ifNotExists )?
                    int alt283=2;
                    int LA283_0 = input.LA(1);

                    if ( (LA283_0==KW_IF) ) {
                        alt283=1;
                    }
                    switch (alt283) {
                        case 1 :
                            // HiveParser.g:2344:41: ifNotExists
                            {
                            pushFollow(FOLLOW_ifNotExists_in_insertClause15285);
                            ifNotExists865=ifNotExists();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists865.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: ifNotExists, destination
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2344:54: -> ^( TOK_DESTINATION destination ( ifNotExists )? )
                    {
                        // HiveParser.g:2344:57: ^( TOK_DESTINATION destination ( ifNotExists )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_destination.nextTree());

                        // HiveParser.g:2344:87: ( ifNotExists )?
                        if ( stream_ifNotExists.hasNext() ) {
                            adaptor.addChild(root_1, stream_ifNotExists.nextTree());

                        }
                        stream_ifNotExists.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:2345:6: KW_INSERT KW_INTO ( KW_TABLE )? tableOrPartition ( LPAREN targetCols= columnNameList RPAREN )?
                    {
                    KW_INSERT866=(Token)match(input,KW_INSERT,FOLLOW_KW_INSERT_in_insertClause15304); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_INSERT.add(KW_INSERT866);


                    KW_INTO867=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_insertClause15306); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_INTO.add(KW_INTO867);


                    // HiveParser.g:2345:24: ( KW_TABLE )?
                    int alt284=2;
                    int LA284_0 = input.LA(1);

                    if ( (LA284_0==KW_TABLE) ) {
                        switch ( input.LA(2) ) {
                            case Identifier:
                            case KW_ADD:
                            case KW_ADMIN:
                            case KW_AFTER:
                            case KW_ALL:
                            case KW_ALTER:
                            case KW_ANALYZE:
                            case KW_ARCHIVE:
                            case KW_ARRAY:
                            case KW_AS:
                            case KW_ASC:
                            case KW_AUTHORIZATION:
                            case KW_BEFORE:
                            case KW_BETWEEN:
                            case KW_BIGINT:
                            case KW_BINARY:
                            case KW_BOOLEAN:
                            case KW_BOTH:
                            case KW_BUCKET:
                            case KW_BUCKETS:
                            case KW_BY:
                            case KW_CASCADE:
                            case KW_CHANGE:
                            case KW_CLUSTER:
                            case KW_CLUSTERED:
                            case KW_CLUSTERSTATUS:
                            case KW_COLLECTION:
                            case KW_COLUMNS:
                            case KW_COMMENT:
                            case KW_COMPACT:
                            case KW_COMPACTIONS:
                            case KW_COMPUTE:
                            case KW_CONCATENATE:
                            case KW_CONTINUE:
                            case KW_CREATE:
                            case KW_CUBE:
                            case KW_CURRENT_DATE:
                            case KW_CURRENT_TIMESTAMP:
                            case KW_CURSOR:
                            case KW_DATA:
                            case KW_DATABASES:
                            case KW_DATE:
                            case KW_DATETIME:
                            case KW_DAY:
                            case KW_DBPROPERTIES:
                            case KW_DECIMAL:
                            case KW_DEFERRED:
                            case KW_DEFINED:
                            case KW_DELETE:
                            case KW_DELIMITED:
                            case KW_DEPENDENCY:
                            case KW_DESC:
                            case KW_DESCRIBE:
                            case KW_DIRECTORIES:
                            case KW_DIRECTORY:
                            case KW_DISABLE:
                            case KW_DISTRIBUTE:
                            case KW_DOUBLE:
                            case KW_DROP:
                            case KW_ELEM_TYPE:
                            case KW_ENABLE:
                            case KW_ESCAPED:
                            case KW_EXCLUSIVE:
                            case KW_EXISTS:
                            case KW_EXPLAIN:
                            case KW_EXPORT:
                            case KW_EXTERNAL:
                            case KW_FALSE:
                            case KW_FETCH:
                            case KW_FIELDS:
                            case KW_FILE:
                            case KW_FILEFORMAT:
                            case KW_FIRST:
                            case KW_FLOAT:
                            case KW_FOR:
                            case KW_FORMAT:
                            case KW_FORMATTED:
                            case KW_FULL:
                            case KW_FUNCTIONS:
                            case KW_GRANT:
                            case KW_GROUP:
                            case KW_GROUPING:
                            case KW_HOLD_DDLTIME:
                            case KW_HOUR:
                            case KW_IDXPROPERTIES:
                            case KW_IGNORE:
                            case KW_IMPORT:
                            case KW_IN:
                            case KW_INDEX:
                            case KW_INDEXES:
                            case KW_INNER:
                            case KW_INPATH:
                            case KW_INPUTDRIVER:
                            case KW_INPUTFORMAT:
                            case KW_INSERT:
                            case KW_INT:
                            case KW_INTERSECT:
                            case KW_INTO:
                            case KW_IS:
                            case KW_ITEMS:
                            case KW_JAR:
                            case KW_KEYS:
                            case KW_KEY_TYPE:
                            case KW_LATERAL:
                            case KW_LEFT:
                            case KW_LIKE:
                            case KW_LIMIT:
                            case KW_LINES:
                            case KW_LOAD:
                            case KW_LOCAL:
                            case KW_LOCATION:
                            case KW_LOCK:
                            case KW_LOCKS:
                            case KW_LOGICAL:
                            case KW_LONG:
                            case KW_MAPJOIN:
                            case KW_MATERIALIZED:
                            case KW_METADATA:
                            case KW_MINUS:
                            case KW_MINUTE:
                            case KW_MONTH:
                            case KW_MSCK:
                            case KW_NONE:
                            case KW_NOSCAN:
                            case KW_NO_DROP:
                            case KW_NULL:
                            case KW_OF:
                            case KW_OFFLINE:
                            case KW_OPTION:
                            case KW_ORDER:
                            case KW_OUT:
                            case KW_OUTER:
                            case KW_OUTPUTDRIVER:
                            case KW_OUTPUTFORMAT:
                            case KW_OVERWRITE:
                            case KW_OWNER:
                            case KW_PARTITIONED:
                            case KW_PARTITIONS:
                            case KW_PERCENT:
                            case KW_PLUS:
                            case KW_PRETTY:
                            case KW_PRINCIPALS:
                            case KW_PROCEDURE:
                            case KW_PROTECTION:
                            case KW_PURGE:
                            case KW_RANGE:
                            case KW_READ:
                            case KW_READONLY:
                            case KW_READS:
                            case KW_REBUILD:
                            case KW_RECORDREADER:
                            case KW_RECORDWRITER:
                            case KW_REGEXP:
                            case KW_RELOAD:
                            case KW_RENAME:
                            case KW_REPAIR:
                            case KW_REPLACE:
                            case KW_REPLICATION:
                            case KW_RESTRICT:
                            case KW_REVOKE:
                            case KW_REWRITE:
                            case KW_RIGHT:
                            case KW_RLIKE:
                            case KW_ROLE:
                            case KW_ROLES:
                            case KW_ROLLUP:
                            case KW_ROW:
                            case KW_ROWS:
                            case KW_SCHEMA:
                            case KW_SCHEMAS:
                            case KW_SECOND:
                            case KW_SEMI:
                            case KW_SERDE:
                            case KW_SERDEPROPERTIES:
                            case KW_SERVER:
                            case KW_SET:
                            case KW_SETS:
                            case KW_SHARED:
                            case KW_SHOW:
                            case KW_SHOW_DATABASE:
                            case KW_SKEWED:
                            case KW_SMALLINT:
                            case KW_SORT:
                            case KW_SORTED:
                            case KW_SSL:
                            case KW_STATISTICS:
                            case KW_STORED:
                            case KW_STREAMTABLE:
                            case KW_STRING:
                            case KW_STRUCT:
                            case KW_TABLE:
                            case KW_TABLES:
                            case KW_TBLPROPERTIES:
                            case KW_TEMPORARY:
                            case KW_TERMINATED:
                            case KW_TIMESTAMP:
                            case KW_TINYINT:
                            case KW_TO:
                            case KW_TOUCH:
                            case KW_TRANSACTIONS:
                            case KW_TRIGGER:
                            case KW_TRUE:
                            case KW_TRUNCATE:
                            case KW_UNARCHIVE:
                            case KW_UNDO:
                            case KW_UNION:
                            case KW_UNIONTYPE:
                            case KW_UNLOCK:
                            case KW_UNSET:
                            case KW_UNSIGNED:
                            case KW_UPDATE:
                            case KW_URI:
                            case KW_USE:
                            case KW_USER:
                            case KW_USING:
                            case KW_UTC:
                            case KW_UTCTIMESTAMP:
                            case KW_VALUE_TYPE:
                            case KW_VIEW:
                            case KW_WHILE:
                            case KW_WITH:
                            case KW_YEAR:
                                {
                                alt284=1;
                                }
                                break;
                            case KW_PARTITION:
                                {
                                int LA284_7 = input.LA(3);

                                if ( (LA284_7==LPAREN) ) {
                                    int LA284_16 = input.LA(4);

                                    if ( (!(((useSQL11ReservedKeywordsForIdentifier())))) ) {
                                        alt284=1;
                                    }
                                }
                                else if ( (LA284_7==DOT||LA284_7==KW_MAP||LA284_7==KW_PARTITION||LA284_7==KW_REDUCE||LA284_7==KW_SELECT||LA284_7==KW_VALUES) ) {
                                    alt284=1;
                                }
                                }
                                break;
                            case KW_VALUES:
                                {
                                int LA284_9 = input.LA(3);

                                if ( (LA284_9==DOT||LA284_9==KW_MAP||LA284_9==KW_PARTITION||LA284_9==KW_REDUCE||LA284_9==KW_SELECT||LA284_9==KW_VALUES) ) {
                                    alt284=1;
                                }
                                else if ( (LA284_9==LPAREN) ) {
                                    int LA284_27 = input.LA(4);

                                    if ( (!(((useSQL11ReservedKeywordsForIdentifier())))) ) {
                                        alt284=1;
                                    }
                                }
                                }
                                break;
                        }

                    }
                    switch (alt284) {
                        case 1 :
                            // HiveParser.g:2345:24: KW_TABLE
                            {
                            KW_TABLE868=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_insertClause15308); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE868);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_tableOrPartition_in_insertClause15311);
                    tableOrPartition869=tableOrPartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableOrPartition.add(tableOrPartition869.getTree());

                    // HiveParser.g:2345:51: ( LPAREN targetCols= columnNameList RPAREN )?
                    int alt285=2;
                    int LA285_0 = input.LA(1);

                    if ( (LA285_0==LPAREN) ) {
                        alt285=1;
                    }
                    switch (alt285) {
                        case 1 :
                            // HiveParser.g:2345:52: LPAREN targetCols= columnNameList RPAREN
                            {
                            LPAREN870=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertClause15314); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN870);


                            pushFollow(FOLLOW_columnNameList_in_insertClause15318);
                            targetCols=columnNameList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_columnNameList.add(targetCols.getTree());

                            RPAREN871=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertClause15320); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN871);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: tableOrPartition, targetCols
                    // token labels: 
                    // rule labels: targetCols, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_targetCols=new RewriteRuleSubtreeStream(adaptor,"rule targetCols",targetCols!=null?targetCols.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2346:8: -> ^( TOK_INSERT_INTO tableOrPartition ( $targetCols)? )
                    {
                        // HiveParser.g:2346:11: ^( TOK_INSERT_INTO tableOrPartition ( $targetCols)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_INSERT_INTO, "TOK_INSERT_INTO")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableOrPartition.nextTree());

                        // HiveParser.g:2346:47: ( $targetCols)?
                        if ( stream_targetCols.hasNext() ) {
                            adaptor.addChild(root_1, stream_targetCols.nextTree());

                        }
                        stream_targetCols.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "insertClause"


    public static class destination_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "destination"
    // HiveParser.g:2349:1: destination : ( (local= KW_LOCAL )? KW_DIRECTORY StringLiteral ( tableRowFormat )? ( tableFileFormat )? -> ^( TOK_DIR StringLiteral ( $local)? ( tableRowFormat )? ( tableFileFormat )? ) | KW_TABLE tableOrPartition -> tableOrPartition );
    public final HiveParser.destination_return destination() throws RecognitionException {
        HiveParser.destination_return retval = new HiveParser.destination_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token local=null;
        Token KW_DIRECTORY872=null;
        Token StringLiteral873=null;
        Token KW_TABLE876=null;
        HiveParser.tableRowFormat_return tableRowFormat874 =null;

        HiveParser.tableFileFormat_return tableFileFormat875 =null;

        HiveParser_IdentifiersParser.tableOrPartition_return tableOrPartition877 =null;


        CommonTree local_tree=null;
        CommonTree KW_DIRECTORY872_tree=null;
        CommonTree StringLiteral873_tree=null;
        CommonTree KW_TABLE876_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_DIRECTORY=new RewriteRuleTokenStream(adaptor,"token KW_DIRECTORY");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_LOCAL=new RewriteRuleTokenStream(adaptor,"token KW_LOCAL");
        RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
        RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
         pushMsg("destination specification", state); 
        try {
            // HiveParser.g:2352:4: ( (local= KW_LOCAL )? KW_DIRECTORY StringLiteral ( tableRowFormat )? ( tableFileFormat )? -> ^( TOK_DIR StringLiteral ( $local)? ( tableRowFormat )? ( tableFileFormat )? ) | KW_TABLE tableOrPartition -> tableOrPartition )
            int alt290=2;
            int LA290_0 = input.LA(1);

            if ( (LA290_0==KW_DIRECTORY||LA290_0==KW_LOCAL) ) {
                alt290=1;
            }
            else if ( (LA290_0==KW_TABLE) ) {
                alt290=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 290, 0, input);

                throw nvae;

            }
            switch (alt290) {
                case 1 :
                    // HiveParser.g:2353:6: (local= KW_LOCAL )? KW_DIRECTORY StringLiteral ( tableRowFormat )? ( tableFileFormat )?
                    {
                    // HiveParser.g:2353:6: (local= KW_LOCAL )?
                    int alt287=2;
                    int LA287_0 = input.LA(1);

                    if ( (LA287_0==KW_LOCAL) ) {
                        alt287=1;
                    }
                    switch (alt287) {
                        case 1 :
                            // HiveParser.g:2353:7: local= KW_LOCAL
                            {
                            local=(Token)match(input,KW_LOCAL,FOLLOW_KW_LOCAL_in_destination15376); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_LOCAL.add(local);


                            }
                            break;

                    }


                    KW_DIRECTORY872=(Token)match(input,KW_DIRECTORY,FOLLOW_KW_DIRECTORY_in_destination15380); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DIRECTORY.add(KW_DIRECTORY872);


                    StringLiteral873=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_destination15382); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral873);


                    // HiveParser.g:2353:53: ( tableRowFormat )?
                    int alt288=2;
                    int LA288_0 = input.LA(1);

                    if ( (LA288_0==KW_ROW) ) {
                        alt288=1;
                    }
                    switch (alt288) {
                        case 1 :
                            // HiveParser.g:2353:53: tableRowFormat
                            {
                            pushFollow(FOLLOW_tableRowFormat_in_destination15384);
                            tableRowFormat874=tableRowFormat();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tableRowFormat.add(tableRowFormat874.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2353:69: ( tableFileFormat )?
                    int alt289=2;
                    int LA289_0 = input.LA(1);

                    if ( (LA289_0==KW_STORED) ) {
                        alt289=1;
                    }
                    switch (alt289) {
                        case 1 :
                            // HiveParser.g:2353:69: tableFileFormat
                            {
                            pushFollow(FOLLOW_tableFileFormat_in_destination15387);
                            tableFileFormat875=tableFileFormat();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tableFileFormat.add(tableFileFormat875.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: StringLiteral, tableRowFormat, tableFileFormat, local
                    // token labels: local
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_local=new RewriteRuleTokenStream(adaptor,"token local",local);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2354:8: -> ^( TOK_DIR StringLiteral ( $local)? ( tableRowFormat )? ( tableFileFormat )? )
                    {
                        // HiveParser.g:2354:11: ^( TOK_DIR StringLiteral ( $local)? ( tableRowFormat )? ( tableFileFormat )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(TOK_DIR, "TOK_DIR")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_StringLiteral.nextNode()
                        );

                        // HiveParser.g:2354:36: ( $local)?
                        if ( stream_local.hasNext() ) {
                            adaptor.addChild(root_1, stream_local.nextNode());

                        }
                        stream_local.reset();

                        // HiveParser.g:2354:43: ( tableRowFormat )?
                        if ( stream_tableRowFormat.hasNext() ) {
                            adaptor.addChild(root_1, stream_tableRowFormat.nextTree());

                        }
                        stream_tableRowFormat.reset();

                        // HiveParser.g:2354:59: ( tableFileFormat )?
                        if ( stream_tableFileFormat.hasNext() ) {
                            adaptor.addChild(root_1, stream_tableFileFormat.nextTree());

                        }
                        stream_tableFileFormat.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:2355:6: KW_TABLE tableOrPartition
                    {
                    KW_TABLE876=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_destination15420); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE876);


                    pushFollow(FOLLOW_tableOrPartition_in_destination15422);
                    tableOrPartition877=tableOrPartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableOrPartition.add(tableOrPartition877.getTree());

                    // AST REWRITE
                    // elements: tableOrPartition
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2355:32: -> tableOrPartition
                    {
                        adaptor.addChild(root_0, stream_tableOrPartition.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "destination"


    public static class limitClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "limitClause"
    // HiveParser.g:2358:1: limitClause : KW_LIMIT num= Number -> ^( TOK_LIMIT $num) ;
    public final HiveParser.limitClause_return limitClause() throws RecognitionException {
        HiveParser.limitClause_return retval = new HiveParser.limitClause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token num=null;
        Token KW_LIMIT878=null;

        CommonTree num_tree=null;
        CommonTree KW_LIMIT878_tree=null;
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_KW_LIMIT=new RewriteRuleTokenStream(adaptor,"token KW_LIMIT");

         pushMsg("limit clause", state); 
        try {
            // HiveParser.g:2361:4: ( KW_LIMIT num= Number -> ^( TOK_LIMIT $num) )
            // HiveParser.g:2362:4: KW_LIMIT num= Number
            {
            KW_LIMIT878=(Token)match(input,KW_LIMIT,FOLLOW_KW_LIMIT_in_limitClause15454); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_LIMIT.add(KW_LIMIT878);


            num=(Token)match(input,Number,FOLLOW_Number_in_limitClause15458); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Number.add(num);


            // AST REWRITE
            // elements: num
            // token labels: num
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2362:24: -> ^( TOK_LIMIT $num)
            {
                // HiveParser.g:2362:27: ^( TOK_LIMIT $num)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_LIMIT, "TOK_LIMIT")
                , root_1);

                adaptor.addChild(root_1, stream_num.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "limitClause"


    public static class deleteStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "deleteStatement"
    // HiveParser.g:2366:1: deleteStatement : KW_DELETE KW_FROM tableName ( whereClause )? -> ^( TOK_DELETE_FROM tableName ( whereClause )? ) ;
    public final HiveParser.deleteStatement_return deleteStatement() throws RecognitionException {
        HiveParser.deleteStatement_return retval = new HiveParser.deleteStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_DELETE879=null;
        Token KW_FROM880=null;
        HiveParser_FromClauseParser.tableName_return tableName881 =null;

        HiveParser_FromClauseParser.whereClause_return whereClause882 =null;


        CommonTree KW_DELETE879_tree=null;
        CommonTree KW_FROM880_tree=null;
        RewriteRuleTokenStream stream_KW_DELETE=new RewriteRuleTokenStream(adaptor,"token KW_DELETE");
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         pushMsg("delete statement", state); 
        try {
            // HiveParser.g:2369:4: ( KW_DELETE KW_FROM tableName ( whereClause )? -> ^( TOK_DELETE_FROM tableName ( whereClause )? ) )
            // HiveParser.g:2370:4: KW_DELETE KW_FROM tableName ( whereClause )?
            {
            KW_DELETE879=(Token)match(input,KW_DELETE,FOLLOW_KW_DELETE_in_deleteStatement15496); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DELETE.add(KW_DELETE879);


            KW_FROM880=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_deleteStatement15498); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM880);


            pushFollow(FOLLOW_tableName_in_deleteStatement15500);
            tableName881=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(tableName881.getTree());

            // HiveParser.g:2370:32: ( whereClause )?
            int alt291=2;
            int LA291_0 = input.LA(1);

            if ( (LA291_0==KW_WHERE) ) {
                alt291=1;
            }
            switch (alt291) {
                case 1 :
                    // HiveParser.g:2370:33: whereClause
                    {
                    pushFollow(FOLLOW_whereClause_in_deleteStatement15503);
                    whereClause882=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause882.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tableName, whereClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2370:47: -> ^( TOK_DELETE_FROM tableName ( whereClause )? )
            {
                // HiveParser.g:2370:50: ^( TOK_DELETE_FROM tableName ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_DELETE_FROM, "TOK_DELETE_FROM")
                , root_1);

                adaptor.addChild(root_1, stream_tableName.nextTree());

                // HiveParser.g:2370:78: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "deleteStatement"


    public static class columnAssignmentClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnAssignmentClause"
    // HiveParser.g:2374:1: columnAssignmentClause : tableOrColumn EQUAL ^ precedencePlusExpression ;
    public final HiveParser.columnAssignmentClause_return columnAssignmentClause() throws RecognitionException {
        HiveParser.columnAssignmentClause_return retval = new HiveParser.columnAssignmentClause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token EQUAL884=null;
        HiveParser_FromClauseParser.tableOrColumn_return tableOrColumn883 =null;

        HiveParser_IdentifiersParser.precedencePlusExpression_return precedencePlusExpression885 =null;


        CommonTree EQUAL884_tree=null;

        try {
            // HiveParser.g:2375:4: ( tableOrColumn EQUAL ^ precedencePlusExpression )
            // HiveParser.g:2376:4: tableOrColumn EQUAL ^ precedencePlusExpression
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_tableOrColumn_in_columnAssignmentClause15536);
            tableOrColumn883=tableOrColumn();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tableOrColumn883.getTree());

            EQUAL884=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_columnAssignmentClause15538); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EQUAL884_tree = 
            (CommonTree)adaptor.create(EQUAL884)
            ;
            root_0 = (CommonTree)adaptor.becomeRoot(EQUAL884_tree, root_0);
            }

            pushFollow(FOLLOW_precedencePlusExpression_in_columnAssignmentClause15541);
            precedencePlusExpression885=precedencePlusExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, precedencePlusExpression885.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnAssignmentClause"


    public static class setColumnsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "setColumnsClause"
    // HiveParser.g:2380:1: setColumnsClause : KW_SET columnAssignmentClause ( COMMA columnAssignmentClause )* -> ^( TOK_SET_COLUMNS_CLAUSE ( columnAssignmentClause )* ) ;
    public final HiveParser.setColumnsClause_return setColumnsClause() throws RecognitionException {
        HiveParser.setColumnsClause_return retval = new HiveParser.setColumnsClause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_SET886=null;
        Token COMMA888=null;
        HiveParser.columnAssignmentClause_return columnAssignmentClause887 =null;

        HiveParser.columnAssignmentClause_return columnAssignmentClause889 =null;


        CommonTree KW_SET886_tree=null;
        CommonTree COMMA888_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleSubtreeStream stream_columnAssignmentClause=new RewriteRuleSubtreeStream(adaptor,"rule columnAssignmentClause");
        try {
            // HiveParser.g:2381:4: ( KW_SET columnAssignmentClause ( COMMA columnAssignmentClause )* -> ^( TOK_SET_COLUMNS_CLAUSE ( columnAssignmentClause )* ) )
            // HiveParser.g:2382:4: KW_SET columnAssignmentClause ( COMMA columnAssignmentClause )*
            {
            KW_SET886=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_setColumnsClause15561); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET886);


            pushFollow(FOLLOW_columnAssignmentClause_in_setColumnsClause15563);
            columnAssignmentClause887=columnAssignmentClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnAssignmentClause.add(columnAssignmentClause887.getTree());

            // HiveParser.g:2382:34: ( COMMA columnAssignmentClause )*
            loop292:
            do {
                int alt292=2;
                int LA292_0 = input.LA(1);

                if ( (LA292_0==COMMA) ) {
                    alt292=1;
                }


                switch (alt292) {
            	case 1 :
            	    // HiveParser.g:2382:35: COMMA columnAssignmentClause
            	    {
            	    COMMA888=(Token)match(input,COMMA,FOLLOW_COMMA_in_setColumnsClause15566); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA888);


            	    pushFollow(FOLLOW_columnAssignmentClause_in_setColumnsClause15568);
            	    columnAssignmentClause889=columnAssignmentClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_columnAssignmentClause.add(columnAssignmentClause889.getTree());

            	    }
            	    break;

            	default :
            	    break loop292;
                }
            } while (true);


            // AST REWRITE
            // elements: columnAssignmentClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2382:66: -> ^( TOK_SET_COLUMNS_CLAUSE ( columnAssignmentClause )* )
            {
                // HiveParser.g:2382:69: ^( TOK_SET_COLUMNS_CLAUSE ( columnAssignmentClause )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_SET_COLUMNS_CLAUSE, "TOK_SET_COLUMNS_CLAUSE")
                , root_1);

                // HiveParser.g:2382:94: ( columnAssignmentClause )*
                while ( stream_columnAssignmentClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnAssignmentClause.nextTree());

                }
                stream_columnAssignmentClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "setColumnsClause"


    public static class updateStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "updateStatement"
    // HiveParser.g:2389:1: updateStatement : KW_UPDATE tableName setColumnsClause ( whereClause )? -> ^( TOK_UPDATE_TABLE tableName setColumnsClause ( whereClause )? ) ;
    public final HiveParser.updateStatement_return updateStatement() throws RecognitionException {
        HiveParser.updateStatement_return retval = new HiveParser.updateStatement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token KW_UPDATE890=null;
        HiveParser_FromClauseParser.tableName_return tableName891 =null;

        HiveParser.setColumnsClause_return setColumnsClause892 =null;

        HiveParser_FromClauseParser.whereClause_return whereClause893 =null;


        CommonTree KW_UPDATE890_tree=null;
        RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
        RewriteRuleSubtreeStream stream_setColumnsClause=new RewriteRuleSubtreeStream(adaptor,"rule setColumnsClause");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         pushMsg("update statement", state); 
        try {
            // HiveParser.g:2392:4: ( KW_UPDATE tableName setColumnsClause ( whereClause )? -> ^( TOK_UPDATE_TABLE tableName setColumnsClause ( whereClause )? ) )
            // HiveParser.g:2393:4: KW_UPDATE tableName setColumnsClause ( whereClause )?
            {
            KW_UPDATE890=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_updateStatement15610); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_UPDATE.add(KW_UPDATE890);


            pushFollow(FOLLOW_tableName_in_updateStatement15612);
            tableName891=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(tableName891.getTree());

            pushFollow(FOLLOW_setColumnsClause_in_updateStatement15614);
            setColumnsClause892=setColumnsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_setColumnsClause.add(setColumnsClause892.getTree());

            // HiveParser.g:2393:41: ( whereClause )?
            int alt293=2;
            int LA293_0 = input.LA(1);

            if ( (LA293_0==KW_WHERE) ) {
                alt293=1;
            }
            switch (alt293) {
                case 1 :
                    // HiveParser.g:2393:41: whereClause
                    {
                    pushFollow(FOLLOW_whereClause_in_updateStatement15616);
                    whereClause893=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause893.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tableName, whereClause, setColumnsClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2393:54: -> ^( TOK_UPDATE_TABLE tableName setColumnsClause ( whereClause )? )
            {
                // HiveParser.g:2393:57: ^( TOK_UPDATE_TABLE tableName setColumnsClause ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(TOK_UPDATE_TABLE, "TOK_UPDATE_TABLE")
                , root_1);

                adaptor.addChild(root_1, stream_tableName.nextTree());

                adaptor.addChild(root_1, stream_setColumnsClause.nextTree());

                // HiveParser.g:2393:103: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "updateStatement"

    // $ANTLR start synpred1_HiveParser
    public final void synpred1_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:760:7: ( grantPrivileges )
        // HiveParser.g:760:8: grantPrivileges
        {
        pushFollow(FOLLOW_grantPrivileges_in_synpred1_HiveParser1840);
        grantPrivileges();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_HiveParser

    // $ANTLR start synpred2_HiveParser
    public final void synpred2_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:761:7: ( revokePrivileges )
        // HiveParser.g:761:8: revokePrivileges
        {
        pushFollow(FOLLOW_revokePrivileges_in_synpred2_HiveParser1854);
        revokePrivileges();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_HiveParser

    // $ANTLR start synpred3_HiveParser
    public final void synpred3_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1004:7: ( alterStatementSuffixRename[true] )
        // HiveParser.g:1004:8: alterStatementSuffixRename[true]
        {
        pushFollow(FOLLOW_alterStatementSuffixRename_in_synpred3_HiveParser3853);
        alterStatementSuffixRename(true);

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred3_HiveParser

    // $ANTLR start synpred4_HiveParser
    public final void synpred4_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1347:4: ( KW_ELEM_TYPE )
        // HiveParser.g:1347:5: KW_ELEM_TYPE
        {
        match(input,KW_ELEM_TYPE,FOLLOW_KW_ELEM_TYPE_in_synpred4_HiveParser6412); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_HiveParser

    // $ANTLR start synpred5_HiveParser
    public final void synpred5_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1349:4: ( KW_KEY_TYPE )
        // HiveParser.g:1349:5: KW_KEY_TYPE
        {
        match(input,KW_KEY_TYPE,FOLLOW_KW_KEY_TYPE_in_synpred5_HiveParser6428); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred5_HiveParser

    // $ANTLR start synpred6_HiveParser
    public final void synpred6_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1351:4: ( KW_VALUE_TYPE )
        // HiveParser.g:1351:5: KW_VALUE_TYPE
        {
        match(input,KW_VALUE_TYPE,FOLLOW_KW_VALUE_TYPE_in_synpred6_HiveParser6444); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred6_HiveParser

    // $ANTLR start synpred7_HiveParser
    public final void synpred7_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1368:5: ( KW_DATABASE | KW_SCHEMA )
        // HiveParser.g:
        {
        if ( input.LA(1)==KW_DATABASE||input.LA(1)==KW_SCHEMA ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred7_HiveParser

    // $ANTLR start synpred8_HiveParser
    public final void synpred8_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1370:5: ( KW_FUNCTION )
        // HiveParser.g:1370:6: KW_FUNCTION
        {
        match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_synpred8_HiveParser6600); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred8_HiveParser

    // $ANTLR start synpred9_HiveParser
    public final void synpred9_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1372:5: ( KW_FORMATTED | KW_EXTENDED | KW_PRETTY )
        // HiveParser.g:
        {
        if ( input.LA(1)==KW_EXTENDED||input.LA(1)==KW_FORMATTED||input.LA(1)==KW_PRETTY ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred9_HiveParser

    // $ANTLR start synpred10_HiveParser
    public final void synpred10_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1401:7: ( KW_DATABASE | KW_SCHEMA )
        // HiveParser.g:
        {
        if ( input.LA(1)==KW_DATABASE||input.LA(1)==KW_SCHEMA ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred10_HiveParser

    // $ANTLR start synpred11_HiveParser
    public final void synpred11_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1514:5: ( KW_ALL )
        // HiveParser.g:1514:6: KW_ALL
        {
        match(input,KW_ALL,FOLLOW_KW_ALL_in_synpred11_HiveParser8157); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred11_HiveParser

    // $ANTLR start synpred12_HiveParser
    public final void synpred12_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1538:7: ( KW_ALL )
        // HiveParser.g:1538:8: KW_ALL
        {
        match(input,KW_ALL,FOLLOW_KW_ALL_in_synpred12_HiveParser8331); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred12_HiveParser

    // $ANTLR start synpred13_HiveParser
    public final void synpred13_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1777:117: ( storedAsDirs )
        // HiveParser.g:1777:118: storedAsDirs
        {
        pushFollow(FOLLOW_storedAsDirs_in_synpred13_HiveParser10314);
        storedAsDirs();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred13_HiveParser

    // $ANTLR start synpred14_HiveParser
    public final void synpred14_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1908:7: ( KW_STORED KW_AS KW_INPUTFORMAT )
        // HiveParser.g:1908:8: KW_STORED KW_AS KW_INPUTFORMAT
        {
        match(input,KW_STORED,FOLLOW_KW_STORED_in_synpred14_HiveParser11295); if (state.failed) return ;

        match(input,KW_AS,FOLLOW_KW_AS_in_synpred14_HiveParser11297); if (state.failed) return ;

        match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_synpred14_HiveParser11299); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred14_HiveParser

    // $ANTLR start synpred15_HiveParser
    public final void synpred15_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:2292:5: ( window_clause )
        // HiveParser.g:2292:6: window_clause
        {
        pushFollow(FOLLOW_window_clause_in_synpred15_HiveParser14812);
        window_clause();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred15_HiveParser

    // Delegated rules
    public HiveParser_IdentifiersParser.precedenceFieldExpression_return precedenceFieldExpression() throws RecognitionException { return gIdentifiersParser.precedenceFieldExpression(); }
    public HiveParser_SelectClauseParser.hintList_return hintList() throws RecognitionException { return gSelectClauseParser.hintList(); }
    public HiveParser_SelectClauseParser.selectExpressionList_return selectExpressionList() throws RecognitionException { return gSelectClauseParser.selectExpressionList(); }
    public HiveParser_IdentifiersParser.intervalLiteral_return intervalLiteral() throws RecognitionException { return gIdentifiersParser.intervalLiteral(); }
    public HiveParser_IdentifiersParser.precedenceUnarySuffixExpression_return precedenceUnarySuffixExpression() throws RecognitionException { return gIdentifiersParser.precedenceUnarySuffixExpression(); }
    public HiveParser_SelectClauseParser.selectExpression_return selectExpression() throws RecognitionException { return gSelectClauseParser.selectExpression(); }
    public HiveParser_IdentifiersParser.tableOrPartition_return tableOrPartition() throws RecognitionException { return gIdentifiersParser.tableOrPartition(); }
    public HiveParser_IdentifiersParser.havingCondition_return havingCondition() throws RecognitionException { return gIdentifiersParser.havingCondition(); }
    public HiveParser_FromClauseParser.tableNameColList_return tableNameColList() throws RecognitionException { return gFromClauseParser.tableNameColList(); }
    public HiveParser_SelectClauseParser.hintName_return hintName() throws RecognitionException { return gSelectClauseParser.hintName(); }
    public HiveParser_SelectClauseParser.window_clause_return window_clause() throws RecognitionException { return gSelectClauseParser.window_clause(); }
    public HiveParser_IdentifiersParser.precedenceUnaryOperator_return precedenceUnaryOperator() throws RecognitionException { return gIdentifiersParser.precedenceUnaryOperator(); }
    public HiveParser_IdentifiersParser.nullCondition_return nullCondition() throws RecognitionException { return gIdentifiersParser.nullCondition(); }
    public HiveParser_IdentifiersParser.sql11ReservedKeywordsUsedAsIdentifier_return sql11ReservedKeywordsUsedAsIdentifier() throws RecognitionException { return gIdentifiersParser.sql11ReservedKeywordsUsedAsIdentifier(); }
    public HiveParser_FromClauseParser.tableBucketSample_return tableBucketSample() throws RecognitionException { return gFromClauseParser.tableBucketSample(); }
    public HiveParser_FromClauseParser.valuesTableConstructor_return valuesTableConstructor() throws RecognitionException { return gFromClauseParser.valuesTableConstructor(); }
    public HiveParser_FromClauseParser.searchCondition_return searchCondition() throws RecognitionException { return gFromClauseParser.searchCondition(); }
    public HiveParser_IdentifiersParser.precedenceStarOperator_return precedenceStarOperator() throws RecognitionException { return gIdentifiersParser.precedenceStarOperator(); }
    public HiveParser_IdentifiersParser.clusterByClause_return clusterByClause() throws RecognitionException { return gIdentifiersParser.clusterByClause(); }
    public HiveParser_FromClauseParser.fromClause_return fromClause() throws RecognitionException { return gFromClauseParser.fromClause(); }
    public HiveParser_SelectClauseParser.window_range_expression_return window_range_expression() throws RecognitionException { return gSelectClauseParser.window_range_expression(); }
    public HiveParser_FromClauseParser.uniqueJoinSource_return uniqueJoinSource() throws RecognitionException { return gFromClauseParser.uniqueJoinSource(); }
    public HiveParser_FromClauseParser.tableAlias_return tableAlias() throws RecognitionException { return gFromClauseParser.tableAlias(); }
    public HiveParser_IdentifiersParser.precedenceEqualNegatableOperator_return precedenceEqualNegatableOperator() throws RecognitionException { return gIdentifiersParser.precedenceEqualNegatableOperator(); }
    public HiveParser_SelectClauseParser.window_frame_start_boundary_return window_frame_start_boundary() throws RecognitionException { return gSelectClauseParser.window_frame_start_boundary(); }
    public HiveParser_FromClauseParser.partitioningSpec_return partitioningSpec() throws RecognitionException { return gFromClauseParser.partitioningSpec(); }
    public HiveParser_IdentifiersParser.precedenceOrOperator_return precedenceOrOperator() throws RecognitionException { return gIdentifiersParser.precedenceOrOperator(); }
    public HiveParser_FromClauseParser.tableSource_return tableSource() throws RecognitionException { return gFromClauseParser.tableSource(); }
    public HiveParser_FromClauseParser.joinToken_return joinToken() throws RecognitionException { return gFromClauseParser.joinToken(); }
    public HiveParser_IdentifiersParser.dropPartitionVal_return dropPartitionVal() throws RecognitionException { return gIdentifiersParser.dropPartitionVal(); }
    public HiveParser_IdentifiersParser.precedenceBitwiseOrOperator_return precedenceBitwiseOrOperator() throws RecognitionException { return gIdentifiersParser.precedenceBitwiseOrOperator(); }
    public HiveParser_IdentifiersParser.precedenceAndExpression_return precedenceAndExpression() throws RecognitionException { return gIdentifiersParser.precedenceAndExpression(); }
    public HiveParser_SelectClauseParser.window_value_expression_return window_value_expression() throws RecognitionException { return gSelectClauseParser.window_value_expression(); }
    public HiveParser_FromClauseParser.expressionList_return expressionList() throws RecognitionException { return gFromClauseParser.expressionList(); }
    public HiveParser_FromClauseParser.fromSource_return fromSource() throws RecognitionException { return gFromClauseParser.fromSource(); }
    public HiveParser_FromClauseParser.aliasList_return aliasList() throws RecognitionException { return gFromClauseParser.aliasList(); }
    public HiveParser_IdentifiersParser.whenExpression_return whenExpression() throws RecognitionException { return gIdentifiersParser.whenExpression(); }
    public HiveParser_FromClauseParser.tableName_return tableName() throws RecognitionException { return gFromClauseParser.tableName(); }
    public HiveParser_IdentifiersParser.havingClause_return havingClause() throws RecognitionException { return gIdentifiersParser.havingClause(); }
    public HiveParser_IdentifiersParser.intervalQualifiers_return intervalQualifiers() throws RecognitionException { return gIdentifiersParser.intervalQualifiers(); }
    public HiveParser_SelectClauseParser.trfmClause_return trfmClause() throws RecognitionException { return gSelectClauseParser.trfmClause(); }
    public HiveParser_IdentifiersParser.precedenceAmpersandExpression_return precedenceAmpersandExpression() throws RecognitionException { return gIdentifiersParser.precedenceAmpersandExpression(); }
    public HiveParser_IdentifiersParser.precedencePlusExpression_return precedencePlusExpression() throws RecognitionException { return gIdentifiersParser.precedencePlusExpression(); }
    public HiveParser_SelectClauseParser.hintClause_return hintClause() throws RecognitionException { return gSelectClauseParser.hintClause(); }
    public HiveParser_IdentifiersParser.expressionsInParenthese_return expressionsInParenthese() throws RecognitionException { return gIdentifiersParser.expressionsInParenthese(); }
    public HiveParser_FromClauseParser.subQuerySource_return subQuerySource() throws RecognitionException { return gFromClauseParser.subQuerySource(); }
    public HiveParser_IdentifiersParser.partitionVal_return partitionVal() throws RecognitionException { return gIdentifiersParser.partitionVal(); }
    public HiveParser_IdentifiersParser.precedenceUnaryPrefixExpression_return precedenceUnaryPrefixExpression() throws RecognitionException { return gIdentifiersParser.precedenceUnaryPrefixExpression(); }
    public HiveParser_IdentifiersParser.dropPartitionSpec_return dropPartitionSpec() throws RecognitionException { return gIdentifiersParser.dropPartitionSpec(); }
    public HiveParser_FromClauseParser.splitSample_return splitSample() throws RecognitionException { return gFromClauseParser.splitSample(); }
    public HiveParser_IdentifiersParser.subQueryExpression_return subQueryExpression() throws RecognitionException { return gIdentifiersParser.subQueryExpression(); }
    public HiveParser_SelectClauseParser.hintItem_return hintItem() throws RecognitionException { return gSelectClauseParser.hintItem(); }
    public HiveParser_IdentifiersParser.precedenceAmpersandOperator_return precedenceAmpersandOperator() throws RecognitionException { return gIdentifiersParser.precedenceAmpersandOperator(); }
    public HiveParser_SelectClauseParser.selectClause_return selectClause() throws RecognitionException { return gSelectClauseParser.selectClause(); }
    public HiveParser_IdentifiersParser.precedenceNotOperator_return precedenceNotOperator() throws RecognitionException { return gIdentifiersParser.precedenceNotOperator(); }
    public HiveParser_IdentifiersParser.partitionByClause_return partitionByClause() throws RecognitionException { return gIdentifiersParser.partitionByClause(); }
    public HiveParser_IdentifiersParser.precedenceEqualExpression_return precedenceEqualExpression() throws RecognitionException { return gIdentifiersParser.precedenceEqualExpression(); }
    public HiveParser_FromClauseParser.valueRowConstructor_return valueRowConstructor() throws RecognitionException { return gFromClauseParser.valueRowConstructor(); }
    public HiveParser_IdentifiersParser.sysFuncNames_return sysFuncNames() throws RecognitionException { return gIdentifiersParser.sysFuncNames(); }
    public HiveParser_IdentifiersParser.precedenceEqualOperator_return precedenceEqualOperator() throws RecognitionException { return gIdentifiersParser.precedenceEqualOperator(); }
    public HiveParser_IdentifiersParser.functionIdentifier_return functionIdentifier() throws RecognitionException { return gIdentifiersParser.functionIdentifier(); }
    public HiveParser_SelectClauseParser.selectList_return selectList() throws RecognitionException { return gSelectClauseParser.selectList(); }
    public HiveParser_FromClauseParser.joinSource_return joinSource() throws RecognitionException { return gFromClauseParser.joinSource(); }
    public HiveParser_IdentifiersParser.dateLiteral_return dateLiteral() throws RecognitionException { return gIdentifiersParser.dateLiteral(); }
    public HiveParser_FromClauseParser.whereClause_return whereClause() throws RecognitionException { return gFromClauseParser.whereClause(); }
    public HiveParser_IdentifiersParser.precedencePlusOperator_return precedencePlusOperator() throws RecognitionException { return gIdentifiersParser.precedencePlusOperator(); }
    public HiveParser_IdentifiersParser.stringLiteralSequence_return stringLiteralSequence() throws RecognitionException { return gIdentifiersParser.stringLiteralSequence(); }
    public HiveParser_IdentifiersParser.precedenceBitwiseXorExpression_return precedenceBitwiseXorExpression() throws RecognitionException { return gIdentifiersParser.precedenceBitwiseXorExpression(); }
    public HiveParser_IdentifiersParser.booleanValue_return booleanValue() throws RecognitionException { return gIdentifiersParser.booleanValue(); }
    public HiveParser_SelectClauseParser.hintArgName_return hintArgName() throws RecognitionException { return gSelectClauseParser.hintArgName(); }
    public HiveParser_IdentifiersParser.dropPartitionOperator_return dropPartitionOperator() throws RecognitionException { return gIdentifiersParser.dropPartitionOperator(); }
    public HiveParser_IdentifiersParser.functionName_return functionName() throws RecognitionException { return gIdentifiersParser.functionName(); }
    public HiveParser_IdentifiersParser.precedenceBitwiseXorOperator_return precedenceBitwiseXorOperator() throws RecognitionException { return gIdentifiersParser.precedenceBitwiseXorOperator(); }
    public HiveParser_SelectClauseParser.window_frame_boundary_return window_frame_boundary() throws RecognitionException { return gSelectClauseParser.window_frame_boundary(); }
    public HiveParser_SelectClauseParser.hintArgs_return hintArgs() throws RecognitionException { return gSelectClauseParser.hintArgs(); }
    public HiveParser_IdentifiersParser.orderByClause_return orderByClause() throws RecognitionException { return gIdentifiersParser.orderByClause(); }
    public HiveParser_SelectClauseParser.selectTrfmClause_return selectTrfmClause() throws RecognitionException { return gSelectClauseParser.selectTrfmClause(); }
    public HiveParser_FromClauseParser.tableSample_return tableSample() throws RecognitionException { return gFromClauseParser.tableSample(); }
    public HiveParser_IdentifiersParser.constant_return constant() throws RecognitionException { return gIdentifiersParser.constant(); }
    public HiveParser_IdentifiersParser.nonReserved_return nonReserved() throws RecognitionException { return gIdentifiersParser.nonReserved(); }
    public HiveParser_IdentifiersParser.expression_return expression() throws RecognitionException { return gIdentifiersParser.expression(); }
    public HiveParser_IdentifiersParser.precedenceBitwiseOrExpression_return precedenceBitwiseOrExpression() throws RecognitionException { return gIdentifiersParser.precedenceBitwiseOrExpression(); }
    public HiveParser_IdentifiersParser.groupingSetExpressionMultiple_return groupingSetExpressionMultiple() throws RecognitionException { return gIdentifiersParser.groupingSetExpressionMultiple(); }
    public HiveParser_FromClauseParser.virtualTableSource_return virtualTableSource() throws RecognitionException { return gFromClauseParser.virtualTableSource(); }
    public HiveParser_FromClauseParser.uniqueJoinToken_return uniqueJoinToken() throws RecognitionException { return gFromClauseParser.uniqueJoinToken(); }
    public HiveParser_SelectClauseParser.window_defn_return window_defn() throws RecognitionException { return gSelectClauseParser.window_defn(); }
    public HiveParser_IdentifiersParser.charSetStringLiteral_return charSetStringLiteral() throws RecognitionException { return gIdentifiersParser.charSetStringLiteral(); }
    public HiveParser_IdentifiersParser.descFuncNames_return descFuncNames() throws RecognitionException { return gIdentifiersParser.descFuncNames(); }
    public HiveParser_IdentifiersParser.precedenceNotExpression_return precedenceNotExpression() throws RecognitionException { return gIdentifiersParser.precedenceNotExpression(); }
    public HiveParser_SelectClauseParser.selectItem_return selectItem() throws RecognitionException { return gSelectClauseParser.selectItem(); }
    public HiveParser_IdentifiersParser.columnRefOrderNotInParenthese_return columnRefOrderNotInParenthese() throws RecognitionException { return gIdentifiersParser.columnRefOrderNotInParenthese(); }
    public HiveParser_FromClauseParser.partitionTableFunctionSource_return partitionTableFunctionSource() throws RecognitionException { return gFromClauseParser.partitionTableFunctionSource(); }
    public HiveParser_IdentifiersParser.groupingSetExpression_return groupingSetExpression() throws RecognitionException { return gIdentifiersParser.groupingSetExpression(); }
    public HiveParser_IdentifiersParser.groupingExpressionSingle_return groupingExpressionSingle() throws RecognitionException { return gIdentifiersParser.groupingExpressionSingle(); }
    public HiveParser_IdentifiersParser.timestampLiteral_return timestampLiteral() throws RecognitionException { return gIdentifiersParser.timestampLiteral(); }
    public HiveParser_FromClauseParser.tableAllColumns_return tableAllColumns() throws RecognitionException { return gFromClauseParser.tableAllColumns(); }
    public HiveParser_IdentifiersParser.precedenceAndOperator_return precedenceAndOperator() throws RecognitionException { return gIdentifiersParser.precedenceAndOperator(); }
    public HiveParser_IdentifiersParser.precedenceOrExpression_return precedenceOrExpression() throws RecognitionException { return gIdentifiersParser.precedenceOrExpression(); }
    public HiveParser_IdentifiersParser.expressionsNotInParenthese_return expressionsNotInParenthese() throws RecognitionException { return gIdentifiersParser.expressionsNotInParenthese(); }
    public HiveParser_IdentifiersParser.function_return function() throws RecognitionException { return gIdentifiersParser.function(); }
    public HiveParser_SelectClauseParser.window_specification_return window_specification() throws RecognitionException { return gSelectClauseParser.window_specification(); }
    public HiveParser_FromClauseParser.lateralView_return lateralView() throws RecognitionException { return gFromClauseParser.lateralView(); }
    public HiveParser_IdentifiersParser.distributeByClause_return distributeByClause() throws RecognitionException { return gIdentifiersParser.distributeByClause(); }
    public HiveParser_IdentifiersParser.principalIdentifier_return principalIdentifier() throws RecognitionException { return gIdentifiersParser.principalIdentifier(); }
    public HiveParser_IdentifiersParser.expressions_return expressions() throws RecognitionException { return gIdentifiersParser.expressions(); }
    public HiveParser_FromClauseParser.tableOrColumn_return tableOrColumn() throws RecognitionException { return gFromClauseParser.tableOrColumn(); }
    public HiveParser_IdentifiersParser.sql11ReservedKeywordsUsedAsCastFunctionName_return sql11ReservedKeywordsUsedAsCastFunctionName() throws RecognitionException { return gIdentifiersParser.sql11ReservedKeywordsUsedAsCastFunctionName(); }
    public HiveParser_IdentifiersParser.identifier_return identifier() throws RecognitionException { return gIdentifiersParser.identifier(); }
    public HiveParser_IdentifiersParser.precedenceStarExpression_return precedenceStarExpression() throws RecognitionException { return gIdentifiersParser.precedenceStarExpression(); }
    public HiveParser_SelectClauseParser.window_frame_return window_frame() throws RecognitionException { return gSelectClauseParser.window_frame(); }
    public HiveParser_IdentifiersParser.caseExpression_return caseExpression() throws RecognitionException { return gIdentifiersParser.caseExpression(); }
    public HiveParser_IdentifiersParser.atomExpression_return atomExpression() throws RecognitionException { return gIdentifiersParser.atomExpression(); }
    public HiveParser_FromClauseParser.viewName_return viewName() throws RecognitionException { return gFromClauseParser.viewName(); }
    public HiveParser_FromClauseParser.partitionedTableFunction_return partitionedTableFunction() throws RecognitionException { return gFromClauseParser.partitionedTableFunction(); }
    public HiveParser_FromClauseParser.valuesClause_return valuesClause() throws RecognitionException { return gFromClauseParser.valuesClause(); }
    public HiveParser_IdentifiersParser.partitionSpec_return partitionSpec() throws RecognitionException { return gIdentifiersParser.partitionSpec(); }
    public HiveParser_IdentifiersParser.groupByClause_return groupByClause() throws RecognitionException { return gIdentifiersParser.groupByClause(); }
    public HiveParser_FromClauseParser.uniqueJoinExpr_return uniqueJoinExpr() throws RecognitionException { return gFromClauseParser.uniqueJoinExpr(); }
    public HiveParser_IdentifiersParser.sortByClause_return sortByClause() throws RecognitionException { return gIdentifiersParser.sortByClause(); }
    public HiveParser_IdentifiersParser.columnRefOrderInParenthese_return columnRefOrderInParenthese() throws RecognitionException { return gIdentifiersParser.columnRefOrderInParenthese(); }
    public HiveParser_IdentifiersParser.castExpression_return castExpression() throws RecognitionException { return gIdentifiersParser.castExpression(); }

    public final boolean synpred7_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA12 dfa12 = new DFA12(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA199 dfa199 = new DFA199(this);
    static final String DFA12_eotS =
        "\u00b7\uffff";
    static final String DFA12_eofS =
        "\u00b7\uffff";
    static final String DFA12_minS =
        "\1\37\1\112\1\uffff\1\112\4\uffff\1\72\3\uffff\2\112\2\32\1\uffff"+
        "\1\152\14\uffff\1\170\37\uffff\7\12\1\uffff\3\12\4\uffff\10\12\1"+
        "\uffff\3\12\14\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0"+
        "\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\4\uffff\1\0"+
        "\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0"+
        "\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\1\0\1\uffff\1\0";
    static final String DFA12_maxS =
        "\1\u0116\1\u011e\1\uffff\1\u011e\4\uffff\1\u0106\3\uffff\2\u00fb"+
        "\2\u0124\1\uffff\1\u00fb\14\uffff\1\u00a3\37\uffff\7\u0128\1\uffff"+
        "\3\u0128\4\uffff\1\u00b5\7\u0128\1\uffff\3\u0128\14\uffff\1\0\1"+
        "\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0"+
        "\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\1\0\1\uffff\1\0\4\uffff\1\0\1\uffff\1\0\1\uffff\1\0"+
        "\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0"+
        "\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
        "\1\0";
    static final String DFA12_acceptS =
        "\2\uffff\1\2\1\uffff\1\6\1\7\1\10\2\uffff\1\12\1\22\1\24\4\uffff"+
        "\1\43\1\uffff\1\17\1\31\1\1\1\uffff\1\4\1\uffff\1\13\1\uffff\1\15"+
        "\1\5\1\14\1\20\1\uffff\1\32\1\3\1\uffff\1\21\1\11\12\uffff\1\35"+
        "\1\36\1\37\1\40\1\44\5\uffff\1\25\1\27\1\uffff\1\26\1\30\10\uffff"+
        "\1\33\3\uffff\1\41\13\uffff\1\34\3\uffff\1\42\4\uffff\1\16\3\uffff"+
        "\1\23\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff"+
        "\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff"+
        "\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff"+
        "\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff"+
        "\1\33\1\uffff\1\34\2\uffff\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff"+
        "\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff"+
        "\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff"+
        "\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff"+
        "\1\34\1\uffff\1\34\1\uffff";
    static final String DFA12_specialS =
        "\16\uffff\1\0\1\1\56\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\uffff"+
        "\1\11\1\12\1\13\4\uffff\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
        "\1\uffff\1\24\1\25\1\26\14\uffff\1\27\1\uffff\1\30\1\uffff\1\31"+
        "\1\uffff\1\32\1\uffff\1\33\1\uffff\1\34\1\uffff\1\35\1\uffff\1\36"+
        "\1\uffff\1\37\1\uffff\1\40\1\uffff\1\41\1\uffff\1\42\1\uffff\1\43"+
        "\1\uffff\1\44\1\uffff\1\45\1\uffff\1\46\1\uffff\1\47\1\uffff\1\50"+
        "\1\uffff\1\51\1\uffff\1\52\4\uffff\1\53\1\uffff\1\54\1\uffff\1\55"+
        "\1\uffff\1\56\1\uffff\1\57\1\uffff\1\60\1\uffff\1\61\1\uffff\1\62"+
        "\1\uffff\1\63\1\uffff\1\64\1\uffff\1\65\1\uffff\1\66\1\uffff\1\67"+
        "\1\uffff\1\70\1\uffff\1\71\1\uffff\1\72\1\uffff\1\73\1\uffff\1\74"+
        "\1\uffff\1\75\1\uffff\1\76}>";
    static final String[] DFA12_transitionS = {
            "\1\5\1\13\41\uffff\1\1\23\uffff\2\6\6\uffff\1\3\33\uffff\1\16"+
            "\44\uffff\1\14\14\uffff\1\11\50\uffff\1\12\5\uffff\1\17\20\uffff"+
            "\1\20\2\uffff\1\10\32\uffff\1\4\6\uffff\1\15\4\uffff\1\2",
            "\1\24\37\uffff\1\26\15\uffff\1\32\14\uffff\1\22\60\uffff\1"+
            "\30\50\uffff\1\23\4\uffff\1\24\26\uffff\1\26\3\uffff\1\21\36"+
            "\uffff\1\30",
            "",
            "\1\40\55\uffff\1\42\14\uffff\1\35\131\uffff\1\37\4\uffff\1"+
            "\40\26\uffff\1\33\3\uffff\1\36\36\uffff\1\34",
            "",
            "",
            "",
            "",
            "\1\43\2\uffff\1\43\2\uffff\1\43\1\uffff\1\43\2\uffff\1\62\5"+
            "\uffff\1\43\51\uffff\1\43\3\uffff\1\43\1\56\12\uffff\2\43\31"+
            "\uffff\1\43\41\uffff\1\43\5\uffff\1\60\26\uffff\1\57\1\61\4"+
            "\uffff\1\43\25\uffff\2\43\1\uffff\1\43\7\uffff\1\43",
            "",
            "",
            "",
            "\1\71\u0099\uffff\1\71\26\uffff\1\70",
            "\1\74\u0099\uffff\1\74\26\uffff\1\73",
            "\4\111\1\76\1\77\1\111\1\uffff\17\111\2\uffff\1\111\1\uffff"+
            "\4\111\1\uffff\6\111\1\uffff\1\111\1\101\1\uffff\1\111\1\uffff"+
            "\4\111\1\uffff\10\111\1\110\7\111\1\uffff\2\111\1\102\1\111"+
            "\1\uffff\1\111\1\uffff\1\111\1\uffff\4\111\1\uffff\10\111\1"+
            "\uffff\3\111\1\uffff\1\111\1\uffff\4\111\1\uffff\3\111\1\uffff"+
            "\3\111\1\103\5\111\1\107\2\111\1\uffff\4\111\1\uffff\4\111\1"+
            "\uffff\6\111\1\104\3\111\2\uffff\6\111\1\uffff\3\111\1\uffff"+
            "\4\111\1\uffff\1\111\1\uffff\5\111\1\uffff\2\111\1\uffff\5\111"+
            "\2\uffff\14\111\1\uffff\23\111\1\105\10\111\1\106\14\111\1\uffff"+
            "\3\111\1\uffff\5\111\1\uffff\4\111\1\uffff\3\111\1\uffff\3\111"+
            "\1\100\10\111\1\uffff\1\111\2\uffff\1\111\1\uffff\2\111",
            "\4\131\1\116\1\117\1\131\1\uffff\17\131\2\uffff\1\131\1\uffff"+
            "\4\131\1\uffff\6\131\1\uffff\1\131\1\121\1\uffff\1\131\1\uffff"+
            "\4\131\1\uffff\10\131\1\130\7\131\1\uffff\2\131\1\122\1\131"+
            "\1\uffff\1\131\1\uffff\1\131\1\uffff\4\131\1\uffff\10\131\1"+
            "\uffff\3\131\1\uffff\1\131\1\uffff\1\131\1\115\2\131\1\uffff"+
            "\3\131\1\uffff\3\131\1\123\5\131\1\127\2\131\1\uffff\4\131\1"+
            "\uffff\4\131\1\uffff\6\131\1\124\3\131\2\uffff\6\131\1\uffff"+
            "\3\131\1\uffff\4\131\1\uffff\1\131\1\uffff\5\131\1\uffff\2\131"+
            "\1\uffff\5\131\2\uffff\14\131\1\uffff\23\131\1\125\10\131\1"+
            "\126\14\131\1\uffff\3\131\1\uffff\5\131\1\uffff\4\131\1\uffff"+
            "\3\131\1\uffff\3\131\1\120\10\131\1\uffff\1\131\2\uffff\1\131"+
            "\1\uffff\2\131",
            "",
            "\1\26\15\uffff\1\32\52\uffff\1\136\127\uffff\1\26",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\42\52\uffff\1\142",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\145\u00a9\uffff\1\146\117\uffff\1\147\43\uffff\1\144",
            "\1\151\u00a9\uffff\1\152\117\uffff\1\153\43\uffff\1\150",
            "\1\155\u00a9\uffff\1\156\117\uffff\1\157\43\uffff\1\154",
            "\1\161\u00a9\uffff\1\162\117\uffff\1\163\43\uffff\1\160",
            "\1\165\u00a9\uffff\1\166\117\uffff\1\167\43\uffff\1\164",
            "\1\171\u00a9\uffff\1\172\117\uffff\1\173\43\uffff\1\170",
            "\1\175\u00a9\uffff\1\176\117\uffff\1\177\43\uffff\1\174",
            "",
            "\1\u0081\u00a9\uffff\1\u0082\117\uffff\1\u0083\43\uffff\1\u0080",
            "\1\u0085\u00a9\uffff\1\u0086\117\uffff\1\u0087\43\uffff\1\u0084",
            "\1\u0089\u00a9\uffff\1\u008a\117\uffff\1\u008b\43\uffff\1\u0088",
            "",
            "",
            "",
            "",
            "\1\131\153\uffff\1\131\76\uffff\1\u008c",
            "\1\u0090\153\uffff\1\u0092\75\uffff\1\u0091\163\uffff\1\u008f",
            "\1\u0094\153\uffff\1\u0096\75\uffff\1\u0095\163\uffff\1\u0093",
            "\1\u0098\153\uffff\1\u009a\75\uffff\1\u0099\163\uffff\1\u0097",
            "\1\u009c\153\uffff\1\u009e\75\uffff\1\u009d\163\uffff\1\u009b",
            "\1\u00a0\153\uffff\1\u00a2\75\uffff\1\u00a1\163\uffff\1\u009f",
            "\1\u00a4\153\uffff\1\u00a6\75\uffff\1\u00a5\163\uffff\1\u00a3",
            "\1\u00a8\153\uffff\1\u00aa\75\uffff\1\u00a9\163\uffff\1\u00a7",
            "",
            "\1\u00ac\153\uffff\1\u00ae\75\uffff\1\u00ad\163\uffff\1\u00ab",
            "\1\u00b0\153\uffff\1\u00b2\75\uffff\1\u00b1\163\uffff\1\u00af",
            "\1\u00b4\153\uffff\1\u00b6\75\uffff\1\u00b5\163\uffff\1\u00b3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff"
    };

    static final short[] DFA12_eot = DFA.unpackEncodedString(DFA12_eotS);
    static final short[] DFA12_eof = DFA.unpackEncodedString(DFA12_eofS);
    static final char[] DFA12_min = DFA.unpackEncodedStringToUnsignedChars(DFA12_minS);
    static final char[] DFA12_max = DFA.unpackEncodedStringToUnsignedChars(DFA12_maxS);
    static final short[] DFA12_accept = DFA.unpackEncodedString(DFA12_acceptS);
    static final short[] DFA12_special = DFA.unpackEncodedString(DFA12_specialS);
    static final short[][] DFA12_transition;

    static {
        int numStates = DFA12_transitionS.length;
        DFA12_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA12_transition[i] = DFA.unpackEncodedString(DFA12_transitionS[i]);
        }
    }

    class DFA12 extends DFA {

        public DFA12(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 12;
            this.eot = DFA12_eot;
            this.eof = DFA12_eof;
            this.min = DFA12_min;
            this.max = DFA12_max;
            this.accept = DFA12_accept;
            this.special = DFA12_special;
            this.transition = DFA12_transition;
        }
        public String getDescription() {
            return "731:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createMacroStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | reloadFunctionStatement | dropMacroStatement | analyzeStatement | lockStatement | unlockStatement | lockDatabase | unlockDatabase | createRoleStatement | dropRoleStatement | ( grantPrivileges )=> grantPrivileges | ( revokePrivileges )=> revokePrivileges | showGrants | showRoleGrants | showRolePrincipals | showRoles | grantRole | revokeRole | setRole | showCurrentRole );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA12_14 = input.LA(1);

                         
                        int index12_14 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA12_14==KW_ALL) ) {s = 62;}

                        else if ( (LA12_14==KW_ALTER) ) {s = 63;}

                        else if ( (LA12_14==KW_UPDATE) ) {s = 64;}

                        else if ( (LA12_14==KW_CREATE) ) {s = 65;}

                        else if ( (LA12_14==KW_DROP) ) {s = 66;}

                        else if ( (LA12_14==KW_INDEX) ) {s = 67;}

                        else if ( (LA12_14==KW_LOCK) ) {s = 68;}

                        else if ( (LA12_14==KW_SELECT) && (synpred1_HiveParser())) {s = 69;}

                        else if ( (LA12_14==KW_SHOW_DATABASE) ) {s = 70;}

                        else if ( (LA12_14==KW_INSERT) ) {s = 71;}

                        else if ( (LA12_14==KW_DELETE) ) {s = 72;}

                        else if ( ((LA12_14 >= Identifier && LA12_14 <= KW_AFTER)||LA12_14==KW_ANALYZE||(LA12_14 >= KW_ARCHIVE && LA12_14 <= KW_CASCADE)||LA12_14==KW_CHANGE||(LA12_14 >= KW_CLUSTER && LA12_14 <= KW_COLLECTION)||(LA12_14 >= KW_COLUMNS && LA12_14 <= KW_CONCATENATE)||LA12_14==KW_CONTINUE||LA12_14==KW_CUBE||(LA12_14 >= KW_CURRENT_DATE && LA12_14 <= KW_DATA)||(LA12_14 >= KW_DATABASES && LA12_14 <= KW_DEFINED)||(LA12_14 >= KW_DELIMITED && LA12_14 <= KW_DISABLE)||(LA12_14 >= KW_DISTRIBUTE && LA12_14 <= KW_DOUBLE)||LA12_14==KW_ELEM_TYPE||LA12_14==KW_ENABLE||LA12_14==KW_ESCAPED||(LA12_14 >= KW_EXCLUSIVE && LA12_14 <= KW_EXPORT)||(LA12_14 >= KW_EXTERNAL && LA12_14 <= KW_FLOAT)||(LA12_14 >= KW_FOR && LA12_14 <= KW_FORMATTED)||LA12_14==KW_FULL||(LA12_14 >= KW_FUNCTIONS && LA12_14 <= KW_GROUPING)||(LA12_14 >= KW_HOLD_DDLTIME && LA12_14 <= KW_IDXPROPERTIES)||(LA12_14 >= KW_IGNORE && LA12_14 <= KW_IN)||(LA12_14 >= KW_INDEXES && LA12_14 <= KW_INPUTFORMAT)||(LA12_14 >= KW_INT && LA12_14 <= KW_INTERSECT)||(LA12_14 >= KW_INTO && LA12_14 <= KW_JAR)||(LA12_14 >= KW_KEYS && LA12_14 <= KW_LEFT)||(LA12_14 >= KW_LIKE && LA12_14 <= KW_LOCATION)||(LA12_14 >= KW_LOCKS && LA12_14 <= KW_LONG)||(LA12_14 >= KW_MAPJOIN && LA12_14 <= KW_MONTH)||(LA12_14 >= KW_MSCK && LA12_14 <= KW_NOSCAN)||(LA12_14 >= KW_NO_DROP && LA12_14 <= KW_OFFLINE)||LA12_14==KW_OPTION||(LA12_14 >= KW_ORDER && LA12_14 <= KW_OUTPUTFORMAT)||(LA12_14 >= KW_OVERWRITE && LA12_14 <= KW_OWNER)||(LA12_14 >= KW_PARTITION && LA12_14 <= KW_PLUS)||(LA12_14 >= KW_PRETTY && LA12_14 <= KW_RECORDWRITER)||(LA12_14 >= KW_REGEXP && LA12_14 <= KW_SECOND)||(LA12_14 >= KW_SEMI && LA12_14 <= KW_SHOW)||(LA12_14 >= KW_SKEWED && LA12_14 <= KW_TABLES)||(LA12_14 >= KW_TBLPROPERTIES && LA12_14 <= KW_TERMINATED)||(LA12_14 >= KW_TIMESTAMP && LA12_14 <= KW_TRANSACTIONS)||(LA12_14 >= KW_TRIGGER && LA12_14 <= KW_UNARCHIVE)||(LA12_14 >= KW_UNDO && LA12_14 <= KW_UNIONTYPE)||(LA12_14 >= KW_UNLOCK && LA12_14 <= KW_UNSIGNED)||(LA12_14 >= KW_URI && LA12_14 <= KW_VALUE_TYPE)||LA12_14==KW_VIEW||LA12_14==KW_WHILE||(LA12_14 >= KW_WITH && LA12_14 <= KW_YEAR)) ) {s = 73;}

                         
                        input.seek(index12_14);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA12_15 = input.LA(1);

                         
                        int index12_15 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA12_15==KW_GRANT) ) {s = 77;}

                        else if ( (LA12_15==KW_ALL) ) {s = 78;}

                        else if ( (LA12_15==KW_ALTER) ) {s = 79;}

                        else if ( (LA12_15==KW_UPDATE) ) {s = 80;}

                        else if ( (LA12_15==KW_CREATE) ) {s = 81;}

                        else if ( (LA12_15==KW_DROP) ) {s = 82;}

                        else if ( (LA12_15==KW_INDEX) ) {s = 83;}

                        else if ( (LA12_15==KW_LOCK) ) {s = 84;}

                        else if ( (LA12_15==KW_SELECT) && (synpred2_HiveParser())) {s = 85;}

                        else if ( (LA12_15==KW_SHOW_DATABASE) ) {s = 86;}

                        else if ( (LA12_15==KW_INSERT) ) {s = 87;}

                        else if ( (LA12_15==KW_DELETE) ) {s = 88;}

                        else if ( ((LA12_15 >= Identifier && LA12_15 <= KW_AFTER)||LA12_15==KW_ANALYZE||(LA12_15 >= KW_ARCHIVE && LA12_15 <= KW_CASCADE)||LA12_15==KW_CHANGE||(LA12_15 >= KW_CLUSTER && LA12_15 <= KW_COLLECTION)||(LA12_15 >= KW_COLUMNS && LA12_15 <= KW_CONCATENATE)||LA12_15==KW_CONTINUE||LA12_15==KW_CUBE||(LA12_15 >= KW_CURRENT_DATE && LA12_15 <= KW_DATA)||(LA12_15 >= KW_DATABASES && LA12_15 <= KW_DEFINED)||(LA12_15 >= KW_DELIMITED && LA12_15 <= KW_DISABLE)||(LA12_15 >= KW_DISTRIBUTE && LA12_15 <= KW_DOUBLE)||LA12_15==KW_ELEM_TYPE||LA12_15==KW_ENABLE||LA12_15==KW_ESCAPED||(LA12_15 >= KW_EXCLUSIVE && LA12_15 <= KW_EXPORT)||(LA12_15 >= KW_EXTERNAL && LA12_15 <= KW_FLOAT)||(LA12_15 >= KW_FOR && LA12_15 <= KW_FORMATTED)||LA12_15==KW_FULL||LA12_15==KW_FUNCTIONS||(LA12_15 >= KW_GROUP && LA12_15 <= KW_GROUPING)||(LA12_15 >= KW_HOLD_DDLTIME && LA12_15 <= KW_IDXPROPERTIES)||(LA12_15 >= KW_IGNORE && LA12_15 <= KW_IN)||(LA12_15 >= KW_INDEXES && LA12_15 <= KW_INPUTFORMAT)||(LA12_15 >= KW_INT && LA12_15 <= KW_INTERSECT)||(LA12_15 >= KW_INTO && LA12_15 <= KW_JAR)||(LA12_15 >= KW_KEYS && LA12_15 <= KW_LEFT)||(LA12_15 >= KW_LIKE && LA12_15 <= KW_LOCATION)||(LA12_15 >= KW_LOCKS && LA12_15 <= KW_LONG)||(LA12_15 >= KW_MAPJOIN && LA12_15 <= KW_MONTH)||(LA12_15 >= KW_MSCK && LA12_15 <= KW_NOSCAN)||(LA12_15 >= KW_NO_DROP && LA12_15 <= KW_OFFLINE)||LA12_15==KW_OPTION||(LA12_15 >= KW_ORDER && LA12_15 <= KW_OUTPUTFORMAT)||(LA12_15 >= KW_OVERWRITE && LA12_15 <= KW_OWNER)||(LA12_15 >= KW_PARTITION && LA12_15 <= KW_PLUS)||(LA12_15 >= KW_PRETTY && LA12_15 <= KW_RECORDWRITER)||(LA12_15 >= KW_REGEXP && LA12_15 <= KW_SECOND)||(LA12_15 >= KW_SEMI && LA12_15 <= KW_SHOW)||(LA12_15 >= KW_SKEWED && LA12_15 <= KW_TABLES)||(LA12_15 >= KW_TBLPROPERTIES && LA12_15 <= KW_TERMINATED)||(LA12_15 >= KW_TIMESTAMP && LA12_15 <= KW_TRANSACTIONS)||(LA12_15 >= KW_TRIGGER && LA12_15 <= KW_UNARCHIVE)||(LA12_15 >= KW_UNDO && LA12_15 <= KW_UNIONTYPE)||(LA12_15 >= KW_UNLOCK && LA12_15 <= KW_UNSIGNED)||(LA12_15 >= KW_URI && LA12_15 <= KW_VALUE_TYPE)||LA12_15==KW_VIEW||LA12_15==KW_WHILE||(LA12_15 >= KW_WITH && LA12_15 <= KW_YEAR)) ) {s = 89;}

                         
                        input.seek(index12_15);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA12_62 = input.LA(1);

                         
                        int index12_62 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA12_62==LPAREN) && (synpred1_HiveParser())) {s = 100;}

                        else if ( (LA12_62==COMMA) ) {s = 101;}

                        else if ( (LA12_62==KW_ON) && (synpred1_HiveParser())) {s = 102;}

                        else if ( (LA12_62==KW_TO) ) {s = 103;}

                         
                        input.seek(index12_62);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA12_63 = input.LA(1);

                         
                        int index12_63 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA12_63==LPAREN) && (synpred1_HiveParser())) {s = 104;}

                        else if ( (LA12_63==COMMA) ) {s = 105;}

                        else if ( (LA12_63==KW_ON) && (synpred1_HiveParser())) {s = 106;}

                        else if ( (LA12_63==KW_TO) ) {s = 107;}

                         
                        input.seek(index12_63);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA12_64 = input.LA(1);

                         
                        int index12_64 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA12_64==LPAREN) && (synpred1_HiveParser())) {s = 108;}

                        else if ( (LA12_64==COMMA) ) {s = 109;}

                        else if ( (LA12_64==KW_ON) && (synpred1_HiveParser())) {s = 110;}

                        else if ( (LA12_64==KW_TO) ) {s = 111;}

                         
                        input.seek(index12_64);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA12_65 = input.LA(1);

                         
                        int index12_65 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA12_65==LPAREN) && (synpred1_HiveParser())) {s = 112;}

                        else if ( (LA12_65==COMMA) ) {s = 113;}

                        else if ( (LA12_65==KW_ON) && (synpred1_HiveParser())) {s = 114;}

                        else if ( (LA12_65==KW_TO) ) {s = 115;}

                         
                        input.seek(index12_65);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA12_66 = input.LA(1);

                         
                        int index12_66 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA12_66==LPAREN) && (synpred1_HiveParser())) {s = 116;}

                        else if ( (LA12_66==COMMA) ) {s = 117;}

                        else if ( (LA12_66==KW_ON) && (synpred1_HiveParser())) {s = 118;}

                        else if ( (LA12_66==KW_TO) ) {s = 119;}

                         
                        input.seek(index12_66);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA12_67 = input.LA(1);

                         
                        int index12_67 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA12_67==LPAREN) && (synpred1_HiveParser())) {s = 120;}

                        else if ( (LA12_67==COMMA) ) {s = 121;}

                        else if ( (LA12_67==KW_ON) && (synpred1_HiveParser())) {s = 122;}

                        else if ( (LA12_67==KW_TO) ) {s = 123;}

                         
                        input.seek(index12_67);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA12_68 = input.LA(1);

                         
                        int index12_68 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA12_68==LPAREN) && (synpred1_HiveParser())) {s = 124;}

                        else if ( (LA12_68==COMMA) ) {s = 125;}

                        else if ( (LA12_68==KW_ON) && (synpred1_HiveParser())) {s = 126;}

                        else if ( (LA12_68==KW_TO) ) {s = 127;}

                         
                        input.seek(index12_68);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA12_70 = input.LA(1);

                         
                        int index12_70 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA12_70==LPAREN) && (synpred1_HiveParser())) {s = 128;}

                        else if ( (LA12_70==COMMA) ) {s = 129;}

                        else if ( (LA12_70==KW_ON) && (synpred1_HiveParser())) {s = 130;}

                        else if ( (LA12_70==KW_TO) ) {s = 131;}

                         
                        input.seek(index12_70);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA12_71 = input.LA(1);

                         
                        int index12_71 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA12_71==LPAREN) && (synpred1_HiveParser())) {s = 132;}

                        else if ( (LA12_71==COMMA) ) {s = 133;}

                        else if ( (LA12_71==KW_ON) && (synpred1_HiveParser())) {s = 134;}

                        else if ( (LA12_71==KW_TO) ) {s = 135;}

                         
                        input.seek(index12_71);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA12_72 = input.LA(1);

                         
                        int index12_72 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA12_72==LPAREN) && (synpred1_HiveParser())) {s = 136;}

                        else if ( (LA12_72==COMMA) ) {s = 137;}

                        else if ( (LA12_72==KW_ON) && (synpred1_HiveParser())) {s = 138;}

                        else if ( (LA12_72==KW_TO) ) {s = 139;}

                         
                        input.seek(index12_72);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA12_77 = input.LA(1);

                         
                        int index12_77 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA12_77==KW_OPTION) && (synpred2_HiveParser())) {s = 140;}

                        else if ( (LA12_77==COMMA||LA12_77==KW_FROM) ) {s = 89;}

                         
                        input.seek(index12_77);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA12_78 = input.LA(1);

                         
                        int index12_78 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA12_78==LPAREN) && (synpred2_HiveParser())) {s = 143;}

                        else if ( (LA12_78==COMMA) ) {s = 144;}

                        else if ( (LA12_78==KW_ON) && (synpred2_HiveParser())) {s = 145;}

                        else if ( (LA12_78==KW_FROM) ) {s = 146;}

                         
                        input.seek(index12_78);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA12_79 = input.LA(1);

                         
                        int index12_79 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA12_79==LPAREN) && (synpred2_HiveParser())) {s = 147;}

                        else if ( (LA12_79==COMMA) ) {s = 148;}

                        else if ( (LA12_79==KW_ON) && (synpred2_HiveParser())) {s = 149;}

                        else if ( (LA12_79==KW_FROM) ) {s = 150;}

                         
                        input.seek(index12_79);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA12_80 = input.LA(1);

                         
                        int index12_80 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA12_80==LPAREN) && (synpred2_HiveParser())) {s = 151;}

                        else if ( (LA12_80==COMMA) ) {s = 152;}

                        else if ( (LA12_80==KW_ON) && (synpred2_HiveParser())) {s = 153;}

                        else if ( (LA12_80==KW_FROM) ) {s = 154;}

                         
                        input.seek(index12_80);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA12_81 = input.LA(1);

                         
                        int index12_81 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA12_81==LPAREN) && (synpred2_HiveParser())) {s = 155;}

                        else if ( (LA12_81==COMMA) ) {s = 156;}

                        else if ( (LA12_81==KW_ON) && (synpred2_HiveParser())) {s = 157;}

                        else if ( (LA12_81==KW_FROM) ) {s = 158;}

                         
                        input.seek(index12_81);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA12_82 = input.LA(1);

                         
                        int index12_82 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA12_82==LPAREN) && (synpred2_HiveParser())) {s = 159;}

                        else if ( (LA12_82==COMMA) ) {s = 160;}

                        else if ( (LA12_82==KW_ON) && (synpred2_HiveParser())) {s = 161;}

                        else if ( (LA12_82==KW_FROM) ) {s = 162;}

                         
                        input.seek(index12_82);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA12_83 = input.LA(1);

                         
                        int index12_83 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA12_83==LPAREN) && (synpred2_HiveParser())) {s = 163;}

                        else if ( (LA12_83==COMMA) ) {s = 164;}

                        else if ( (LA12_83==KW_ON) && (synpred2_HiveParser())) {s = 165;}

                        else if ( (LA12_83==KW_FROM) ) {s = 166;}

                         
                        input.seek(index12_83);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA12_84 = input.LA(1);

                         
                        int index12_84 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA12_84==LPAREN) && (synpred2_HiveParser())) {s = 167;}

                        else if ( (LA12_84==COMMA) ) {s = 168;}

                        else if ( (LA12_84==KW_ON) && (synpred2_HiveParser())) {s = 169;}

                        else if ( (LA12_84==KW_FROM) ) {s = 170;}

                         
                        input.seek(index12_84);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA12_86 = input.LA(1);

                         
                        int index12_86 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA12_86==LPAREN) && (synpred2_HiveParser())) {s = 171;}

                        else if ( (LA12_86==COMMA) ) {s = 172;}

                        else if ( (LA12_86==KW_ON) && (synpred2_HiveParser())) {s = 173;}

                        else if ( (LA12_86==KW_FROM) ) {s = 174;}

                         
                        input.seek(index12_86);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA12_87 = input.LA(1);

                         
                        int index12_87 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA12_87==LPAREN) && (synpred2_HiveParser())) {s = 175;}

                        else if ( (LA12_87==COMMA) ) {s = 176;}

                        else if ( (LA12_87==KW_ON) && (synpred2_HiveParser())) {s = 177;}

                        else if ( (LA12_87==KW_FROM) ) {s = 178;}

                         
                        input.seek(index12_87);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA12_88 = input.LA(1);

                         
                        int index12_88 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA12_88==LPAREN) && (synpred2_HiveParser())) {s = 179;}

                        else if ( (LA12_88==COMMA) ) {s = 180;}

                        else if ( (LA12_88==KW_ON) && (synpred2_HiveParser())) {s = 181;}

                        else if ( (LA12_88==KW_FROM) ) {s = 182;}

                         
                        input.seek(index12_88);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA12_101 = input.LA(1);

                         
                        int index12_101 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_HiveParser()) ) {s = 138;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index12_101);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA12_103 = input.LA(1);

                         
                        int index12_103 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_HiveParser()) ) {s = 138;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index12_103);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA12_105 = input.LA(1);

                         
                        int index12_105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_HiveParser()) ) {s = 138;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index12_105);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA12_107 = input.LA(1);

                         
                        int index12_107 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_HiveParser()) ) {s = 138;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index12_107);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA12_109 = input.LA(1);

                         
                        int index12_109 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_HiveParser()) ) {s = 138;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index12_109);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA12_111 = input.LA(1);

                         
                        int index12_111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_HiveParser()) ) {s = 138;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index12_111);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA12_113 = input.LA(1);

                         
                        int index12_113 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_HiveParser()) ) {s = 138;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index12_113);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA12_115 = input.LA(1);

                         
                        int index12_115 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_HiveParser()) ) {s = 138;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index12_115);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA12_117 = input.LA(1);

                         
                        int index12_117 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_HiveParser()) ) {s = 138;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index12_117);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA12_119 = input.LA(1);

                         
                        int index12_119 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_HiveParser()) ) {s = 138;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index12_119);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA12_121 = input.LA(1);

                         
                        int index12_121 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_HiveParser()) ) {s = 138;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index12_121);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA12_123 = input.LA(1);

                         
                        int index12_123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_HiveParser()) ) {s = 138;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index12_123);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA12_125 = input.LA(1);

                         
                        int index12_125 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_HiveParser()) ) {s = 138;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index12_125);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA12_127 = input.LA(1);

                         
                        int index12_127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_HiveParser()) ) {s = 138;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index12_127);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA12_129 = input.LA(1);

                         
                        int index12_129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_HiveParser()) ) {s = 138;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index12_129);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA12_131 = input.LA(1);

                         
                        int index12_131 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_HiveParser()) ) {s = 138;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index12_131);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA12_133 = input.LA(1);

                         
                        int index12_133 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_HiveParser()) ) {s = 138;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index12_133);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA12_135 = input.LA(1);

                         
                        int index12_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_HiveParser()) ) {s = 138;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index12_135);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA12_137 = input.LA(1);

                         
                        int index12_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_HiveParser()) ) {s = 138;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index12_137);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA12_139 = input.LA(1);

                         
                        int index12_139 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_HiveParser()) ) {s = 138;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index12_139);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA12_144 = input.LA(1);

                         
                        int index12_144 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_HiveParser()) ) {s = 181;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index12_144);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA12_146 = input.LA(1);

                         
                        int index12_146 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_HiveParser()) ) {s = 181;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index12_146);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA12_148 = input.LA(1);

                         
                        int index12_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_HiveParser()) ) {s = 181;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index12_148);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA12_150 = input.LA(1);

                         
                        int index12_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_HiveParser()) ) {s = 181;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index12_150);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA12_152 = input.LA(1);

                         
                        int index12_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_HiveParser()) ) {s = 181;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index12_152);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA12_154 = input.LA(1);

                         
                        int index12_154 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_HiveParser()) ) {s = 181;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index12_154);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA12_156 = input.LA(1);

                         
                        int index12_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_HiveParser()) ) {s = 181;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index12_156);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA12_158 = input.LA(1);

                         
                        int index12_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_HiveParser()) ) {s = 181;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index12_158);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA12_160 = input.LA(1);

                         
                        int index12_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_HiveParser()) ) {s = 181;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index12_160);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA12_162 = input.LA(1);

                         
                        int index12_162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_HiveParser()) ) {s = 181;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index12_162);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA12_164 = input.LA(1);

                         
                        int index12_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_HiveParser()) ) {s = 181;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index12_164);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA12_166 = input.LA(1);

                         
                        int index12_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_HiveParser()) ) {s = 181;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index12_166);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA12_168 = input.LA(1);

                         
                        int index12_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_HiveParser()) ) {s = 181;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index12_168);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA12_170 = input.LA(1);

                         
                        int index12_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_HiveParser()) ) {s = 181;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index12_170);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA12_172 = input.LA(1);

                         
                        int index12_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_HiveParser()) ) {s = 181;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index12_172);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA12_174 = input.LA(1);

                         
                        int index12_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_HiveParser()) ) {s = 181;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index12_174);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA12_176 = input.LA(1);

                         
                        int index12_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_HiveParser()) ) {s = 181;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index12_176);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA12_178 = input.LA(1);

                         
                        int index12_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_HiveParser()) ) {s = 181;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index12_178);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA12_180 = input.LA(1);

                         
                        int index12_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_HiveParser()) ) {s = 181;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index12_180);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA12_182 = input.LA(1);

                         
                        int index12_182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_HiveParser()) ) {s = 181;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index12_182);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 12, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA111_eotS =
        "\130\uffff";
    static final String DFA111_eofS =
        "\2\uffff\1\7\1\uffff\1\7\1\uffff\1\7\121\uffff";
    static final String DFA111_minS =
        "\1\32\1\uffff\1\21\1\uffff\1\21\1\uffff\1\21\4\uffff\3\0\1\uffff"+
        "\1\0\1\uffff\3\0\1\uffff\1\0\1\uffff\3\0\1\uffff\1\0\74\uffff";
    static final String DFA111_maxS =
        "\1\u0124\1\uffff\1\u0124\1\uffff\1\u0124\1\uffff\1\u0124\4\uffff"+
        "\3\0\1\uffff\1\0\1\uffff\3\0\1\uffff\1\0\1\uffff\3\0\1\uffff\1\0"+
        "\74\uffff";
    static final String DFA111_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\1\uffff\1\3\1\uffff\1\4\2\uffff\1\1\115"+
        "\uffff";
    static final String DFA111_specialS =
        "\1\0\1\uffff\1\1\10\uffff\1\2\1\3\1\4\1\uffff\1\5\1\uffff\1\6\1"+
        "\7\1\10\1\uffff\1\11\1\uffff\1\12\1\13\1\14\1\uffff\1\15\74\uffff}>";
    static final String[] DFA111_transitionS = {
            "\7\7\1\uffff\17\7\2\uffff\1\7\1\uffff\4\7\1\uffff\6\7\1\uffff"+
            "\2\7\1\uffff\1\7\1\uffff\4\7\1\1\20\7\1\uffff\4\7\1\uffff\1"+
            "\7\1\uffff\1\7\1\uffff\4\7\1\5\10\7\1\uffff\2\7\1\4\1\uffff"+
            "\1\7\1\3\4\7\1\uffff\3\7\1\uffff\14\7\1\uffff\4\7\1\uffff\4"+
            "\7\1\uffff\12\7\2\uffff\6\7\1\uffff\3\7\1\uffff\4\7\1\uffff"+
            "\1\7\1\uffff\5\7\1\uffff\2\7\1\uffff\5\7\2\uffff\1\6\13\7\1"+
            "\uffff\20\7\1\2\2\7\1\uffff\25\7\1\uffff\3\7\1\uffff\5\7\1\uffff"+
            "\4\7\1\uffff\3\7\1\uffff\14\7\1\uffff\1\7\2\uffff\1\7\1\uffff"+
            "\2\7",
            "",
            "\1\7\10\uffff\1\13\3\14\2\17\1\14\1\uffff\1\14\2\17\1\14\1"+
            "\17\1\14\5\17\2\14\1\17\1\14\2\uffff\1\14\1\uffff\4\14\1\uffff"+
            "\6\14\1\uffff\1\14\1\17\1\uffff\1\17\1\uffff\3\17\1\14\1\uffff"+
            "\1\14\1\17\3\14\1\17\2\14\1\17\3\14\1\17\3\14\1\uffff\1\14\2"+
            "\17\1\14\1\uffff\1\14\1\uffff\1\14\1\uffff\1\14\1\17\2\14\1"+
            "\12\3\17\4\14\1\17\1\uffff\1\17\2\14\1\uffff\1\17\1\uffff\1"+
            "\14\3\17\1\uffff\3\14\1\uffff\1\14\2\17\2\14\1\17\3\14\3\17"+
            "\1\uffff\2\17\2\14\1\uffff\2\14\2\17\1\uffff\1\17\3\14\1\17"+
            "\5\14\2\uffff\6\14\1\uffff\1\14\1\17\1\14\1\uffff\1\14\2\17"+
            "\1\14\1\uffff\1\14\1\uffff\3\17\2\14\1\uffff\2\14\1\uffff\1"+
            "\15\2\14\1\17\1\14\2\uffff\2\14\1\17\2\14\1\17\2\14\1\17\3\14"+
            "\1\uffff\7\14\1\17\1\14\1\17\3\14\3\17\3\14\1\uffff\4\14\1\17"+
            "\5\14\1\17\10\14\1\17\1\14\1\uffff\3\14\1\uffff\1\17\1\14\1"+
            "\17\2\14\1\uffff\3\17\1\14\1\uffff\1\14\1\17\1\14\1\uffff\3"+
            "\14\1\17\2\14\2\17\2\14\1\17\1\14\1\uffff\1\14\2\uffff\1\14"+
            "\1\uffff\1\17\1\14",
            "",
            "\1\7\10\uffff\1\21\3\22\2\25\1\22\1\uffff\1\22\2\25\1\22\1"+
            "\25\1\22\5\25\2\22\1\25\1\22\2\uffff\1\22\1\uffff\4\22\1\uffff"+
            "\6\22\1\uffff\1\22\1\25\1\uffff\1\25\1\uffff\3\25\1\22\1\uffff"+
            "\1\22\1\25\3\22\1\25\2\22\1\25\3\22\1\25\3\22\1\uffff\1\22\2"+
            "\25\1\22\1\uffff\1\22\1\uffff\1\22\1\uffff\1\22\1\25\2\22\1"+
            "\uffff\3\25\4\22\1\25\1\uffff\1\25\2\22\1\uffff\1\25\1\uffff"+
            "\1\22\3\25\1\uffff\3\22\1\uffff\1\22\2\25\2\22\1\25\3\22\3\25"+
            "\1\uffff\2\25\2\22\1\uffff\2\22\2\25\1\uffff\1\25\3\22\1\25"+
            "\5\22\2\uffff\6\22\1\uffff\1\22\1\25\1\22\1\uffff\1\22\2\25"+
            "\1\22\1\uffff\1\22\1\uffff\3\25\2\22\1\uffff\2\22\1\uffff\1"+
            "\23\2\22\1\25\1\22\2\uffff\2\22\1\25\2\22\1\25\2\22\1\25\3\22"+
            "\1\uffff\7\22\1\25\1\22\1\25\3\22\3\25\3\22\1\uffff\4\22\1\25"+
            "\5\22\1\25\10\22\1\25\1\22\1\uffff\3\22\1\uffff\1\25\1\22\1"+
            "\25\2\22\1\uffff\3\25\1\22\1\uffff\1\22\1\25\1\22\1\uffff\3"+
            "\22\1\25\2\22\2\25\2\22\1\25\1\22\1\uffff\1\22\2\uffff\1\22"+
            "\1\uffff\1\25\1\22",
            "",
            "\1\7\10\uffff\1\27\3\30\2\33\1\30\1\uffff\1\30\2\33\1\30\1"+
            "\33\1\30\5\33\2\30\1\33\1\30\2\uffff\1\30\1\uffff\4\30\1\uffff"+
            "\6\30\1\uffff\1\30\1\33\1\uffff\1\33\1\uffff\3\33\1\30\1\uffff"+
            "\1\30\1\33\3\30\1\33\2\30\1\33\3\30\1\33\3\30\1\uffff\1\30\2"+
            "\33\1\30\1\uffff\1\30\1\uffff\1\30\1\uffff\1\30\1\33\2\30\1"+
            "\uffff\3\33\4\30\1\33\1\uffff\1\33\2\30\1\uffff\1\33\1\uffff"+
            "\1\30\3\33\1\uffff\3\30\1\uffff\1\30\2\33\2\30\1\33\3\30\3\33"+
            "\1\uffff\2\33\2\30\1\uffff\2\30\2\33\1\uffff\1\33\3\30\1\33"+
            "\5\30\2\uffff\6\30\1\uffff\1\30\1\33\1\30\1\uffff\1\30\2\33"+
            "\1\30\1\uffff\1\30\1\uffff\3\33\2\30\1\uffff\2\30\1\uffff\1"+
            "\31\2\30\1\33\1\30\2\uffff\2\30\1\33\2\30\1\33\2\30\1\33\3\30"+
            "\1\uffff\7\30\1\33\1\30\1\33\3\30\3\33\3\30\1\uffff\4\30\1\33"+
            "\5\30\1\33\10\30\1\33\1\30\1\uffff\3\30\1\uffff\1\33\1\30\1"+
            "\33\2\30\1\uffff\3\33\1\30\1\uffff\1\30\1\33\1\30\1\uffff\3"+
            "\30\1\33\2\30\2\33\2\30\1\33\1\30\1\uffff\1\30\2\uffff\1\30"+
            "\1\uffff\1\33\1\30",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_eotS);
    static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_eofS);
    static final char[] DFA111_min = DFA.unpackEncodedStringToUnsignedChars(DFA111_minS);
    static final char[] DFA111_max = DFA.unpackEncodedStringToUnsignedChars(DFA111_maxS);
    static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_acceptS);
    static final short[] DFA111_special = DFA.unpackEncodedString(DFA111_specialS);
    static final short[][] DFA111_transition;

    static {
        int numStates = DFA111_transitionS.length;
        DFA111_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA111_transition[i] = DFA.unpackEncodedString(DFA111_transitionS[i]);
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;
        }
        public String getDescription() {
            return "1367:5: ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) | ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_FORMATTED | KW_EXTENDED | KW_PRETTY )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY ) parttype= partTypeExpr ) -> ^( TOK_DESCTABLE $parttype $descOptions) |parttype= partTypeExpr -> ^( TOK_DESCTABLE $parttype) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA111_0 = input.LA(1);

                         
                        int index111_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA111_0==KW_DATABASE) && (synpred7_HiveParser())) {s = 1;}

                        else if ( (LA111_0==KW_SCHEMA) ) {s = 2;}

                        else if ( (LA111_0==KW_FUNCTION) && (synpred8_HiveParser())) {s = 3;}

                        else if ( (LA111_0==KW_FORMATTED) ) {s = 4;}

                        else if ( (LA111_0==KW_EXTENDED) && (synpred9_HiveParser())) {s = 5;}

                        else if ( (LA111_0==KW_PRETTY) ) {s = 6;}

                        else if ( ((LA111_0 >= Identifier && LA111_0 <= KW_ANALYZE)||(LA111_0 >= KW_ARCHIVE && LA111_0 <= KW_CASCADE)||LA111_0==KW_CHANGE||(LA111_0 >= KW_CLUSTER && LA111_0 <= KW_COLLECTION)||(LA111_0 >= KW_COLUMNS && LA111_0 <= KW_CONCATENATE)||(LA111_0 >= KW_CONTINUE && LA111_0 <= KW_CREATE)||LA111_0==KW_CUBE||(LA111_0 >= KW_CURRENT_DATE && LA111_0 <= KW_DATA)||(LA111_0 >= KW_DATABASES && LA111_0 <= KW_DISABLE)||(LA111_0 >= KW_DISTRIBUTE && LA111_0 <= KW_ELEM_TYPE)||LA111_0==KW_ENABLE||LA111_0==KW_ESCAPED||(LA111_0 >= KW_EXCLUSIVE && LA111_0 <= KW_EXPORT)||(LA111_0 >= KW_EXTERNAL && LA111_0 <= KW_FLOAT)||(LA111_0 >= KW_FOR && LA111_0 <= KW_FORMAT)||LA111_0==KW_FULL||(LA111_0 >= KW_FUNCTIONS && LA111_0 <= KW_GROUPING)||(LA111_0 >= KW_HOLD_DDLTIME && LA111_0 <= KW_IDXPROPERTIES)||(LA111_0 >= KW_IGNORE && LA111_0 <= KW_INTERSECT)||(LA111_0 >= KW_INTO && LA111_0 <= KW_JAR)||(LA111_0 >= KW_KEYS && LA111_0 <= KW_LEFT)||(LA111_0 >= KW_LIKE && LA111_0 <= KW_LONG)||(LA111_0 >= KW_MAPJOIN && LA111_0 <= KW_MONTH)||(LA111_0 >= KW_MSCK && LA111_0 <= KW_NOSCAN)||(LA111_0 >= KW_NO_DROP && LA111_0 <= KW_OFFLINE)||LA111_0==KW_OPTION||(LA111_0 >= KW_ORDER && LA111_0 <= KW_OUTPUTFORMAT)||(LA111_0 >= KW_OVERWRITE && LA111_0 <= KW_OWNER)||(LA111_0 >= KW_PARTITION && LA111_0 <= KW_PLUS)||(LA111_0 >= KW_PRINCIPALS && LA111_0 <= KW_RECORDWRITER)||(LA111_0 >= KW_REGEXP && LA111_0 <= KW_ROWS)||(LA111_0 >= KW_SCHEMAS && LA111_0 <= KW_SECOND)||(LA111_0 >= KW_SEMI && LA111_0 <= KW_TABLES)||(LA111_0 >= KW_TBLPROPERTIES && LA111_0 <= KW_TERMINATED)||(LA111_0 >= KW_TIMESTAMP && LA111_0 <= KW_TRANSACTIONS)||(LA111_0 >= KW_TRIGGER && LA111_0 <= KW_UNARCHIVE)||(LA111_0 >= KW_UNDO && LA111_0 <= KW_UNIONTYPE)||(LA111_0 >= KW_UNLOCK && LA111_0 <= KW_VALUE_TYPE)||LA111_0==KW_VIEW||LA111_0==KW_WHILE||(LA111_0 >= KW_WITH && LA111_0 <= KW_YEAR)) ) {s = 7;}

                         
                        input.seek(index111_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA111_2 = input.LA(1);

                         
                        int index111_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA111_2==KW_EXTENDED) && (synpred7_HiveParser())) {s = 10;}

                        else if ( (LA111_2==Identifier) ) {s = 11;}

                        else if ( ((LA111_2 >= KW_ADD && LA111_2 <= KW_AFTER)||LA111_2==KW_ANALYZE||LA111_2==KW_ARCHIVE||LA111_2==KW_ASC||LA111_2==KW_BEFORE||(LA111_2 >= KW_BUCKET && LA111_2 <= KW_BUCKETS)||LA111_2==KW_CASCADE||LA111_2==KW_CHANGE||(LA111_2 >= KW_CLUSTER && LA111_2 <= KW_COLLECTION)||(LA111_2 >= KW_COLUMNS && LA111_2 <= KW_CONCATENATE)||LA111_2==KW_CONTINUE||LA111_2==KW_DATA||LA111_2==KW_DATABASES||(LA111_2 >= KW_DATETIME && LA111_2 <= KW_DBPROPERTIES)||(LA111_2 >= KW_DEFERRED && LA111_2 <= KW_DEFINED)||(LA111_2 >= KW_DELIMITED && LA111_2 <= KW_DESC)||(LA111_2 >= KW_DIRECTORIES && LA111_2 <= KW_DISABLE)||LA111_2==KW_DISTRIBUTE||LA111_2==KW_ELEM_TYPE||LA111_2==KW_ENABLE||LA111_2==KW_ESCAPED||LA111_2==KW_EXCLUSIVE||(LA111_2 >= KW_EXPLAIN && LA111_2 <= KW_EXPORT)||(LA111_2 >= KW_FIELDS && LA111_2 <= KW_FIRST)||(LA111_2 >= KW_FORMAT && LA111_2 <= KW_FORMATTED)||LA111_2==KW_FUNCTIONS||(LA111_2 >= KW_HOLD_DDLTIME && LA111_2 <= KW_IDXPROPERTIES)||LA111_2==KW_IGNORE||(LA111_2 >= KW_INDEX && LA111_2 <= KW_INDEXES)||(LA111_2 >= KW_INPATH && LA111_2 <= KW_INPUTFORMAT)||(LA111_2 >= KW_ITEMS && LA111_2 <= KW_JAR)||(LA111_2 >= KW_KEYS && LA111_2 <= KW_KEY_TYPE)||(LA111_2 >= KW_LIMIT && LA111_2 <= KW_LOAD)||(LA111_2 >= KW_LOCATION && LA111_2 <= KW_LONG)||(LA111_2 >= KW_MAPJOIN && LA111_2 <= KW_MONTH)||LA111_2==KW_MSCK||LA111_2==KW_NOSCAN||LA111_2==KW_NO_DROP||LA111_2==KW_OFFLINE||LA111_2==KW_OPTION||(LA111_2 >= KW_OUTPUTDRIVER && LA111_2 <= KW_OUTPUTFORMAT)||(LA111_2 >= KW_OVERWRITE && LA111_2 <= KW_OWNER)||(LA111_2 >= KW_PARTITIONED && LA111_2 <= KW_PARTITIONS)||LA111_2==KW_PLUS||(LA111_2 >= KW_PRETTY && LA111_2 <= KW_PRINCIPALS)||(LA111_2 >= KW_PROTECTION && LA111_2 <= KW_PURGE)||(LA111_2 >= KW_READ && LA111_2 <= KW_READONLY)||(LA111_2 >= KW_REBUILD && LA111_2 <= KW_RECORDWRITER)||(LA111_2 >= KW_REGEXP && LA111_2 <= KW_RESTRICT)||LA111_2==KW_REWRITE||(LA111_2 >= KW_RLIKE && LA111_2 <= KW_ROLES)||(LA111_2 >= KW_SCHEMA && LA111_2 <= KW_SECOND)||(LA111_2 >= KW_SEMI && LA111_2 <= KW_SERVER)||(LA111_2 >= KW_SETS && LA111_2 <= KW_SKEWED)||(LA111_2 >= KW_SORT && LA111_2 <= KW_STRUCT)||LA111_2==KW_TABLES||(LA111_2 >= KW_TBLPROPERTIES && LA111_2 <= KW_TERMINATED)||LA111_2==KW_TINYINT||(LA111_2 >= KW_TOUCH && LA111_2 <= KW_TRANSACTIONS)||LA111_2==KW_UNARCHIVE||LA111_2==KW_UNDO||LA111_2==KW_UNIONTYPE||(LA111_2 >= KW_UNLOCK && LA111_2 <= KW_UNSIGNED)||(LA111_2 >= KW_URI && LA111_2 <= KW_USE)||(LA111_2 >= KW_UTC && LA111_2 <= KW_UTCTIMESTAMP)||LA111_2==KW_VALUE_TYPE||LA111_2==KW_VIEW||LA111_2==KW_WHILE||LA111_2==KW_YEAR) ) {s = 12;}

                        else if ( (LA111_2==KW_PARTITION) ) {s = 13;}

                        else if ( (LA111_2==EOF||LA111_2==DOT) ) {s = 7;}

                        else if ( ((LA111_2 >= KW_ALL && LA111_2 <= KW_ALTER)||(LA111_2 >= KW_ARRAY && LA111_2 <= KW_AS)||LA111_2==KW_AUTHORIZATION||(LA111_2 >= KW_BETWEEN && LA111_2 <= KW_BOTH)||LA111_2==KW_BY||LA111_2==KW_CREATE||LA111_2==KW_CUBE||(LA111_2 >= KW_CURRENT_DATE && LA111_2 <= KW_CURSOR)||LA111_2==KW_DATE||LA111_2==KW_DECIMAL||LA111_2==KW_DELETE||LA111_2==KW_DESCRIBE||(LA111_2 >= KW_DOUBLE && LA111_2 <= KW_DROP)||LA111_2==KW_EXISTS||(LA111_2 >= KW_EXTERNAL && LA111_2 <= KW_FETCH)||LA111_2==KW_FLOAT||LA111_2==KW_FOR||LA111_2==KW_FULL||(LA111_2 >= KW_GRANT && LA111_2 <= KW_GROUPING)||(LA111_2 >= KW_IMPORT && LA111_2 <= KW_IN)||LA111_2==KW_INNER||(LA111_2 >= KW_INSERT && LA111_2 <= KW_INTERSECT)||(LA111_2 >= KW_INTO && LA111_2 <= KW_IS)||(LA111_2 >= KW_LATERAL && LA111_2 <= KW_LEFT)||LA111_2==KW_LIKE||LA111_2==KW_LOCAL||LA111_2==KW_NONE||(LA111_2 >= KW_NULL && LA111_2 <= KW_OF)||(LA111_2 >= KW_ORDER && LA111_2 <= KW_OUTER)||LA111_2==KW_PERCENT||LA111_2==KW_PROCEDURE||LA111_2==KW_RANGE||LA111_2==KW_READS||LA111_2==KW_REVOKE||LA111_2==KW_RIGHT||(LA111_2 >= KW_ROLLUP && LA111_2 <= KW_ROWS)||LA111_2==KW_SET||LA111_2==KW_SMALLINT||LA111_2==KW_TABLE||LA111_2==KW_TIMESTAMP||LA111_2==KW_TO||(LA111_2 >= KW_TRIGGER && LA111_2 <= KW_TRUNCATE)||LA111_2==KW_UNION||LA111_2==KW_UPDATE||(LA111_2 >= KW_USER && LA111_2 <= KW_USING)||LA111_2==KW_VALUES||LA111_2==KW_WITH) ) {s = 15;}

                         
                        input.seek(index111_2);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA111_11 = input.LA(1);

                         
                        int index111_11 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_HiveParser()) ) {s = 10;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index111_11);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA111_12 = input.LA(1);

                         
                        int index111_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_HiveParser()) ) {s = 10;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index111_12);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA111_13 = input.LA(1);

                         
                        int index111_13 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_HiveParser()) ) {s = 10;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index111_13);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA111_15 = input.LA(1);

                         
                        int index111_15 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_HiveParser()) ) {s = 10;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index111_15);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA111_17 = input.LA(1);

                         
                        int index111_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred9_HiveParser()) ) {s = 5;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index111_17);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA111_18 = input.LA(1);

                         
                        int index111_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred9_HiveParser()) ) {s = 5;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index111_18);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA111_19 = input.LA(1);

                         
                        int index111_19 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred9_HiveParser()) ) {s = 5;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index111_19);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA111_21 = input.LA(1);

                         
                        int index111_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred9_HiveParser()) ) {s = 5;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index111_21);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA111_23 = input.LA(1);

                         
                        int index111_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred9_HiveParser()) ) {s = 5;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index111_23);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA111_24 = input.LA(1);

                         
                        int index111_24 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred9_HiveParser()) ) {s = 5;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index111_24);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA111_25 = input.LA(1);

                         
                        int index111_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred9_HiveParser()) ) {s = 5;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index111_25);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA111_27 = input.LA(1);

                         
                        int index111_27 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred9_HiveParser()) ) {s = 5;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index111_27);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 111, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA199_eotS =
        "\131\uffff";
    static final String DFA199_eofS =
        "\1\2\130\uffff";
    static final String DFA199_minS =
        "\1\44\1\7\35\uffff\1\4\71\uffff";
    static final String DFA199_maxS =
        "\1\u0133\1\u013b\35\uffff\1\u0137\71\uffff";
    static final String DFA199_acceptS =
        "\2\uffff\1\2\72\uffff\1\1\33\uffff";
    static final String DFA199_specialS =
        "\131\uffff}>";
    static final String[] DFA199_transitionS = {
            "\1\2\20\uffff\1\2\5\uffff\1\2\40\uffff\1\2\31\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\11\uffff\1\2\12\uffff\1\2\3\uffff"+
            "\2\2\2\uffff\1\2\5\uffff\1\1\14\uffff\1\2\5\uffff\1\2\31\uffff"+
            "\3\2\23\uffff\1\2\13\uffff\1\2\3\uffff\1\2\6\uffff\1\2\17\uffff"+
            "\1\2\11\uffff\1\2\2\uffff\1\2\4\uffff\1\2\1\uffff\1\2\20\uffff"+
            "\1\2",
            "\1\2\5\uffff\1\2\4\uffff\1\2\7\uffff\7\2\1\uffff\22\2\1\uffff"+
            "\4\2\1\uffff\6\2\1\uffff\2\2\1\uffff\1\2\1\uffff\4\2\1\uffff"+
            "\20\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\1\uffff\4\2\1\uffff"+
            "\10\2\1\uffff\3\2\1\uffff\1\2\1\uffff\4\2\1\uffff\25\2\1\uffff"+
            "\1\37\3\2\1\uffff\12\2\1\uffff\7\2\1\uffff\10\2\1\uffff\1\2"+
            "\1\uffff\5\2\1\uffff\2\2\1\uffff\5\2\2\uffff\14\2\1\uffff\23"+
            "\2\1\uffff\25\2\1\uffff\3\2\1\uffff\5\2\1\uffff\4\2\1\uffff"+
            "\3\2\1\uffff\14\2\1\uffff\1\2\2\uffff\1\2\1\uffff\2\2\3\uffff"+
            "\1\2\2\uffff\1\2\2\uffff\2\2\7\uffff\5\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\3\2\3\uffff\1\2\3\uffff\2\2\1\uffff\1\2\2\uffff\2\2\1\uffff"+
            "\2\2\10\uffff\1\2\6\uffff\1\2\133\uffff\1\2\13\uffff\1\2\10"+
            "\uffff\1\2\25\uffff\1\2\6\uffff\1\2\33\uffff\1\2\1\uffff\1\2"+
            "\11\uffff\1\2\3\uffff\1\2\35\uffff\1\75\27\uffff\1\2\15\uffff"+
            "\4\2\1\uffff\3\2\1\uffff\1\2\7\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA199_eot = DFA.unpackEncodedString(DFA199_eotS);
    static final short[] DFA199_eof = DFA.unpackEncodedString(DFA199_eofS);
    static final char[] DFA199_min = DFA.unpackEncodedStringToUnsignedChars(DFA199_minS);
    static final char[] DFA199_max = DFA.unpackEncodedStringToUnsignedChars(DFA199_maxS);
    static final short[] DFA199_accept = DFA.unpackEncodedString(DFA199_acceptS);
    static final short[] DFA199_special = DFA.unpackEncodedString(DFA199_specialS);
    static final short[][] DFA199_transition;

    static {
        int numStates = DFA199_transitionS.length;
        DFA199_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA199_transition[i] = DFA.unpackEncodedString(DFA199_transitionS[i]);
        }
    }

    class DFA199 extends DFA {

        public DFA199(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 199;
            this.eot = DFA199_eot;
            this.eof = DFA199_eof;
            this.min = DFA199_min;
            this.max = DFA199_max;
            this.accept = DFA199_accept;
            this.special = DFA199_special;
            this.transition = DFA199_transition;
        }
        public String getDescription() {
            return "1814:103: ( tableRowFormatMapKeysIdentifier )?";
        }
    }
 

    public static final BitSet FOLLOW_explainStatement_in_statement1070 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_statement1072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_execStatement_in_statement1077 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_statement1079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_EXPLAIN_in_explainStatement1100 = new BitSet(new long[]{0x0000004180000000L,0x0460030040E80004L,0x0000101290000808L,0x0000908018280000L,0x0000000800520400L});
    public static final BitSet FOLLOW_explainOption_in_explainStatement1109 = new BitSet(new long[]{0x0000004180000000L,0x0460030040E80004L,0x0000101290000808L,0x0000908008280000L,0x0000000800520400L});
    public static final BitSet FOLLOW_execStatement_in_explainStatement1112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_REWRITE_in_explainStatement1143 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000001000000800L,0x0000008000080000L,0x0000000800000000L});
    public static final BitSet FOLLOW_queryStatementExpression_in_explainStatement1145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_queryStatementExpression_in_execStatement1214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loadStatement_in_execStatement1223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exportStatement_in_execStatement1231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importStatement_in_execStatement1239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ddlStatement_in_execStatement1247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_deleteStatement_in_execStatement1255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_updateStatement_in_execStatement1263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOAD_in_loadStatement1290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_KW_DATA_in_loadStatement1292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000100L});
    public static final BitSet FOLLOW_KW_LOCAL_in_loadStatement1297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_KW_INPATH_in_loadStatement1301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_loadStatement1306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000008000L});
    public static final BitSet FOLLOW_KW_OVERWRITE_in_loadStatement1312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_KW_INTO_in_loadStatement1316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_loadStatement1318 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableOrPartition_in_loadStatement1323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FOR_in_replicationClause1375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_METADATA_in_replicationClause1380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_REPLICATION_in_replicationClause1384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LPAREN_in_replicationClause1386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_replicationClause1391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_replicationClause1394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_EXPORT_in_exportStatement1438 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_exportStatement1446 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableOrPartition_in_exportStatement1451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_TO_in_exportStatement1460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_exportStatement1465 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L});
    public static final BitSet FOLLOW_replicationClause_in_exportStatement1474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IMPORT_in_importStatement1524 = new BitSet(new long[]{0x0000000000000000L,0x0040040000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_EXTERNAL_in_importStatement1539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_importStatement1543 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableOrPartition_in_importStatement1548 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_FROM_in_importStatement1562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_importStatement1567 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_tableLocation_in_importStatement1579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createDatabaseStatement_in_ddlStatement1631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchDatabaseStatement_in_ddlStatement1639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropDatabaseStatement_in_ddlStatement1647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createTableStatement_in_ddlStatement1655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropTableStatement_in_ddlStatement1663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_truncateTableStatement_in_ddlStatement1671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatement_in_ddlStatement1679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_descStatement_in_ddlStatement1687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showStatement_in_ddlStatement1695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_metastoreCheck_in_ddlStatement1703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createViewStatement_in_ddlStatement1711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropViewStatement_in_ddlStatement1719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createFunctionStatement_in_ddlStatement1727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createMacroStatement_in_ddlStatement1735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createIndexStatement_in_ddlStatement1743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropIndexStatement_in_ddlStatement1751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropFunctionStatement_in_ddlStatement1759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reloadFunctionStatement_in_ddlStatement1767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropMacroStatement_in_ddlStatement1775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_analyzeStatement_in_ddlStatement1783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lockStatement_in_ddlStatement1791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unlockStatement_in_ddlStatement1799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lockDatabase_in_ddlStatement1807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unlockDatabase_in_ddlStatement1815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createRoleStatement_in_ddlStatement1823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropRoleStatement_in_ddlStatement1831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grantPrivileges_in_ddlStatement1845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_revokePrivileges_in_ddlStatement1859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showGrants_in_ddlStatement1867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showRoleGrants_in_ddlStatement1875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showRolePrincipals_in_ddlStatement1883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showRoles_in_ddlStatement1891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grantRole_in_ddlStatement1899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_revokeRole_in_ddlStatement1907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_setRole_in_ddlStatement1915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showCurrentRole_in_ddlStatement1923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IF_in_ifExists1950 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_EXISTS_in_ifExists1952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RESTRICT_in_restrictOrCascade1989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CASCADE_in_restrictOrCascade2007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IF_in_ifNotExists2044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_KW_NOT_in_ifNotExists2046 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_EXISTS_in_ifNotExists2048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_storedAsDirs2085 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_KW_AS_in_storedAsDirs2087 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_KW_DIRECTORIES_in_storedAsDirs2089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_OR_in_orReplace2126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_KW_REPLACE_in_orReplace2128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IGNORE_in_ignoreProtection2169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_KW_PROTECTION_in_ignoreProtection2171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createDatabaseStatement2216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_DATABASE_in_createDatabaseStatement2219 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFFL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_SCHEMA_in_createDatabaseStatement2221 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFFL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_ifNotExists_in_createDatabaseStatement2232 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_createDatabaseStatement2245 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_databaseComment_in_createDatabaseStatement2255 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_dbLocation_in_createDatabaseStatement2266 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_KW_WITH_in_createDatabaseStatement2278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_KW_DBPROPERTIES_in_createDatabaseStatement2280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_dbProperties_in_createDatabaseStatement2284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCATION_in_dbLocation2345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_dbLocation2349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_dbProperties2391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_dbPropertiesList_in_dbProperties2393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_dbProperties2395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyValueProperty_in_dbPropertiesList2436 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_COMMA_in_dbPropertiesList2439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_keyValueProperty_in_dbPropertiesList2441 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_KW_USE_in_switchDatabaseStatement2480 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_switchDatabaseStatement2482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropDatabaseStatement2521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_DATABASE_in_dropDatabaseStatement2524 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFFL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_SCHEMA_in_dropDatabaseStatement2526 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFFL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_ifExists_in_dropDatabaseStatement2529 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_dropDatabaseStatement2532 = new BitSet(new long[]{0x0001000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_restrictOrCascade_in_dropDatabaseStatement2534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COMMENT_in_databaseComment2580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_databaseComment2584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createTableStatement2624 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x8800000000000000L});
    public static final BitSet FOLLOW_KW_TEMPORARY_in_createTableStatement2629 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_EXTERNAL_in_createTableStatement2636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_createTableStatement2640 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFFL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_ifNotExists_in_createTableStatement2642 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableName_in_createTableStatement2647 = new BitSet(new long[]{0x0840001000000002L,0x0000000000000000L,0x0000000042000000L,0x4082000400000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_KW_LIKE_in_createTableStatement2660 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableName_in_createTableStatement2664 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000040000000L,0x4080000400000000L});
    public static final BitSet FOLLOW_tableRowFormat_in_createTableStatement2675 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000040000000L,0x4080000000000000L});
    public static final BitSet FOLLOW_tableFileFormat_in_createTableStatement2687 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000040000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_tableLocation_in_createTableStatement2699 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createTableStatement2711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createTableStatement2724 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_columnNameTypeList_in_createTableStatement2726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createTableStatement2728 = new BitSet(new long[]{0x0840001000000002L,0x0000000000000000L,0x0000000040000000L,0x4082000400000002L});
    public static final BitSet FOLLOW_tableComment_in_createTableStatement2741 = new BitSet(new long[]{0x0040001000000002L,0x0000000000000000L,0x0000000040000000L,0x4082000400000002L});
    public static final BitSet FOLLOW_tablePartition_in_createTableStatement2753 = new BitSet(new long[]{0x0040001000000002L,0x0000000000000000L,0x0000000040000000L,0x4082000400000000L});
    public static final BitSet FOLLOW_tableBuckets_in_createTableStatement2765 = new BitSet(new long[]{0x0000001000000002L,0x0000000000000000L,0x0000000040000000L,0x4082000400000000L});
    public static final BitSet FOLLOW_tableSkewed_in_createTableStatement2777 = new BitSet(new long[]{0x0000001000000002L,0x0000000000000000L,0x0000000040000000L,0x4080000400000000L});
    public static final BitSet FOLLOW_tableRowFormat_in_createTableStatement2789 = new BitSet(new long[]{0x0000001000000002L,0x0000000000000000L,0x0000000040000000L,0x4080000000000000L});
    public static final BitSet FOLLOW_tableFileFormat_in_createTableStatement2801 = new BitSet(new long[]{0x0000001000000002L,0x0000000000000000L,0x0000000040000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_tableLocation_in_createTableStatement2813 = new BitSet(new long[]{0x0000001000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createTableStatement2825 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_KW_AS_in_createTableStatement2838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000008000080000L,0x0000000800000000L});
    public static final BitSet FOLLOW_selectStatementWithCTE_in_createTableStatement2840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TRUNCATE_in_truncateTableStatement3047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_truncateTableStatement3049 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tablePartitionPrefix_in_truncateTableStatement3051 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_KW_COLUMNS_in_truncateTableStatement3054 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LPAREN_in_truncateTableStatement3056 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_columnNameList_in_truncateTableStatement3058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_truncateTableStatement3060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createIndexStatement3095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_KW_INDEX_in_createIndexStatement3097 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_createIndexStatement3101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_KW_ON_in_createIndexStatement3109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_createIndexStatement3111 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableName_in_createIndexStatement3115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LPAREN_in_createIndexStatement3117 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_columnNameList_in_createIndexStatement3121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createIndexStatement3123 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_KW_AS_in_createIndexStatement3131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_createIndexStatement3135 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000000L,0x0000000040000011L,0x4080000400000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_autoRebuild_in_createIndexStatement3143 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000000L,0x0000000040000011L,0x4080000400000000L});
    public static final BitSet FOLLOW_indexPropertiesPrefixed_in_createIndexStatement3152 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000000L,0x0000000040000010L,0x4080000400000000L});
    public static final BitSet FOLLOW_indexTblName_in_createIndexStatement3161 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000000L,0x0000000040000000L,0x4080000400000000L});
    public static final BitSet FOLLOW_tableRowFormat_in_createIndexStatement3170 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000000L,0x0000000040000000L,0x4080000000000000L});
    public static final BitSet FOLLOW_tableFileFormat_in_createIndexStatement3179 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000000L,0x0000000040000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_tableLocation_in_createIndexStatement3188 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createIndexStatement3197 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_indexComment_in_createIndexStatement3206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COMMENT_in_indexComment3363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_indexComment3367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_WITH_in_autoRebuild3408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_DEFERRED_in_autoRebuild3410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_REBUILD_in_autoRebuild3412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IN_in_indexTblName3448 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_indexTblName3450 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableName_in_indexTblName3454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IDXPROPERTIES_in_indexPropertiesPrefixed3501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_indexProperties_in_indexPropertiesPrefixed3504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_indexProperties3537 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_indexPropertiesList_in_indexProperties3539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_indexProperties3541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyValueProperty_in_indexPropertiesList3582 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_COMMA_in_indexPropertiesList3585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_keyValueProperty_in_indexPropertiesList3587 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_KW_DROP_in_dropIndexStatement3625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_KW_INDEX_in_dropIndexStatement3627 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFFL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_ifExists_in_dropIndexStatement3629 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_dropIndexStatement3634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_KW_ON_in_dropIndexStatement3636 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableName_in_dropIndexStatement3640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropTableStatement3685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_dropTableStatement3687 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFFL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_ifExists_in_dropTableStatement3689 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableName_in_dropTableStatement3692 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_KW_PURGE_in_dropTableStatement3694 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L});
    public static final BitSet FOLLOW_replicationClause_in_dropTableStatement3697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALTER_in_alterStatement3746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_alterStatement3748 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableName_in_alterStatement3750 = new BitSet(new long[]{0x9048000408000000L,0x0000001244000000L,0x0000800000008000L,0x0002100001400001L,0x0000000000140820L});
    public static final BitSet FOLLOW_alterTableStatementSuffix_in_alterStatement3752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALTER_in_alterStatement3770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_KW_VIEW_in_alterStatement3772 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableName_in_alterStatement3774 = new BitSet(new long[]{0x0000001008000000L,0x0000000040000000L,0x0000001000000000L,0x0000108000480000L,0x0000000800040000L});
    public static final BitSet FOLLOW_KW_AS_in_alterStatement3776 = new BitSet(new long[]{0x0000000008000000L,0x0000000040000000L,0x0000001000000000L,0x0000108000480000L,0x0000000800040000L});
    public static final BitSet FOLLOW_alterViewStatementSuffix_in_alterStatement3779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALTER_in_alterStatement3797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_KW_INDEX_in_alterStatement3799 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_alterIndexStatementSuffix_in_alterStatement3801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALTER_in_alterStatement3813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_DATABASE_in_alterStatement3816 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_SCHEMA_in_alterStatement3818 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_alterDatabaseStatementSuffix_in_alterStatement3821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixRename_in_alterTableStatementSuffix3859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixDropPartitions_in_alterTableStatementSuffix3868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixAddPartitions_in_alterTableStatementSuffix3877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixTouch_in_alterTableStatementSuffix3886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixArchive_in_alterTableStatementSuffix3894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixUnArchive_in_alterTableStatementSuffix3902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixProperties_in_alterTableStatementSuffix3910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixSkewedby_in_alterTableStatementSuffix3918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixExchangePartition_in_alterTableStatementSuffix3926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementPartitionKeyType_in_alterTableStatementSuffix3934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_partitionSpec_in_alterTableStatementSuffix3942 = new BitSet(new long[]{0x9048000008000000L,0x0000000204000000L,0x0000800000008000L,0x0000100001400000L,0x0000000000100000L});
    public static final BitSet FOLLOW_alterTblPartitionStatementSuffix_in_alterTableStatementSuffix3945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixFileFormat_in_alterTblPartitionStatementSuffix3977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixLocation_in_alterTblPartitionStatementSuffix3983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixProtectMode_in_alterTblPartitionStatementSuffix3989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixMergeFiles_in_alterTblPartitionStatementSuffix3995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixSerdeProperties_in_alterTblPartitionStatementSuffix4001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixRenamePart_in_alterTblPartitionStatementSuffix4007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixBucketNum_in_alterTblPartitionStatementSuffix4013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterTblPartitionStatementSuffixSkewedLocation_in_alterTblPartitionStatementSuffix4019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixClusterbySortby_in_alterTblPartitionStatementSuffix4025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixCompact_in_alterTblPartitionStatementSuffix4031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixUpdateStatsCol_in_alterTblPartitionStatementSuffix4037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixRenameCol_in_alterTblPartitionStatementSuffix4043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixAddCol_in_alterTblPartitionStatementSuffix4049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_PARTITION_in_alterStatementPartitionKeyType4071 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_KW_COLUMN_in_alterStatementPartitionKeyType4073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LPAREN_in_alterStatementPartitionKeyType4075 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_columnNameType_in_alterStatementPartitionKeyType4077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_alterStatementPartitionKeyType4079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterViewSuffixProperties_in_alterViewStatementSuffix4112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixRename_in_alterViewStatementSuffix4120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixAddPartitions_in_alterViewStatementSuffix4129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixDropPartitions_in_alterViewStatementSuffix4138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectStatementWithCTE_in_alterViewStatementSuffix4147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_alterIndexStatementSuffix4176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_KW_ON_in_alterIndexStatementSuffix4178 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableName_in_alterIndexStatementSuffix4180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000010001L});
    public static final BitSet FOLLOW_partitionSpec_in_alterIndexStatementSuffix4182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000010000L});
    public static final BitSet FOLLOW_KW_REBUILD_in_alterIndexStatementSuffix4197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterIndexStatementSuffix4230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_KW_IDXPROPERTIES_in_alterIndexStatementSuffix4232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_indexProperties_in_alterIndexStatementSuffix4240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterDatabaseSuffixProperties_in_alterDatabaseStatementSuffix4291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterDatabaseSuffixSetOwner_in_alterDatabaseStatementSuffix4299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_alterDatabaseSuffixProperties4328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_KW_SET_in_alterDatabaseSuffixProperties4330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_KW_DBPROPERTIES_in_alterDatabaseSuffixProperties4332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_dbProperties_in_alterDatabaseSuffixProperties4334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_alterDatabaseSuffixSetOwner4378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_KW_SET_in_alterDatabaseSuffixSetOwner4380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_OWNER_in_alterDatabaseSuffixSetOwner4382 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_principalName_in_alterDatabaseSuffixSetOwner4384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RENAME_in_alterStatementSuffixRename4427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_TO_in_alterStatementSuffixRename4429 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableName_in_alterStatementSuffixRename4431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ADD_in_alterStatementSuffixAddCol4498 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_KW_REPLACE_in_alterStatementSuffixAddCol4504 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_KW_COLUMNS_in_alterStatementSuffixAddCol4507 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LPAREN_in_alterStatementSuffixAddCol4509 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_columnNameTypeList_in_alterStatementSuffixAddCol4511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_alterStatementSuffixAddCol4513 = new BitSet(new long[]{0x0001000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_restrictOrCascade_in_alterStatementSuffixAddCol4515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CHANGE_in_alterStatementSuffixRenameCol4591 = new BitSet(new long[]{0xFFE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_COLUMN_in_alterStatementSuffixRenameCol4593 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_alterStatementSuffixRenameCol4598 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_alterStatementSuffixRenameCol4602 = new BitSet(new long[]{0x00100E0800000000L,0x0002000020013000L,0x0000001000001000L,0x0604000000000000L,0x000000002000800CL});
    public static final BitSet FOLLOW_colType_in_alterStatementSuffixRenameCol4604 = new BitSet(new long[]{0x0801000020000002L,0x0001000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_KW_COMMENT_in_alterStatementSuffixRenameCol4607 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixRenameCol4611 = new BitSet(new long[]{0x0001000020000002L,0x0001000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_alterStatementChangeColPosition_in_alterStatementSuffixRenameCol4615 = new BitSet(new long[]{0x0001000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_restrictOrCascade_in_alterStatementSuffixRenameCol4618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UPDATE_in_alterStatementSuffixUpdateStatsCol4673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_STATISTICS_in_alterStatementSuffixUpdateStatsCol4675 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_KW_FOR_in_alterStatementSuffixUpdateStatsCol4677 = new BitSet(new long[]{0xFFE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_COLUMN_in_alterStatementSuffixUpdateStatsCol4679 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_alterStatementSuffixUpdateStatsCol4684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixUpdateStatsCol4686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixUpdateStatsCol4688 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_KW_COMMENT_in_alterStatementSuffixUpdateStatsCol4691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixUpdateStatsCol4695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FIRST_in_alterStatementChangeColPosition4734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_AFTER_in_alterStatementChangeColPosition4736 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_alterStatementChangeColPosition4740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ADD_in_alterStatementSuffixAddPartitions4793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_ifNotExists_in_alterStatementSuffixAddPartitions4795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_alterStatementSuffixAddPartitionsElement_in_alterStatementSuffixAddPartitions4798 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitionsElement4861 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitionsElement4863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TOUCH_in_alterStatementSuffixTouch4891 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixTouch4894 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_KW_ARCHIVE_in_alterStatementSuffixArchive4938 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixArchive4941 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_KW_UNARCHIVE_in_alterStatementSuffixUnArchive4985 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixUnArchive4988 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_KW_LOCATION_in_partitionLocation5038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_partitionLocation5042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_alterStatementSuffixDropPartitions5079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_ifExists_in_alterStatementSuffixDropPartitions5081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions5084 = new BitSet(new long[]{0x0000000000000402L,0x0008000000000000L,0x0000000000000004L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_alterStatementSuffixDropPartitions5087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions5089 = new BitSet(new long[]{0x0000000000000402L,0x0008000000000000L,0x0000000000000004L,0x0000000000000800L});
    public static final BitSet FOLLOW_ignoreProtection_in_alterStatementSuffixDropPartitions5093 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_KW_PURGE_in_alterStatementSuffixDropPartitions5096 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L});
    public static final BitSet FOLLOW_replicationClause_in_alterStatementSuffixDropPartitions5099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixProperties5187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties5189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixProperties5191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNSET_in_alterStatementSuffixProperties5211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties5213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_ifExists_in_alterStatementSuffixProperties5215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixProperties5218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterViewSuffixProperties5260 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties5262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_tableProperties_in_alterViewSuffixProperties5264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNSET_in_alterViewSuffixProperties5284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties5286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_ifExists_in_alterViewSuffixProperties5288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_tableProperties_in_alterViewSuffixProperties5291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties5333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_KW_SERDE_in_alterStatementSuffixSerdeProperties5335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixSerdeProperties5339 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_KW_WITH_in_alterStatementSuffixSerdeProperties5342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties5344 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties5346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties5372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties5374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties5376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableName_in_tablePartitionPrefix5413 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_partitionSpec_in_tablePartitionPrefix5415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixFileFormat5450 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_KW_FILEFORMAT_in_alterStatementSuffixFileFormat5452 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_fileFormat_in_alterStatementSuffixFileFormat5454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby5485 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_KW_CLUSTERED_in_alterStatementSuffixClusterbySortby5487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby5501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_KW_SORTED_in_alterStatementSuffixClusterbySortby5503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableBuckets_in_alterStatementSuffixClusterbySortby5517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterTblPartitionStatementSuffixSkewedLocation5548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_SKEWED_in_alterTblPartitionStatementSuffixSkewedLocation5550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_KW_LOCATION_in_alterTblPartitionStatementSuffixSkewedLocation5552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_skewedLocations_in_alterTblPartitionStatementSuffixSkewedLocation5554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_skewedLocations5595 = new BitSet(new long[]{0x0000000000042080L,0x00000800000010C0L,0x0000000000004000L,0x0000000000000000L,0x0B00410000000204L});
    public static final BitSet FOLLOW_skewedLocationsList_in_skewedLocations5597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_skewedLocations5599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skewedLocationMap_in_skewedLocationsList5640 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_COMMA_in_skewedLocationsList5643 = new BitSet(new long[]{0x0000000000042080L,0x00000800000010C0L,0x0000000000004000L,0x0000000000000000L,0x0B00410000000204L});
    public static final BitSet FOLLOW_skewedLocationMap_in_skewedLocationsList5645 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_skewedValueLocationElement_in_skewedLocationMap5691 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_EQUAL_in_skewedLocationMap5693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_skewedLocationMap5697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixLocation5734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_KW_LOCATION_in_alterStatementSuffixLocation5736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixLocation5740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableSkewed_in_alterStatementSuffixSkewedby5773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby5788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_SKEWED_in_alterStatementSuffixSkewedby5790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby5803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_storedAsDirs_in_alterStatementSuffixSkewedby5805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_EXCHANGE_in_alterStatementSuffixExchangePartition5836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixExchangePartition5838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_KW_WITH_in_alterStatementSuffixExchangePartition5840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_alterStatementSuffixExchangePartition5842 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableName_in_alterStatementSuffixExchangePartition5846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterProtectMode_in_alterStatementSuffixProtectMode5888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RENAME_in_alterStatementSuffixRenamePart5927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_TO_in_alterStatementSuffixRenamePart5929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixRenamePart5931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UPDATE_in_alterStatementSuffixStatsPart5969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_STATISTICS_in_alterStatementSuffixStatsPart5971 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_KW_FOR_in_alterStatementSuffixStatsPart5973 = new BitSet(new long[]{0xFFE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_COLUMN_in_alterStatementSuffixStatsPart5975 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_alterStatementSuffixStatsPart5980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixStatsPart5982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixStatsPart5984 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_KW_COMMENT_in_alterStatementSuffixStatsPart5987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixStatsPart5991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CONCATENATE_in_alterStatementSuffixMergeFiles6038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ENABLE_in_alterProtectMode6075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0009000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_alterProtectModeMode_in_alterProtectMode6077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DISABLE_in_alterProtectMode6094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0009000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_alterProtectModeMode_in_alterProtectMode6096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_OFFLINE_in_alterProtectModeMode6132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NO_DROP_in_alterProtectModeMode6147 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_KW_CASCADE_in_alterProtectModeMode6149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_READONLY_in_alterProtectModeMode6167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INTO_in_alterStatementSuffixBucketNum6201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_Number_in_alterStatementSuffixBucketNum6205 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_KW_BUCKETS_in_alterStatementSuffixBucketNum6207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COMPACT_in_alterStatementSuffixCompact6247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixCompact6251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INPUTFORMAT_in_fileFormat6292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_fileFormat6296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_OUTPUTFORMAT_in_fileFormat6298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_fileFormat6302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_KW_SERDE_in_fileFormat6304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_fileFormat6308 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_KW_INPUTDRIVER_in_fileFormat6311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_fileFormat6315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_KW_OUTPUTDRIVER_in_fileFormat6317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_fileFormat6321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_fileFormat6362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_tabTypeExpr6397 = new BitSet(new long[]{0xFDE9FFFDFC020002L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_DOT_in_tabTypeExpr6400 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_ELEM_TYPE_in_tabTypeExpr6417 = new BitSet(new long[]{0xFDE9FFFDFC020002L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_KEY_TYPE_in_tabTypeExpr6433 = new BitSet(new long[]{0xFDE9FFFDFC020002L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_VALUE_TYPE_in_tabTypeExpr6449 = new BitSet(new long[]{0xFDE9FFFDFC020002L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_tabTypeExpr6456 = new BitSet(new long[]{0xFDE9FFFDFC020002L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_tabTypeExpr6465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tabTypeExpr_in_partTypeExpr6493 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_partitionSpec_in_partTypeExpr6495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DESCRIBE_in_descStatement6539 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDFBBFFEAF7FFFFD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_DESC_in_descStatement6541 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDFBBFFEAF7FFFFD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_DATABASE_in_descStatement6563 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFFEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_SCHEMA_in_descStatement6565 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFFEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement6568 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_descStatement6574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FUNCTION_in_descStatement6605 = new BitSet(new long[]{0xFDEBFFFFFDB0C070L,0xDEBBFFEAF7FFFBD6L,0x6FEFF7F7FEF7BFFFL,0xDFFFFF7FFFF7FF9FL,0x0680B8DADFFEEF7DL});
    public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement6607 = new BitSet(new long[]{0xFDEBFFFFFDB0C070L,0xDEBBFDEAF7FFFBD6L,0x6FEFF7F7FEF7BFFFL,0xDFFFFF7FFFF7FF9FL,0x0680B8DADFFEEF7DL});
    public static final BitSet FOLLOW_descFuncNames_in_descStatement6613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FORMATTED_in_descStatement6652 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement6656 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_PRETTY_in_descStatement6660 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_partTypeExpr_in_descStatement6665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_partTypeExpr_in_descStatement6692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ANALYZE_in_analyzeStatement6734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_analyzeStatement6736 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableOrPartition_in_analyzeStatement6741 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_KW_COMPUTE_in_analyzeStatement6744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_STATISTICS_in_analyzeStatement6746 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L,0x8000400000000000L});
    public static final BitSet FOLLOW_KW_NOSCAN_in_analyzeStatement6752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_PARTIALSCAN_in_analyzeStatement6760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FOR_in_analyzeStatement6820 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_KW_COLUMNS_in_analyzeStatement6822 = new BitSet(new long[]{0xFDE9FFFDFC000002L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_columnNameList_in_analyzeStatement6827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement6889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_KW_DATABASES_in_showStatement6892 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_SCHEMAS_in_showStatement6894 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_LIKE_in_showStatement6898 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0200001A5FFEEF7DL});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement6900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement6919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_KW_TABLES_in_showStatement6921 = new BitSet(new long[]{0xFDE9FFFDFC000002L,0xDEFBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0200001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_FROM_in_showStatement6925 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_IN_in_showStatement6927 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_showStatement6932 = new BitSet(new long[]{0xFDE9FFFDFC000002L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0200001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_LIKE_in_showStatement6937 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0200001A5FFEEF7DL});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement6939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement6941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement6969 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_KW_COLUMNS_in_showStatement6971 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_FROM_in_showStatement6974 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_IN_in_showStatement6976 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableName_in_showStatement6979 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_FROM_in_showStatement6983 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_IN_in_showStatement6985 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_showStatement6990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement7016 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_KW_FUNCTIONS_in_showStatement7018 = new BitSet(new long[]{0xFDE9FFFDFC000002L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0200001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_LIKE_in_showStatement7021 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0200001A5FFEEF7DL});
    public static final BitSet FOLLOW_showFunctionIdentifier_in_showStatement7023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showFunctionIdentifier_in_showStatement7025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement7048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_KW_PARTITIONS_in_showStatement7050 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableName_in_showStatement7054 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_partitionSpec_in_showStatement7056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement7077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_KW_CREATE_in_showStatement7079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_showStatement7081 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableName_in_showStatement7085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement7102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_showStatement7104 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement7106 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000002000010L});
    public static final BitSet FOLLOW_KW_FROM_in_showStatement7110 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_IN_in_showStatement7112 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_showStatement7117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_LIKE_in_showStatement7121 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0200001A5FFEEF7DL});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement7123 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_partitionSpec_in_showStatement7125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement7153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_showStatement7155 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableName_in_showStatement7157 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LPAREN_in_showStatement7160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_showStatement7164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_showStatement7166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement7188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_KW_LOCKS_in_showStatement7190 = new BitSet(new long[]{0xFDE9FFFDFC000002L,0xDEBBFFEAF7FFFFD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_DATABASE_in_showStatement7215 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_KW_SCHEMA_in_showStatement7217 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_Identifier_in_showStatement7223 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement7229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_partTypeExpr_in_showStatement7263 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement7270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement7302 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_KW_FORMATTED_in_showStatement7307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_KW_INDEX_in_showStatement7312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_KW_INDEXES_in_showStatement7314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_KW_ON_in_showStatement7317 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0200001A5FFEEF7DL});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement7319 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_FROM_in_showStatement7323 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_IN_in_showStatement7325 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_showStatement7330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement7360 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_KW_COMPACTIONS_in_showStatement7362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement7376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_KW_TRANSACTIONS_in_showStatement7378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement7392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_KW_CONF_in_showStatement7394 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_showStatement7396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCK_in_lockStatement7431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_lockStatement7433 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableName_in_lockStatement7435 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000400000000001L});
    public static final BitSet FOLLOW_partitionSpec_in_lockStatement7437 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_lockMode_in_lockStatement7440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCK_in_lockDatabase7480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_DATABASE_in_lockDatabase7483 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_KW_SCHEMA_in_lockDatabase7485 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_Identifier_in_lockDatabase7491 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_lockMode_in_lockDatabase7494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNLOCK_in_unlockStatement7563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_unlockStatement7565 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableName_in_unlockStatement7567 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_partitionSpec_in_unlockStatement7569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNLOCK_in_unlockDatabase7609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_DATABASE_in_unlockDatabase7612 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_KW_SCHEMA_in_unlockDatabase7614 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_Identifier_in_unlockDatabase7620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createRoleStatement7657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_KW_ROLE_in_createRoleStatement7659 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_createRoleStatement7663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropRoleStatement7703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_KW_ROLE_in_dropRoleStatement7705 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_dropRoleStatement7709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GRANT_in_grantPrivileges7749 = new BitSet(new long[]{0x00000000C0000000L,0x0000000040080004L,0x0000000080000820L,0x0001008000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_privilegeList_in_grantPrivileges7753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_privilegeObject_in_grantPrivileges7761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_TO_in_grantPrivileges7770 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_principalSpecification_in_grantPrivileges7772 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_withGrantOption_in_grantPrivileges7780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_REVOKE_in_revokePrivileges7829 = new BitSet(new long[]{0x00000000C0000000L,0x0400000040080004L,0x0000000080000820L,0x0001008000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_grantOptionFor_in_revokePrivileges7831 = new BitSet(new long[]{0x00000000C0000000L,0x0000000040080004L,0x0000000080000820L,0x0001008000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_privilegeList_in_revokePrivileges7834 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_privilegeObject_in_revokePrivileges7836 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_FROM_in_revokePrivileges7839 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_principalSpecification_in_revokePrivileges7841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GRANT_in_grantRole7888 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_ROLE_in_grantRole7890 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_grantRole7893 = new BitSet(new long[]{0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_COMMA_in_grantRole7896 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_grantRole7898 = new BitSet(new long[]{0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_TO_in_grantRole7902 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_principalSpecification_in_grantRole7904 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_withAdminOption_in_grantRole7906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_REVOKE_in_revokeRole7952 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_adminOptionFor_in_revokeRole7954 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_ROLE_in_revokeRole7957 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_revokeRole7960 = new BitSet(new long[]{0x0000000000000400L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_revokeRole7963 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_revokeRole7965 = new BitSet(new long[]{0x0000000000000400L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_FROM_in_revokeRole7969 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_principalSpecification_in_revokeRole7971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showRoleGrants8016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_KW_ROLE_in_showRoleGrants8018 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_KW_GRANT_in_showRoleGrants8020 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_principalName_in_showRoleGrants8022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showRoles8062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_KW_ROLES_in_showRoles8064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showCurrentRole8101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_KW_CURRENT_in_showCurrentRole8103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_KW_ROLES_in_showCurrentRole8105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_setRole8142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_KW_ROLE_in_setRole8144 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_ALL_in_setRole8165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_setRole8187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showGrants8228 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_KW_GRANT_in_showGrants8230 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L,0x0010000000000000L,0x0000000080000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_principalName_in_showGrants8232 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_KW_ON_in_showGrants8236 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFFD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_privilegeIncludeColObject_in_showGrants8238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showRolePrincipals8283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_KW_PRINCIPALS_in_showRolePrincipals8285 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_showRolePrincipals8289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALL_in_privilegeIncludeColObject8336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_privObjectCols_in_privilegeIncludeColObject8350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ON_in_privilegeObject8385 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFFD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_privObject_in_privilegeObject8387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DATABASE_in_privObject8414 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_SCHEMA_in_privObject8416 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_privObject8419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TABLE_in_privObject8435 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableName_in_privObject8438 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_partitionSpec_in_privObject8440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_URI_in_privObject8460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_privObject8465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SERVER_in_privObject8484 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_privObject8486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DATABASE_in_privObjectCols8512 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_SCHEMA_in_privObjectCols8514 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_privObjectCols8517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TABLE_in_privObjectCols8533 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableName_in_privObjectCols8536 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000010000000000L});
    public static final BitSet FOLLOW_LPAREN_in_privObjectCols8539 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_columnNameList_in_privObjectCols8543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_privObjectCols8545 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_partitionSpec_in_privObjectCols8549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_URI_in_privObjectCols8573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_privObjectCols8578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SERVER_in_privObjectCols8597 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_privObjectCols8599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_privlegeDef_in_privilegeList8634 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_COMMA_in_privilegeList8637 = new BitSet(new long[]{0x00000000C0000000L,0x0000000040080004L,0x0000000080000820L,0x0001008000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_privlegeDef_in_privilegeList8639 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_privilegeType_in_privlegeDef8681 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LPAREN_in_privlegeDef8684 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_columnNameList_in_privlegeDef8688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_privlegeDef8690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALL_in_privilegeType8735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALTER_in_privilegeType8749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UPDATE_in_privilegeType8763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_privilegeType8777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_privilegeType8791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INDEX_in_privilegeType8805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCK_in_privilegeType8819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SELECT_in_privilegeType8833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_DATABASE_in_privilegeType8847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INSERT_in_privilegeType8861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DELETE_in_privilegeType8875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_principalName_in_principalSpecification8908 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_COMMA_in_principalSpecification8911 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_principalName_in_principalSpecification8913 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_KW_USER_in_principalName8951 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0002001A5FFEEF7DL});
    public static final BitSet FOLLOW_principalIdentifier_in_principalName8953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GROUP_in_principalName8969 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0002001A5FFEEF7DL});
    public static final BitSet FOLLOW_principalIdentifier_in_principalName8971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ROLE_in_principalName8987 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_principalName8989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_WITH_in_withGrantOption9024 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_KW_GRANT_in_withGrantOption9026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_KW_OPTION_in_withGrantOption9028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GRANT_in_grantOptionFor9065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_KW_OPTION_in_grantOptionFor9067 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_KW_FOR_in_grantOptionFor9069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ADMIN_in_adminOptionFor9102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_KW_OPTION_in_adminOptionFor9104 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_KW_FOR_in_adminOptionFor9106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_WITH_in_withAdminOption9139 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_KW_ADMIN_in_withAdminOption9141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_KW_OPTION_in_withAdminOption9143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MSCK_in_metastoreCheck9180 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000800000L});
    public static final BitSet FOLLOW_KW_REPAIR_in_metastoreCheck9185 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_metastoreCheck9190 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableName_in_metastoreCheck9192 = new BitSet(new long[]{0x0000000000000402L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_partitionSpec_in_metastoreCheck9194 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_COMMA_in_metastoreCheck9198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_partitionSpec_in_metastoreCheck9200 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_resource_in_resourceList9253 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_COMMA_in_resourceList9256 = new BitSet(new long[]{0x0000000400000000L,0x0000400000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_resource_in_resourceList9258 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_resourceType_in_resource9296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_resource9300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_JAR_in_resourceType9337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FILE_in_resourceType9351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ARCHIVE_in_resourceType9365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createFunctionStatement9396 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_KW_TEMPORARY_in_createFunctionStatement9401 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_KW_FUNCTION_in_createFunctionStatement9405 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_functionIdentifier_in_createFunctionStatement9407 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_KW_AS_in_createFunctionStatement9409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_createFunctionStatement9411 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_KW_USING_in_createFunctionStatement9420 = new BitSet(new long[]{0x0000000400000000L,0x0000400000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_resourceList_in_createFunctionStatement9424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropFunctionStatement9510 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_KW_TEMPORARY_in_dropFunctionStatement9515 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_KW_FUNCTION_in_dropFunctionStatement9519 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFFL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_ifExists_in_dropFunctionStatement9521 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_functionIdentifier_in_dropFunctionStatement9524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RELOAD_in_reloadFunctionStatement9602 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_KW_FUNCTION_in_reloadFunctionStatement9604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createMacroStatement9632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_KW_TEMPORARY_in_createMacroStatement9634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_KW_MACRO_in_createMacroStatement9636 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_Identifier_in_createMacroStatement9638 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LPAREN_in_createMacroStatement9646 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0008001A5FFEEF7DL});
    public static final BitSet FOLLOW_columnNameTypeList_in_createMacroStatement9648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createMacroStatement9651 = new BitSet(new long[]{0xFDEFFFFDFC042080L,0xDEBBFDEAF7FFFBD6L,0x6FAFF7F7FEF7FFFFL,0xDFFFFF7FFFF7FF9FL,0x0F00C91A5FFEEF7DL});
    public static final BitSet FOLLOW_expression_in_createMacroStatement9653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropMacroStatement9697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_KW_TEMPORARY_in_dropMacroStatement9699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_KW_MACRO_in_dropMacroStatement9701 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_ifExists_in_dropMacroStatement9703 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_Identifier_in_dropMacroStatement9706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createViewStatement9748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_orReplace_in_createViewStatement9751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_KW_VIEW_in_createViewStatement9755 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFFL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_ifNotExists_in_createViewStatement9758 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableName_in_createViewStatement9764 = new BitSet(new long[]{0x0800001000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_LPAREN_in_createViewStatement9775 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_columnNameCommentList_in_createViewStatement9777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createViewStatement9779 = new BitSet(new long[]{0x0800001000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000002L});
    public static final BitSet FOLLOW_tableComment_in_createViewStatement9783 = new BitSet(new long[]{0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000002L});
    public static final BitSet FOLLOW_viewPartition_in_createViewStatement9786 = new BitSet(new long[]{0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createViewStatement9797 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_KW_AS_in_createViewStatement9808 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000008000080000L,0x0000000800000000L});
    public static final BitSet FOLLOW_selectStatementWithCTE_in_createViewStatement9818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_PARTITIONED_in_viewPartition9941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_KW_ON_in_viewPartition9943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewPartition9945 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_columnNameList_in_viewPartition9947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewPartition9949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropViewStatement9988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_KW_VIEW_in_dropViewStatement9990 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFFL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_ifExists_in_dropViewStatement9992 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_viewName_in_dropViewStatement9995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionIdentifier_in_showFunctionIdentifier10033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_showFunctionIdentifier10041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_showStmtIdentifier10068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_showStmtIdentifier10076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COMMENT_in_tableComment10109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableComment10113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_PARTITIONED_in_tablePartition10150 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tablePartition10152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LPAREN_in_tablePartition10154 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_columnNameTypeList_in_tablePartition10156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tablePartition10158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CLUSTERED_in_tableBuckets10203 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableBuckets10205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LPAREN_in_tableBuckets10207 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_columnNameList_in_tableBuckets10211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tableBuckets10213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0010000000000000L});
    public static final BitSet FOLLOW_KW_SORTED_in_tableBuckets10216 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableBuckets10218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LPAREN_in_tableBuckets10220 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_columnNameOrderList_in_tableBuckets10224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tableBuckets10226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_KW_INTO_in_tableBuckets10230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_Number_in_tableBuckets10234 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_KW_BUCKETS_in_tableBuckets10236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SKEWED_in_tableSkewed10288 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableSkewed10290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LPAREN_in_tableSkewed10292 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_columnNameList_in_tableSkewed10296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tableSkewed10298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_KW_ON_in_tableSkewed10300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LPAREN_in_tableSkewed10302 = new BitSet(new long[]{0x0000000000042080L,0x00000800000010C0L,0x0000000000004000L,0x0000000000000000L,0x0B00410000000204L});
    public static final BitSet FOLLOW_skewedValueElement_in_tableSkewed10307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tableSkewed10310 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_storedAsDirs_in_tableSkewed10319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rowFormatSerde_in_rowFormat10367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rowFormatDelimited_in_rowFormat10383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RECORDREADER_in_recordReader10432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_recordReader10434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RECORDWRITER_in_recordWriter10483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_recordWriter10485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ROW_in_rowFormatSerde10534 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_KW_FORMAT_in_rowFormatSerde10536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_KW_SERDE_in_rowFormatSerde10538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_rowFormatSerde10542 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_KW_WITH_in_rowFormatSerde10545 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_rowFormatSerde10547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_tableProperties_in_rowFormatSerde10551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ROW_in_rowFormatDelimited10603 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_KW_FORMAT_in_rowFormatDelimited10605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_KW_DELIMITED_in_rowFormatDelimited10607 = new BitSet(new long[]{0x0100000000000002L,0x0000200000000000L,0x0002001008000000L});
    public static final BitSet FOLLOW_tableRowFormatFieldIdentifier_in_rowFormatDelimited10609 = new BitSet(new long[]{0x0100000000000002L,0x0000000000000000L,0x0002001008000000L});
    public static final BitSet FOLLOW_tableRowFormatCollItemsIdentifier_in_rowFormatDelimited10612 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002001008000000L});
    public static final BitSet FOLLOW_tableRowFormatMapKeysIdentifier_in_rowFormatDelimited10615 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000008000000L});
    public static final BitSet FOLLOW_tableRowFormatLinesIdentifier_in_rowFormatDelimited10618 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableRowNullFormat_in_rowFormatDelimited10621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rowFormatDelimited_in_tableRowFormat10680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rowFormatSerde_in_tableRowFormat10700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_tablePropertiesPrefixed10747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_tableProperties_in_tablePropertiesPrefixed10750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_tableProperties10783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_tablePropertiesList_in_tableProperties10785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tableProperties10787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyValueProperty_in_tablePropertiesList10828 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_COMMA_in_tablePropertiesList10831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_keyValueProperty_in_tablePropertiesList10833 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_keyProperty_in_tablePropertiesList10858 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_COMMA_in_tablePropertiesList10861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_keyProperty_in_tablePropertiesList10863 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_StringLiteral_in_keyValueProperty10909 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_EQUAL_in_keyValueProperty10911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_keyValueProperty10915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_keyProperty10962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FIELDS_in_tableRowFormatFieldIdentifier11006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatFieldIdentifier11008 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier11010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier11014 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_KW_ESCAPED_in_tableRowFormatFieldIdentifier11017 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier11019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier11023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COLLECTION_in_tableRowFormatCollItemsIdentifier11075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_ITEMS_in_tableRowFormatCollItemsIdentifier11077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatCollItemsIdentifier11079 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatCollItemsIdentifier11081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatCollItemsIdentifier11085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MAP_in_tableRowFormatMapKeysIdentifier11131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_KW_KEYS_in_tableRowFormatMapKeysIdentifier11133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatMapKeysIdentifier11135 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatMapKeysIdentifier11137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatMapKeysIdentifier11141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LINES_in_tableRowFormatLinesIdentifier11187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatLinesIdentifier11189 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatLinesIdentifier11191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatLinesIdentifier11195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NULL_in_tableRowNullFormat11241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_KW_DEFINED_in_tableRowNullFormat11243 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_KW_AS_in_tableRowNullFormat11245 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowNullFormat11249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat11304 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_KW_AS_in_tableFileFormat11306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_KW_INPUTFORMAT_in_tableFileFormat11308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat11312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_OUTPUTFORMAT_in_tableFileFormat11314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat11318 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_KW_INPUTDRIVER_in_tableFileFormat11321 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat11325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_KW_OUTPUTDRIVER_in_tableFileFormat11327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat11331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat11369 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableFileFormat11371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat11375 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_KW_WITH_in_tableFileFormat11387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_tableFileFormat11389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_tableProperties_in_tableFileFormat11393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat11424 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_KW_AS_in_tableFileFormat11426 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_identifier_in_tableFileFormat11430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCATION_in_tableLocation11478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableLocation11482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_columnNameType_in_columnNameTypeList11518 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_COMMA_in_columnNameTypeList11521 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_columnNameType_in_columnNameTypeList11523 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_columnNameColonType_in_columnNameColonTypeList11561 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_COMMA_in_columnNameColonTypeList11564 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_columnNameColonType_in_columnNameColonTypeList11566 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_columnName_in_columnNameList11604 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_COMMA_in_columnNameList11607 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_columnName_in_columnNameList11609 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_identifier_in_columnName11653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_columnNameOrder_in_columnNameOrderList11680 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_COMMA_in_columnNameOrderList11683 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_columnNameOrder_in_columnNameOrderList11685 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_skewedColumnValues_in_skewedValueElement11729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skewedColumnValuePairList_in_skewedValueElement11738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList11765 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_COMMA_in_skewedColumnValuePairList11768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList11770 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_LPAREN_in_skewedColumnValuePair11814 = new BitSet(new long[]{0x0000000000042080L,0x00000800000010C0L,0x0000000000004000L,0x0000000000000000L,0x0B00400000000204L});
    public static final BitSet FOLLOW_skewedColumnValues_in_skewedColumnValuePair11818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_skewedColumnValuePair11820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skewedColumnValue_in_skewedColumnValues11862 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_COMMA_in_skewedColumnValues11865 = new BitSet(new long[]{0x0000000000042080L,0x00000800000010C0L,0x0000000000004000L,0x0000000000000000L,0x0B00400000000204L});
    public static final BitSet FOLLOW_skewedColumnValue_in_skewedColumnValues11867 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_constant_in_skewedColumnValue11911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skewedColumnValue_in_skewedValueLocationElement11944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skewedColumnValuePair_in_skewedValueLocationElement11953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_columnNameOrder11980 = new BitSet(new long[]{0x0000002000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_KW_ASC_in_columnNameOrder11985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DESC_in_columnNameOrder11991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_columnNameComment_in_columnNameCommentList12063 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_COMMA_in_columnNameCommentList12066 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_columnNameComment_in_columnNameCommentList12068 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_identifier_in_columnNameComment12108 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_KW_COMMENT_in_columnNameComment12111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_columnNameComment12115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_columnRefOrder12163 = new BitSet(new long[]{0x0000002000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_KW_ASC_in_columnRefOrder12168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DESC_in_columnRefOrder12174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_columnNameType12248 = new BitSet(new long[]{0x00100E0800000000L,0x0002000020013000L,0x0000001000001000L,0x0604000000000000L,0x000000002000800CL});
    public static final BitSet FOLLOW_colType_in_columnNameType12250 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_KW_COMMENT_in_columnNameType12253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_columnNameType12257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_columnNameColonType12353 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_COLON_in_columnNameColonType12355 = new BitSet(new long[]{0x00100E0800000000L,0x0002000020013000L,0x0000001000001000L,0x0604000000000000L,0x000000002000800CL});
    public static final BitSet FOLLOW_colType_in_columnNameColonType12357 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_KW_COMMENT_in_columnNameColonType12360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_columnNameColonType12364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_colType12448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colType_in_colTypeList12475 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_COMMA_in_colTypeList12478 = new BitSet(new long[]{0x00100E0800000000L,0x0002000020013000L,0x0000001000001000L,0x0604000000000000L,0x000000002000800CL});
    public static final BitSet FOLLOW_colType_in_colTypeList12480 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_primitiveType_in_type12508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_listType_in_type12516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_structType_in_type12524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mapType_in_type12532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unionType_in_type12540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TINYINT_in_primitiveType12562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SMALLINT_in_primitiveType12583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INT_in_primitiveType12603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_BIGINT_in_primitiveType12628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_BOOLEAN_in_primitiveType12650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FLOAT_in_primitiveType12671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DOUBLE_in_primitiveType12694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DATE_in_primitiveType12716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DATETIME_in_primitiveType12740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TIMESTAMP_in_primitiveType12760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STRING_in_primitiveType12794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_BINARY_in_primitiveType12816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DECIMAL_in_primitiveType12838 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LPAREN_in_primitiveType12841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_Number_in_primitiveType12845 = new BitSet(new long[]{0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_COMMA_in_primitiveType12848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_Number_in_primitiveType12852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_primitiveType12856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_VARCHAR_in_primitiveType12880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LPAREN_in_primitiveType12882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_Number_in_primitiveType12886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_primitiveType12888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CHAR_in_primitiveType12913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LPAREN_in_primitiveType12915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_Number_in_primitiveType12919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_primitiveType12921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ARRAY_in_listType12965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_LESSTHAN_in_listType12967 = new BitSet(new long[]{0x00100E0800000000L,0x0002000020013000L,0x0000001000001000L,0x0604000000000000L,0x000000002000800CL});
    public static final BitSet FOLLOW_type_in_listType12969 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_listType12971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STRUCT_in_structType13008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_LESSTHAN_in_structType13010 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_columnNameColonTypeList_in_structType13012 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_structType13014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MAP_in_mapType13049 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_LESSTHAN_in_mapType13051 = new BitSet(new long[]{0x00100E0000000000L,0x0002000020013000L,0x0000000000001000L,0x0204000000000000L,0x000000002000000CL});
    public static final BitSet FOLLOW_primitiveType_in_mapType13055 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COMMA_in_mapType13057 = new BitSet(new long[]{0x00100E0800000000L,0x0002000020013000L,0x0000001000001000L,0x0604000000000000L,0x000000002000800CL});
    public static final BitSet FOLLOW_type_in_mapType13061 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_mapType13063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNIONTYPE_in_unionType13106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_LESSTHAN_in_unionType13108 = new BitSet(new long[]{0x00100E0800000000L,0x0002000020013000L,0x0000001000001000L,0x0604000000000000L,0x000000002000800CL});
    public static final BitSet FOLLOW_colTypeList_in_unionType13110 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_unionType13112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNION_in_setOperator13147 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_KW_ALL_in_setOperator13149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNION_in_setOperator13163 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_KW_DISTINCT_in_setOperator13165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_withClause_in_queryStatementExpression13203 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000001000000800L,0x0000008000080000L});
    public static final BitSet FOLLOW_queryStatementExpressionBody_in_queryStatementExpression13213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fromStatement_in_queryStatementExpressionBody13247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_regularBody_in_queryStatementExpressionBody13256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_WITH_in_withClause13274 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_cteStatement_in_withClause13276 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_COMMA_in_withClause13279 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_cteStatement_in_withClause13281 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_identifier_in_cteStatement13307 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_KW_AS_in_cteStatement13309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LPAREN_in_cteStatement13311 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000001000000800L,0x0000008000080000L,0x0000000800000000L});
    public static final BitSet FOLLOW_queryStatementExpression_in_cteStatement13313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_cteStatement13316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_singleFromStatement_in_fromStatement13340 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_setOperator_in_fromStatement13352 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_singleFromStatement_in_fromStatement13356 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_fromClause_in_singleFromStatement13562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000800L,0x0000008000080000L});
    public static final BitSet FOLLOW_body_in_singleFromStatement13572 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001000000800L,0x0000008000080000L});
    public static final BitSet FOLLOW_insertClause_in_regularBody13610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000008000080000L,0x0000000008000000L});
    public static final BitSet FOLLOW_selectStatement_in_regularBody13622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_valuesClause_in_regularBody13650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectStatement_in_regularBody13774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectClause_in_selectStatement13801 = new BitSet(new long[]{0x0020000000000002L,0x2840000010000000L,0x0080000004000000L,0x0008000000000000L,0x0000000500004000L});
    public static final BitSet FOLLOW_fromClause_in_selectStatement13808 = new BitSet(new long[]{0x0020000000000002L,0x2800000010000000L,0x0080000004000000L,0x0008000000000000L,0x0000000500004000L});
    public static final BitSet FOLLOW_whereClause_in_selectStatement13816 = new BitSet(new long[]{0x0020000000000002L,0x2800000010000000L,0x0080000004000000L,0x0008000000000000L,0x0000000400004000L});
    public static final BitSet FOLLOW_groupByClause_in_selectStatement13824 = new BitSet(new long[]{0x0020000000000002L,0x2000000010000000L,0x0080000004000000L,0x0008000000000000L,0x0000000400004000L});
    public static final BitSet FOLLOW_havingClause_in_selectStatement13832 = new BitSet(new long[]{0x0020000000000002L,0x0000000010000000L,0x0080000004000000L,0x0008000000000000L,0x0000000400004000L});
    public static final BitSet FOLLOW_orderByClause_in_selectStatement13840 = new BitSet(new long[]{0x0020000000000002L,0x0000000010000000L,0x0000000004000000L,0x0008000000000000L,0x0000000400004000L});
    public static final BitSet FOLLOW_clusterByClause_in_selectStatement13848 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L,0x0000000004000000L,0x0008000000000000L,0x0000000400004000L});
    public static final BitSet FOLLOW_distributeByClause_in_selectStatement13856 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L,0x0008000000000000L,0x0000000400004000L});
    public static final BitSet FOLLOW_sortByClause_in_selectStatement13864 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000400004000L});
    public static final BitSet FOLLOW_window_clause_in_selectStatement13872 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_limitClause_in_selectStatement13880 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_setOpSelectStatement_in_selectStatement14002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_setOperator_in_setOpSelectStatement14064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000008000080000L});
    public static final BitSet FOLLOW_simpleSelectStatement_in_setOpSelectStatement14068 = new BitSet(new long[]{0x0020000000000002L,0x0000000010000000L,0x0080000004000000L,0x0008000000000000L,0x0000000400004000L});
    public static final BitSet FOLLOW_orderByClause_in_setOpSelectStatement14495 = new BitSet(new long[]{0x0020000000000002L,0x0000000010000000L,0x0000000004000000L,0x0008000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_clusterByClause_in_setOpSelectStatement14503 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L,0x0000000004000000L,0x0008000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_distributeByClause_in_setOpSelectStatement14511 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L,0x0008000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_sortByClause_in_setOpSelectStatement14519 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_window_clause_in_setOpSelectStatement14527 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_limitClause_in_setOpSelectStatement14535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectClause_in_simpleSelectStatement14781 = new BitSet(new long[]{0x0000000000000002L,0x2840000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_fromClause_in_simpleSelectStatement14786 = new BitSet(new long[]{0x0000000000000002L,0x2800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_whereClause_in_simpleSelectStatement14792 = new BitSet(new long[]{0x0000000000000002L,0x2800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_groupByClause_in_simpleSelectStatement14798 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_havingClause_in_simpleSelectStatement14804 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_window_clause_in_simpleSelectStatement14817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_withClause_in_selectStatementWithCTE14903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000008000080000L});
    public static final BitSet FOLLOW_selectStatement_in_selectStatementWithCTE14911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insertClause_in_body14942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000008000080000L});
    public static final BitSet FOLLOW_selectClause_in_body14947 = new BitSet(new long[]{0x0020000000000002L,0x2800000010000000L,0x0080000004400000L,0x0008000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_lateralView_in_body14952 = new BitSet(new long[]{0x0020000000000002L,0x2800000010000000L,0x0080000004000000L,0x0008000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_whereClause_in_body14958 = new BitSet(new long[]{0x0020000000000002L,0x2800000010000000L,0x0080000004000000L,0x0008000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_groupByClause_in_body14964 = new BitSet(new long[]{0x0020000000000002L,0x2000000010000000L,0x0080000004000000L,0x0008000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_havingClause_in_body14970 = new BitSet(new long[]{0x0020000000000002L,0x0000000010000000L,0x0080000004000000L,0x0008000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_orderByClause_in_body14976 = new BitSet(new long[]{0x0020000000000002L,0x0000000010000000L,0x0000000004000000L,0x0008000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_clusterByClause_in_body14982 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L,0x0000000004000000L,0x0008000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_distributeByClause_in_body14988 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L,0x0008000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_sortByClause_in_body14994 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_window_clause_in_body15000 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_limitClause_in_body15006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectClause_in_body15099 = new BitSet(new long[]{0x0020000000000002L,0x2800000010000000L,0x0080000004400000L,0x0008000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_lateralView_in_body15104 = new BitSet(new long[]{0x0020000000000002L,0x2800000010000000L,0x0080000004000000L,0x0008000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_whereClause_in_body15110 = new BitSet(new long[]{0x0020000000000002L,0x2800000010000000L,0x0080000004000000L,0x0008000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_groupByClause_in_body15116 = new BitSet(new long[]{0x0020000000000002L,0x2000000010000000L,0x0080000004000000L,0x0008000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_havingClause_in_body15122 = new BitSet(new long[]{0x0020000000000002L,0x0000000010000000L,0x0080000004000000L,0x0008000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_orderByClause_in_body15128 = new BitSet(new long[]{0x0020000000000002L,0x0000000010000000L,0x0000000004000000L,0x0008000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_clusterByClause_in_body15134 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L,0x0000000004000000L,0x0008000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_distributeByClause_in_body15140 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L,0x0008000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_sortByClause_in_body15146 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_window_clause_in_body15152 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_limitClause_in_body15158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INSERT_in_insertClause15279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_KW_OVERWRITE_in_insertClause15281 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000020000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_destination_in_insertClause15283 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_ifNotExists_in_insertClause15285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INSERT_in_insertClause15304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_KW_INTO_in_insertClause15306 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_KW_TABLE_in_insertClause15308 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableOrPartition_in_insertClause15311 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LPAREN_in_insertClause15314 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_columnNameList_in_insertClause15318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_insertClause15320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCAL_in_destination15376 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_DIRECTORY_in_destination15380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_destination15382 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0080000400000000L});
    public static final BitSet FOLLOW_tableRowFormat_in_destination15384 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_tableFileFormat_in_destination15387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TABLE_in_destination15420 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableOrPartition_in_destination15422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LIMIT_in_limitClause15454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_Number_in_limitClause15458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DELETE_in_deleteStatement15496 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_FROM_in_deleteStatement15498 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableName_in_deleteStatement15500 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_whereClause_in_deleteStatement15503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableOrColumn_in_columnAssignmentClause15536 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_EQUAL_in_columnAssignmentClause15538 = new BitSet(new long[]{0xFDEFFFFDFC042080L,0xDEBBFDEAF7FFFBD6L,0x6FAF77F7FEF7FFFFL,0xDFFFFF7FFFF7FF9FL,0x0F00C91A5FFEEF7DL});
    public static final BitSet FOLLOW_precedencePlusExpression_in_columnAssignmentClause15541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_setColumnsClause15561 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_columnAssignmentClause_in_setColumnsClause15563 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_COMMA_in_setColumnsClause15566 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_columnAssignmentClause_in_setColumnsClause15568 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_KW_UPDATE_in_updateStatement15610 = new BitSet(new long[]{0xFDE9FFFDFC000000L,0xDEBBFDEAF7FFFBD6L,0x6FAF77E7FEF7BFFDL,0xDFFFFF7FFFF7FF9FL,0x0000001A5FFEEF7DL});
    public static final BitSet FOLLOW_tableName_in_updateStatement15612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_setColumnsClause_in_updateStatement15614 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_whereClause_in_updateStatement15616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grantPrivileges_in_synpred1_HiveParser1840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_revokePrivileges_in_synpred2_HiveParser1854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixRename_in_synpred3_HiveParser3853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ELEM_TYPE_in_synpred4_HiveParser6412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_KEY_TYPE_in_synpred5_HiveParser6428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_VALUE_TYPE_in_synpred6_HiveParser6444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FUNCTION_in_synpred8_HiveParser6600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALL_in_synpred11_HiveParser8157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALL_in_synpred12_HiveParser8331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_storedAsDirs_in_synpred13_HiveParser10314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_synpred14_HiveParser11295 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_KW_AS_in_synpred14_HiveParser11297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_KW_INPUTFORMAT_in_synpred14_HiveParser11299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_window_clause_in_synpred15_HiveParser14812 = new BitSet(new long[]{0x0000000000000002L});

}